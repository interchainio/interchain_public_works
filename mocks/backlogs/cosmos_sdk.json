{"items":[{"assignees":["julienrbrt"],"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nUser case: node operator will use cosmovisor to prepare everything in advance for the next upgrade which is accepted:\r\n* download binaries\r\n* verify checksum\r\n\r\nThe command should print:\r\n* upgrade name\r\n* upgrade time\r\n\r\n____\r\n\r\n#### For Admin Use\r\n\r\n- [x] Not duplicate issue\r\n- [x] Appropriate labels applied\r\n- [x] Appropriate contributors tagged\r\n- [x] Contributor assigned/self-assigned\r\n","number":10910,"repository":"cosmos/cosmos-sdk","title":"Cosmovisor fetch-upgrade command","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/10910"},"id":"PVTI_lADOAAN9684ABqEwzgBGIHI","labels":["C:Cosmovisor"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Cosmovisor fetch-upgrade command"},{"assignees":["lucaslopezf"],"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Please also ensure that this is not a duplicate issue :)  \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n<!--\r\nIMPORTANT: Prior to opening a bug report, check if it affects one of the core modules\r\nand if its elegible for a bug bounty on `SECURITY.md`. Bugs that are not submitted\r\nthrough the appropriate channels won't receive any bounty.\r\n -->\r\n\r\n## Summary of Bug\r\n\r\n<!-- Concisely describe the issue -->\r\nI am able to delegate 3000000uxprt to a validator. \r\nBut unable to unbond 3000000uxprt from the same validator\r\nAble to unbond 2999999uxprt from the validator\r\nNote: no slashing event has occurred after delegation\r\n\r\n## Version\r\n\r\n42.4 , but should be in latest versions too.\r\n\r\n## Steps to Reproduce\r\n\r\n<!-- What commands in order should someone run to reproduce your problem? -->\r\n\r\nCame across this issue in persistenceCore testnet\r\n[video of issue while testing in wallet here](https://github.com/persistenceOne/persistenceWallet/issues/378) - Have checked and is not an UI issue.\r\nsome important links : \r\n[delegations from that account, staking delegations api ](https://rest.testnet.persistence.one/cosmos/staking/v1beta1/delegations/persistence1e3ueddwz7kffjs5x02xfq9gn7tcgvysusk2n79)\r\n\r\n[all transactions from the account, tx search api ](https://rest.testnet.persistence.one/cosmos/tx/v1beta1/txs?events=message.sender=%27persistence1e3ueddwz7kffjs5x02xfq9gn7tcgvysusk2n79%27)\r\n\r\nNote that Delegation messages delegate (1xprt validatorA),(1xprt,2xprt validatorB)\r\nthe query from delegations shows delegation tokens as 2.999999 for validatorB.\r\n\r\nEven when I try to unbond 3xprt tokens from validatorB,  I get the error `invalid shares amount` [link to failed tx](https://rest.testnet.persistence.one/cosmos/tx/v1beta1/txs/B4C5927488E3BA88D4DF9F2801740A85B46A38C05E5F929D917AB87C59AF5EBF)\r\n\r\nConversion from dec to int while converting shares to tokens is leading to loss of tokens.\r\n\r\n____\r\n\r\n## For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":11084,"repository":"cosmos/cosmos-sdk","title":"Missing tokens in delegations share calculations.","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/11084"},"id":"PVTI_lADOAAN9684ABqEwzgBFw-A","labels":["T:Bug","C:x/staking"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20840"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"üêû Bug","title":"Missing tokens in delegations share calculations."},{"assignees":["julienrbrt","likhita-809"],"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nMuch of the cosmos-sdk was written many years ago while it was evolving and growing its user base. In these times its hard to pinpoint the exact API's users may want. It has now been almost 3 years since appmodule interfaces were introduced and we have learned a lot on how to simplify things. \r\n\r\nThere is ongoing work with the core api and runtime modules in order to handle lots of the wiring. There will be a migration story, but there are users that may want to take longer to migrate instead of all at once. For these users it makes sense  to spend a few days cleaning up the old apis to make it more ergonomic. Many of the changes would be minimal and could be done in a backwards way\r\n\r\nOn top of the APIs of creating modules, there are other areas where users could benefit from some cleanup. \r\n\r\nSome ideas are:\r\n\r\n- Client api cleanup and ergonomic fixes\r\n - this has come up but would need better insight into how this should progress cc @jackzampolin \r\n- Codegen all cli and grpc for modules to avoid needing to write extra boiler plate \r\n- Separate internal external logic with a internal package in modules\r\n\r\n\r\nI'd love to hear from @ValarDragon @ethanfrey @jackzampolin on other things they would like to see.  Then we can add it to the tracking list:\r\n\r\n---\r\n\r\nFocus list:\r\n\r\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/11504\r\n- [x] https://github.com/cosmos/cosmos-sdk/issues/13041\r\n- [x] https://github.com/cosmos/cosmos-sdk/issues/12926\r\n- [x] https://github.com/cosmos/cosmos-sdk/issues/12908\r\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/12805\r\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/12642\r\n- [x] https://github.com/cosmos/cosmos-sdk/issues/12079\r\n- [x] https://github.com/cosmos/cosmos-sdk/issues/11868\r\n- [x] https://github.com/cosmos/cosmos-sdk/issues/10856\r\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/7985\r\n- [x] https://github.com/cosmos/cosmos-sdk/issues/12091\r\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/13171\r\n\r\nAs per the interviews with chain devs, the following issues have been created:\r\n\r\n- [x] https://github.com/cosmos/cosmos-sdk/issues/10562\r\n- [ ] https://github.com/cosmos/iavl/issues/567\r\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/13363\r\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/1727\r\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/10910\r\n- [ ] ...\r\n\r\nExhaustive list:\r\n\r\n- https://github.com/cosmos/cosmos-sdk/labels/T%3A%20Dev%20UX","number":13085,"repository":"cosmos/cosmos-sdk","title":"EPIC: Dev UX","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/13085"},"id":"PVTI_lADOAAN9684ABqEwzgCSefg","labels":["T: Dev UX","T:Epic"],"priority ":"High","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üëë Epic","title":"EPIC: Dev UX"},{"assignees":["aaronc","amaury1093"],"content":{"body":"Reviewing and summarizing the decision in https://github.com/cosmos/cosmos-sdk/discussions/10406 (approach 2 was chosen)","number":11618,"repository":"cosmos/cosmos-sdk","title":"Write ADR for protobuf package versioning","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/11618"},"id":"PVTI_lADOAAN9684ABqEwzgBFxW0","labels":["C: Proto"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"Write ADR for protobuf package versioning"},{"content":{"body":"Given the following proto message type:\r\n\r\n\r\n```proto\r\nmessage Foo {\r\n  string type = 1;\r\n}\r\n```\r\n\r\nWe will produce a ```Foo.Type``` field and a ```Foo.Type() protoreflect.MessageType``` method, this causes code conflicts.\r\n\r\nIf a message uses a reserved name, for the sake of simplicity, we should suffix the field with an underscore `_`. \r\n\r\nI would also output a warning message that this is bad, and we might break it in the future (reason for breaking is that we are incompatible with protoc field codegen which I do not think is good).","number":50,"repository":"cosmos/cosmos-proto","title":"fix field/method conflict","type":"Issue","url":"https://github.com/cosmos/cosmos-proto/issues/50"},"id":"PVTI_lADOAAN9684ABqEwzgBFy5M","labels":["WG: Framework"],"linked pull requests":["https://github.com/cosmos/cosmos-proto/pull/51"],"milestone":{"description":"","dueOn":"2022-02-18T00:00:00Z","title":"v1.0.0"},"priority ":"Low","repository":"https://github.com/cosmos/cosmos-proto","status":"üìã Backlog","title":"fix field/method conflict"},{"assignees":["aaronc","kocubinski","facundomedica","julienrbrt"],"content":{"body":"## Overview\r\n\r\nThis issue outlines a roadmap for breaking up all of the `x/...` SDK modules and `simapp` into standalone go modules using the  [app wiring design](https://github.com/cosmos/cosmos-sdk/pull/11873) .\r\n\r\n- [ ] Update the ADR for reflecting the implementation (first draft: https://github.com/cosmos/cosmos-sdk/pull/11873)\r\n\r\n## Problem Definition\r\n\r\nThe key culprit of the SDK not being decomposable into separate go modules is the dependency on `simapp`. `simapp` imports every module but every module and most packages also import `simapp` into their tests. Overall there are 184 references to `simapp` in other packages (run `Code > Analyze Code > Backwards Dependencies‚Ä¶` on `simapp` in Goland or IntelliJ to create this report). The reason for such widespread usage of simapp in tests is because there needs to be a way to do integration tests in the SDK and simapp provides the key test fixture. Unfortunately, this creates a Gordian knot where all the modules depend on each other and breaking them up is almost impossible. App wiring provides a solution to this problem by creating a way to quickly spin up integration test fixtures locally in each module rather than using a single SDK wide test fixture that brings all these problems.\r\n\r\n## Phase 1: App Wiring MVP\r\n\r\nIn this first phase, we create an MVP of app wiring that has these requirements:\r\n* can refactor a single module (we‚Äôre choosing `x/nft`) to not depend on simapp at all for testing or any other reason\r\n* can refactor part of `simapp/app.go` to use the new app wiring while still wiring up everything else as before - this is required to make the app wiring migration gradual and opt-in\r\n\r\nFor now, the app wiring framework that we will create will forego dealing with any of the messy issues related to [protobuf generated code and semantic versioning](https://github.com/cosmos/cosmos-sdk/pull/11802). This means basically that app wiring will use the global protobuf registry for decoding the app config and the existing gogo proto-based `codec` package will be used elsewhere.\r\n\r\n- [x] Single module (x/nft) tests using app.yaml instead of simapp (full feature branch in #11900), being broken down into separate PRs:\r\n  - [x] #11912 \r\n  - [x] #11913 \r\n  - [x] #11914\r\n  - [x] #11915\r\n  - [x] #11924 \r\n  - [x] additional app wiring setups from #11900 \r\n    - [x] #12019 \r\n    - [x] #12032 \r\n    - [x] #12036\r\n    - [x] #12035\r\n    - [x] #12038\r\n  - [x] x/nft cli tests and testutil/network from #11900\r\n- [x] #11904\r\n- [x] #11905\r\n- [x] #11906\r\n- [x] #11917\r\n- [x] #11925\r\n- [x] #11935\r\n- [x] #11937\r\n\r\n## Phase 2: Decouple modules and packages from simapp\r\nFollowing the patterns demonstrated in `x/nft` do the same for each module and package which depends on `simapp` in the SDK, essentially:\r\n* create a protobuf `Module` config message and register a module implementation with `appmodule.Register`\r\n* inject the new module into simapp\r\n* ~migrate CLI tests to use `appconfig`~ Superseded by #12398\r\n* ~migrate simulations and any other code requiring simapp~ Superseded by #12398\r\n\r\nModules should be migrated starting with those with fewer dependencies on other modules first.\r\n\r\n- [x] #12023\r\n- [x] #12024\r\n- [x] #12084 \r\n- [x] #12073 \r\n- [x] #12194\r\n- [x] #12069 \r\n- [x] #12298\r\n- [x] #12238\r\n- [x] #12302\r\n- [x] #12083\r\n- [x] #12036\r\n- [x] #12195\r\n- [x] #12292 \r\n- [x] #12234\r\n- [x] x/genutil\r\n- [x] #12274\r\n- [x] #12300\r\n\r\nThese other issues can also be addressed incrementally during phase 2:\r\n- [x] #12054\r\n- [x] #12055\r\n- [x] #12056\r\n- [x] #12068 \r\n- [ ] depinject module upgrades based to make this work easier (*nice to have*):\r\n\t- [x] #11907\r\n\t- [x] #11908\r\n\t- [x] #11909\r\n\t- [x] #11910\r\n\t- [x] #11911\r\n\t- [x] #11943\r\n\t- [x] #11944\r\n\t- [x] #12252\r\n- [x] #11903\r\n- [x] #12237\r\n- [x] #12400\r\n\r\nAs this work proceeds, simapp itself can be refactored to use its `app.yaml` more and more - this can be done incrementally as each module is migrated or at the end when simapp is standalone.\r\n\r\nOther packages besides the `x/*` modules depend on `simapp` as well, usually to call `simapp.MakeTestEncodingConfig()` or `simapp.DefaultConsensusParams()`. `DefaultConsensusParams` should have been moved in Phase 1, but `MakeTestEncodingConfig` may require app wiring because it used to build a codec with some modules registered. A strategy for decoupling the following packages from `simapp` will need to be created:\r\n- [x] #12535\r\n- [x] #12544\r\n- [x] #12528\r\n- [x] #12612\r\n- [x] #12619\r\n- [x] #12546\r\n- [x] #12584\r\n\r\nAt this point, a review of all the migrated modules should be performed. The review should verify the tests coverage and the test behaviors is kept unchanged compared to before the migration.\r\n\r\n## Phase 3: Make simapp a standalone go module\r\nInstructions in https://github.com/golang/go/wiki/Modules#is-it-possible-to-add-a-module-to-a-multi-module-repository must be followed. Also, we want to make tags off of a release branch, not `main`. It is expected that these steps will be required:\r\n\r\n- [x] make simapp a standalone go module `github.com/cosmos/cosmos-sdk/simapp` which imports `github.com/cosmos/cosmos-sdk` probably using a `replace` tag to start. Any remaining dependencies of the rest of the SDK on simapp *must* be removed by now\r\n\r\n## Phase 4: Make all modules standalone\r\n\r\nAgain following the instructions from https://github.com/golang/go/wiki/Modules#is-it-possible-to-add-a-module-to-a-multi-module-repository and starting with the modules with the fewest dependencies to the most.\r\nList of To-dos when creating a `go.mod`: https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#gomod\r\n\r\n- [x] x/nft\r\n- [x] x/params\r\n- [x] #17936\r\n- [x] x/authz\r\n- [x] [x/feegrant](https://github.com/cosmos/cosmos-sdk/issues/14559)\r\n- [x] [x/crisis](https://github.com/cosmos/cosmos-sdk/issues/14558)\r\n- [x] [x/capability](https://github.com/cosmos/cosmos-sdk/issues/14556)\r\n- [x] [x/upgrade](https://github.com/cosmos/cosmos-sdk/issues/14560)\r\n- [x] [x/evidence](https://github.com/cosmos/cosmos-sdk/issues/14557)\r\n- [x] x/auth\r\n- [x] x/bank\r\n- [x] x/staking\r\n- [x] x/slashing\r\n- [x] x/distribution\r\n- [x] #17813\r\n- [x] #18411\r\n\r\n## Phase 5\r\n\r\n- [ ] audit dependency graph \r\n- [x] #18290\r\n- [x] cleanup intermodule dependency \r\n\r\nNOTE: it may not be possible to move *all* modules out of the core go module with this strategy alone because of other cyclic dependencies between each other (such as `x/auth` and `x/bank`). Other strategies may be needed or there may be an inseparable set of modules that stay in the SDK for now and are decoupled later if needed.","number":11899,"repository":"cosmos/cosmos-sdk","title":"EPIC: Separate all SDK modules into standalone go modules","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/11899"},"id":"PVTI_lADOAAN9684ABqEwzgBGdRU","labels":["T:Epic"],"priority ":"High","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"üëë Epic","title":"EPIC: Separate all SDK modules into standalone go modules"},{"content":{"body":"Comprehensive documentation should be done with a `README.md` and/or doc.go file in the root module and ideally each package.\n\nThe root documentation should include:\n* guidelines on how to write proto annotations for tables\n* best practices for designing schemas:\n  * database normalization at least 1st and 2nd normal form\n  * the benefit of even more normalization like 6NF where there data is frequently accessed - ex. account `seq` is read/written much more often than `pubkey` so they should be separate tables\n  * general protobuf schema evolution\n  * why this is important - better designed tables with better normalization will mean the schema lasts longer and painful migrations away from v1 tables may be avoided entirely\n* high-level usage of tables and indexes\n* how to integrate with ADR 038 and decode tables into external DBs","number":10734,"repository":"cosmos/cosmos-sdk","title":"ORM documentation","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/10734"},"id":"PVTI_lADOAAN9684ABqEwzgBFzGA","labels":["C:orm"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"ORM documentation"},{"content":{"body":"Using `EntryCodec`s and ADR 038 (or alternative orm `Hooks`), orm data can be indexed in an SQL database if there is some conversion of `proto.Message` to SQL.\r\n\r\nThe proposed approach is to use https://gorm.io to target any backend it targets (Sqlite, Postgres, Mysql, etc.). The indexer would read the ORM proto extensions in order to tell GORM which fields to setup as the primary key, and using GORM `AutoMigrate`, the integration should be pretty straightforward.","number":11000,"repository":"cosmos/cosmos-sdk","title":"ORM SQL indexing","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/11000"},"id":"PVTI_lADOAAN9684ABqEwzgBFzGM","labels":["C:orm"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/10999"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"ORM SQL indexing"},{"content":{"body":"The plugin currently does not support optional fields:\r\n\r\n```\r\ntestpb/1.proto: is a proto3 file that contains optional fields, but code generator protoc-gen-go-fasteflection hasn't been updated to support optional fields in proto3.\r\n```","number":12,"repository":"cosmos/cosmos-proto","title":"Support optional fields","type":"Issue","url":"https://github.com/cosmos/cosmos-proto/issues/12"},"id":"PVTI_lADOAAN9684ABqEwzgBFzG0","labels":["WG: Framework"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-proto","status":"üìã Backlog","title":"Support optional fields"},{"content":{"body":"Probably the only things that really need to be exposed are in `runtime` and the `cosmos_proto.proto` extensions.","number":37,"repository":"cosmos/cosmos-proto","title":"Move everything that shouldn't be exported to internal packages","type":"Issue","url":"https://github.com/cosmos/cosmos-proto/issues/37"},"id":"PVTI_lADOAAN9684ABqEwzgBFzHA","labels":["WG: Framework"],"linked pull requests":["https://github.com/cosmos/cosmos-proto/pull/48"],"milestone":{"description":"","dueOn":"2022-02-18T00:00:00Z","title":"v1.0.0"},"priority ":"Low","repository":"https://github.com/cosmos/cosmos-proto","status":"üìã Backlog","title":"Move everything that shouldn't be exported to internal packages"},{"content":{"body":"In order to properly support migrations, the ORM will need the following:\n* the schema of each module will need to be stored in state\n* pinned file descriptors based on the version of the proto files the module was built against will need to be stored in state (see Pinning State Machine API Compatibility in #10582)\n* when a migration happens the ORM and/or Codec will need to:\n  * store the new schema and new pinned file descriptors\n  * make sure that only compatible migrations are happening which basically only include adding an index\n  * build newly added indexes by scanning the primary key index\n\nAs an added bonus, we may want to think about future scenarios where old tables are replaced with \"views\" so that clients still have some layer of compatibility. It is a question, however, how much we want to do this in the state machine or out of band in some client query layer in an external database. Merkle proofs _will not_ work if tables are replaced with views.\n","number":10733,"repository":"cosmos/cosmos-sdk","title":"ORM Stateful Schema and Migrations","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/10733"},"id":"PVTI_lADOAAN9684ABqEwzgBFzIk","labels":["C:orm"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"ORM Stateful Schema and Migrations"},{"content":{"body":"A basic gRPC service should include:\n* a way to retrieve the full schema + FileDescriptorSet to be used by ADR 038 state listeners\n* simple `Get`/`List` methods using `protobuf.Any` to query any table in the app with support for pagination, prefix and range queries (ideally)\n* as a nice to have, ics23 proofs as an option on the `Get` method","number":10736,"repository":"cosmos/cosmos-sdk","title":"ORM gRPC service","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/10736"},"id":"PVTI_lADOAAN9684ABqEwzgBFzJM","labels":["C:orm"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"ORM gRPC service"},{"content":{"body":"#11101 adds ORM JSON import/export based on the current SDK `RawMessage` genesis JSON support, although it is extensible to support files and streaming JSON (#6936).\r\n\r\nTo fully support streaming JSON we should add JSON file-system based sources and targets which read/write JSON to a file `<proto_full_name>.json` for each table in some directory. (ex. `cosmos.bank.v1beta1.Balance.json`).\r\n\r\nWe may also want to support a hybrid reader mode which will read a file from the directory or a JSON map depending on which one exists.","number":11108,"repository":"cosmos/cosmos-sdk","title":"ORM file-based JSON import/export","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/11108"},"id":"PVTI_lADOAAN9684ABqEwzgBFzJs","labels":["C:orm"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"ORM file-based JSON import/export"},{"content":{"body":"Our deterministic marshalling implementation enforces canonical marshalling for messages.\r\nThis is achieved because we generated that code with pulsar codegen.\r\n\r\nBut what happens when we import a message that was not generated with cosmos-proto?\r\n\r\nEx:\r\n\r\n```proto\r\nmessage GeneratedWithCosmosProto {\r\n  google.Protobuf.FileDescriptor not_generated_with_cosmos_proto = 1;\r\n  string field = 1;\r\n  map<string, int64> map_field = 2;\r\n  ...\r\n}\r\n```\r\n\r\nHow do we detect that the import is not generated with pulsar from marshal codegen, and then how do we marshal it in a canonical way without impacting performance much?\r\n\r\nUse cases: \r\n- ORM will most likely save objects protobuf file descriptors into state using the `google.Protobuf.FileDescriptor` message. \r\n- Timestamp and Duration proto\r\n\r\nNOTE: \r\nWe can enforce deterministic marshalling for imported objects, protobuf marshal options supports this, but there is no guarantee that that deterministic marshalling follows https://github.com/cosmos/cosmos-sdk/blob/master/docs/architecture/adr-027-deterministic-protobuf-serialization.md","number":34,"repository":"cosmos/cosmos-proto","title":"Canonical marshalling for imported messages","type":"Issue","url":"https://github.com/cosmos/cosmos-proto/issues/34"},"id":"PVTI_lADOAAN9684ABqEwzgBFzKw","labels":["WG: Framework"],"milestone":{"description":"","dueOn":"2022-02-18T00:00:00Z","title":"v1.0.0"},"priority ":"Low","repository":"https://github.com/cosmos/cosmos-proto","status":"üìã Backlog","title":"Canonical marshalling for imported messages"},{"content":{"body":"In #11525, update and delete for bank balances is significantly slower with the ORM than a manual implementation because the ORM naively assumes that we always need to get and unmarshal the existing object to update and delete indexes. This is a safe general assumption, but we should add an optimization for cases where this isn't needed like bank balance and supply.\r\n\r\nOne complexity is making sure gas consumption is deterministic (already tracked in #11088). The ORM should have a well specified gas consumption model regardless of any read optimizations an implementation is able make.","number":11561,"repository":"cosmos/cosmos-sdk","title":"Optimize ORM updates and deletes for simple tables","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/11561"},"id":"PVTI_lADOAAN9684ABqEwzgBFzO0","labels":["C:orm"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"Optimize ORM updates and deletes for simple tables"},{"content":{"body":"* `cosmos_proto.scalar` proto option that applies `string` and `bytes` types\n* Mapping YAML config file between scalars (language agnostic) and golang types\nEx:\n```yaml\nscalars:\n  cosmos.Int: github.com/cosmos/cosmos-sdk/types.Int\n```\n* define `CustomType` golang interface that all golang scalar type implementations need to implement (ex. `Int`), this is what we're using for gogo proto and can maybe reuse:\n```go\ntype CustomType interface {\n\tMarshal() ([]byte, error)\n\tMarshalTo(data []byte) (n int, err error)\n\tUnmarshal(data []byte) error\n\tSize() int\n\n\tMarshalJSON() ([]byte, error)\n\tUnmarshalJSON(data []byte) error\n}\n```\n\nAn alternative that just deals with `string` and `bytes` types could be:\n```go\ntype CustomStringType interface {\n  MarshalString() (string, error)\n  UnmarshalString(string) error\n}\n\ntype CustomBytesTypes interface {\n  MarshalBytes() ([]byte, error)\n  UnmarshalBytes([]byte) error\n}\n```\nDepending on whether `cosmos_proto.scalar` is used on a `string` or `bytes` type, the corresponding interface would be used.\n\n* generate `protoreflect.Message` handling\n* generate fast marshaling handling","number":2,"repository":"cosmos/cosmos-proto","title":"Implement customtype's (Cosmos Scalars)","type":"Issue","url":"https://github.com/cosmos/cosmos-proto/issues/2"},"id":"PVTI_lADOAAN9684ABqEwzgBFzQo","labels":["WG: Framework"],"linked pull requests":["https://github.com/cosmos/cosmos-proto/pull/45"],"milestone":{"description":"","dueOn":"2022-02-18T00:00:00Z","title":"v1.0.0"},"priority ":"Low","repository":"https://github.com/cosmos/cosmos-proto","status":"‚òÉÔ∏è Icebox","title":"Implement customtype's (Cosmos Scalars)"},{"content":{"body":"The ORM already supports streaming genesis, there are a few things left to push it over the finish line so it can be used in the SDK:\r\n\r\n- [ ] #11108 \r\n- [ ] Expose streaming genesis support to SDK modules either by directly supporting the ORM's `json.ReadSource` and `json.WriteTarget` abstractions or allowing JSON files in a directory to be opened by modules","number":11601,"repository":"cosmos/cosmos-sdk","title":"ORM Streaming Genesis","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/11601"},"id":"PVTI_lADOAAN9684ABqEwzgBGIDs","labels":["C:orm"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","story Type":"‚≠êÔ∏è User story","title":"ORM Streaming Genesis"},{"content":{"body":"## Beta Readiness\r\n\r\nPrimary Objective: state machine stability\r\n\r\n- [x] pagination codegen #11079 \r\n- [x] #11091\r\n- [x] compact uint32/uint64 encoding? #11090 \r\n- [ ] should orm manage its own gas? *nice-to-have not beta blocking*\r\n- [ ] errors\r\n  - [ ] add grpc codes to errors module #11274 \r\n  - [ ] integrate grpc codes with orm errors\r\n  - [ ] clean-up orm errors\r\n- [x] is encoding format stable?\r\n  - [x] should `bytes` fields have a 255 byte limit? **Decision:** length-prefix with a varint to not panic, create a follow-up to allow ordered bytes fields as a future protobuf option\r\n    - [x] #11381\r\n  - [x] are the compact `uint32`, `uint64` parameters chosen in #11090 good to stick with?  **Decision:** this is fine for now, create a follow-up for a protobuf option to optimize for small numbers\r\n- [x] refactor hooks #11185 \r\n- [ ] move `cosmos.orm.v1alpha1` -> `cosmos.orm.v1`\r\n  - [x] orm.proto #11383 \r\n  - [ ] schema.proto\r\n- [ ] state machine stability: well-defined order of get/set/delete/has calls for each operation, use golden tests to clarify this\r\n\r\n## RC Readiness\r\n- [ ] API review\r\n  - [ ] naming\r\n  - [ ] package organization\r\n  - [ ] exported vs internal symbols\r\n- [ ] spec correctness\r\n  - [ ] audit https://github.com/regen-network/gocuke\r\n  - [ ] make sure gocuke tests are exhaustive\r\n- [ ] efficient update/delete of value returned by get and in iterators #11156 \r\n- [ ] migrate to generics\r\n- [ ] support for multi-store decoding via `EntryCodec`\r\n- [ ] correct `io.Closer` usage?\r\n- [ ] documentation\r\n","number":11088,"repository":"cosmos/cosmos-sdk","title":"ORM v1.0 Readiness Checklist","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/11088"},"id":"PVTI_lADOAAN9684ABqEwzgBFzSA","labels":["C:orm","T:Epic"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","story Type":"‚≠êÔ∏è User story","title":"ORM v1.0 Readiness Checklist"},{"content":{"body":"Beta blocking (codegen stability):\r\n- [ ] #50 \r\n- [ ] #2 (if we take the gogo approach)\r\n\r\nRelease blocking (exported API stability):\r\n- [ ] #37  ","number":63,"repository":"cosmos/cosmos-proto","title":"v1.0 Readiness Checklist","type":"Issue","url":"https://github.com/cosmos/cosmos-proto/issues/63"},"id":"PVTI_lADOAAN9684ABqEwzgBFzSc","labels":["WG: Framework"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-proto","status":"‚òÉÔ∏è Icebox","title":"v1.0 Readiness Checklist"},{"content":{"body":"This issue outlines the minimum steps needed to fully support google.golang.org/protobuf generated code (i.e. Pulsar) in the SDK. It does not describe the full migration of the SDK to use Pulsar.\r\n\r\n- [x] Use google.golang.org/protobuf in gRPC queries #11192 \r\n- [x] #11278\r\n- [ ] Use google.golang.org/protobuf in Msg servers\r\n\t- [x] #10993\r\n\t- [x] #11275 \r\n\t- [x] #11276 \r\n\t- [x] #10978 \r\n- [x] #10728 ","number":11277,"repository":"cosmos/cosmos-sdk","title":"Full google.golang.org/protobuf (Pulsar) support","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/11277"},"id":"PVTI_lADOAAN9684ABqEwzgBFzSs","labels":["C:Encoding","T:Epic"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"Full google.golang.org/protobuf (Pulsar) support"},{"content":{"body":"## User Story\r\n\r\nAs a module developer, I would like the ORM to auto-generate a query service for clients so that I don't have to manually implement gRPC queries.\r\n\r\n## Possible Designs\r\n\r\nNone of these are mutually exclusive, it's a matter of prioritizing where we focus energy.\r\n\r\n### A) Generic gRPC service\r\n\r\nThis would involve creating a single gRPC endpoint that allows querying all the ORM tables in an app and returns responses using protobuf `Any`s. One possible approach is to support a set of operators similar to what is supported in [mongodb](https://www.mongodb.com/docs/manual/reference/operator/query/).\r\n\r\nEx:\r\n```proto\r\nservice Query {\r\n  rpc Find(FindRequest) returns (FindResponse);\r\n}\r\n\r\nmessage FindRequest {\r\n  string table = 1;\r\n  repeated QueryOperator operators = 2;\r\n  repeated Ordering order = 3;\r\n  cosmos.base.query.v1beta1.PageRequest page = 4;\r\n}\r\n\r\nmessage FindResponse {\r\n  repeated google.protobuf.Any results = 1;\r\n  cosmos.base.query.v1beta1.PageResponse page = 2;\r\n}\r\n```\r\n\r\n### B) Generic JSON REST service\r\n\r\nSame as the above but with JSON instead of protobuf to allow for a simpler more flexible query language along the lines of what is provided in mongo.\r\n\r\n### C) Generate gRPC .proto files for all tables\r\n\r\nWe could generate a query service for every ORM .proto file and dynamically serve it. For instance, for the bank example in the ORM tests, we would generate a query service somewhat like this:\r\n\r\n```proto\r\nservice Query {\r\n  rpc Balance(QueryBalanceRequest) returns (QueryBalanceResponse);\r\n  rpc Balances(QueryBalancesRequest) returns (QueryBalancesResponse);\r\n...\r\n}\r\n```\r\n\r\nThis would require another layer of codegen and is more similar to what we currently have with gRPC.\r\n\r\n### D) Graphql\r\n\r\nWhile graphql is a departure from gRPC, it is likely better for building client apps and would allow for getting a bunch of objects in a single query and also traversing some joins (which could be done with additional protobuf annotations). A proposed design to follow is https://www.graphile.org/postgraphile/introduction/ which automatically generates Graphql services just from SQL table definitions.\r\n\r\n## Design Considerations\r\n\r\nSome issues to address when designing this are:\r\n\r\n### Storage Types vs Presentation Types\r\n\r\nSee https://github.com/regen-network/regen-ledger/issues/930. In particular, in lots of state tables we store addresses as bytes but users are used to seeing these usually as bech32 strings. All of these fields should be annotated with `cosmos.AddressBytes` so a smart query layer could do the conversion.\r\n\r\n### Logical Queries vs Direct Index Access\r\n\r\nORM queries in the state machine are currently done with direct index access and don't really have a separation between a logical and physical plan as more robust databases do. This is probably good for state machines generally because it is more predictable in terms of performance and gas consumption. gRPC queries are also generally written as direct index access just because that's easier to do.\r\n\r\nAn auto-generated client query layer could expose indexes directly as we currently do or include a more generic set of logical query filters like MongoDB or SQL. The latter would require some query planner even if it is fairly naive. The advantage of full logical queries are:\r\n* allows for the same queries regardless of which indexes exist\r\n* is stable between different versions of a state machine which may add/remove indexes\r\n* allows for the same queries to be retargeted against a traditional DB so that clients can write the same app where the backing data store is direct state or something like Postgres or Mongo with indexed data\r\n\r\nFor these reasons, I'm leaning towards supporting logical queries with the most naive query planner that is non-trivial (meaning that indexes are selected based on some very simple rule-based heuristics and in memory filtering and sorting are the fallback for all non-trivial cases).","number":11774,"repository":"cosmos/cosmos-sdk","title":"ORM query service","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/11774"},"id":"PVTI_lADOAAN9684ABqEwzgBGIDQ","labels":["C:orm"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","story Type":"‚≠êÔ∏è User story","title":"ORM query service"},{"assignees":["alpe","samricotta"],"content":{"body":"Based on the discussions in https://github.com/cosmos/cosmos-sdk/issues/7773, the decision regarding decimals in the SDK is to use a GDA-based decimal implementation to replace the current `sdk.Dec`. \r\n\r\nThis would likely be based on one of these two libraries and we should plan on providing upstream changes when needed:\r\n* https://github.com/cockroachdb/apd\r\n* https://github.com/ericlagergren/decimal\r\n\r\nThis new decimal type should likely go into a new standalone `math` go module along with a copy of the current `sdk.Int` implementation so these are broken out of the monolithic SDK.\r\n\r\nThe apd-based `Dec` wrapper type in regen-ledger can possibly be the basis for this new `math.Dec` type: https://github.com/regen-network/regen-ledger/tree/master/types/math","number":11783,"repository":"cosmos/cosmos-sdk","title":"upstream GDA based decimal type","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/11783"},"id":"PVTI_lADOAAN9684ABqEwzgBGIDg","labels":["T:Epic","C:math"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20085","https://github.com/cosmos/cosmos-sdk/pull/20536"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"false","sprint":"true","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"‚≠êÔ∏è User story","title":"upstream GDA based decimal type"},{"content":{"body":"It exists for x/gov and should probably be added to x/group along with (#9922)","number":9923,"repository":"cosmos/cosmos-sdk","title":"Add MsgVoteWeighted to x/group","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/9923"},"id":"PVTI_lADOAAN9684ABqEwzgBGIJo","labels":["S:proposed","C:x/group"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/11158"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"Add MsgVoteWeighted to x/group"},{"content":{"body":"## Summary\r\n\r\nAs we know, x/auth is overloaded. It's primary functionality should be account authentication. But it contains much more.\r\n\r\n## Problem Definition\r\n\r\nRecently we had a problem with x/auth migration where vesting account were vanished: https://github.com/cosmos/cosmos-sdk/issues/10591\r\n\r\nRelated:\r\n- [x] #10662\r\n\r\n## Proposal\r\n\r\nMove vesting account feature from x/auth to x/vesting and enable more feature development in a new module.","number":9958,"repository":"cosmos/cosmos-sdk","title":"EPIC: Separate x/auth and vesting","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/9958"},"id":"PVTI_lADOAAN9684ABqEwzgBGIOU","labels":["C:x/auth","S:needs architecture","T:Epic"],"priority ":"Medium","project":"x/accounts","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"üëë Epic","title":"EPIC: Separate x/auth and vesting"},{"assignees":["sontrinh16"],"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nAdd the ability for an admin key to claw back unvested tokens to a treasury account.\r\n\r\n## Problem Definition\r\n\r\nIt is standard practice in token vesting contracts, that if a team member leaves the project, the project treasury has a call option on the team member's unvested tokens, to re-purchase them at the same price they paid for them (which could be nil if they were given to the team members for no consideration).\r\n\r\nIt seems that in the current vesting module (https://docs.cosmos.network/master/modules/auth/05_vesting.html), there does not appear to be any functionality to claw back vested tokens. This therefore seems to more of a lockup module, rather than a vesting module.\r\n\r\n## Proposal\r\n\r\nAdd a function called ClawBack(treasury_address) or similar, where if it's called by the right account or signatory, unvested tokens would be sent to a treasury address. For delegated tokens that are unvested, they could be forced to be undelegated by the signatory with a function such as ForceUndelegate().\r\n\r\n____\r\n\r\n#### For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":10493,"repository":"cosmos/cosmos-sdk","title":"Add claw back to vesting module","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/10493"},"id":"PVTI_lADOAAN9684ABqEwzgBGIOs","labels":["C:x/accounts"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19894"],"priority ":"Medium","project":"x/accounts","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"Add claw back to vesting module"},{"content":{"body":"## Summary\r\n\r\nAs I am going through updating the SDK to the latest Tendermint version there have been countless changes. One, in particular, is the trust node feature. This feature allowed users to set a flag in the cli to trust the node they are sending their txs to. This feature used various functions from Tendermint to verify that the information received from a node was valid. In 0.34  of Tendermint  some of these features are no longer present. \r\n\r\n## Proposal\r\n\r\nRemove the trust node feature and get the user to use a light client. If a user is not a full node then they have the option to spin up a light client and interact through it, otherwise, they will not be able to trust the node they are speaking with\r\n\r\nThe new light client from Tendermint is efficient enough to catch up in a short period of time.\r\n\r\n\r\n@alexanderbez  do you have anything to add\r\n\r\n____\r\n\r\n#### For Admin Use\r\n\r\n- [x] Not duplicate issue\r\n- [x] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":6563,"repository":"cosmos/cosmos-sdk","title":"incorporate tendermint light client","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/6563"},"id":"PVTI_lADOAAN9684ABqEwzgBGfH8","labels":["T: Client UX"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/9155"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"incorporate tendermint light client"},{"content":{"body":"There are some funny rounding errors within distribution (see https://github.com/cosmos/cosmos-sdk/pull/4389#discussion_r286673874) \r\nwhich are due to inability for two mechanisms to have compatible rounding. If, for the duration of this calculation, we were able to increase the number of decimal places, the rounding inconsistencies should be eliminated. \r\n\r\nThis would require the ability to initialize a decimal with a custom number of decimal places, and then to convert that decimal to another type decimal with a different number of decimal places when the high-precision calculation was complete. \r\n\r\nCC @ValarDragon @cwgoes @alexanderbez ","number":4399,"repository":"cosmos/cosmos-sdk","title":"Custom decimal places for specific calculations","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/4399"},"id":"PVTI_lADOAAN9684ABqEwzgBGwfs","labels":["C:x/distribution","C:Types"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"Custom decimal places for specific calculations"},{"content":{"body":"ADR-28 was released, but we didn't update the documentation. ","number":9916,"repository":"cosmos/cosmos-sdk","title":"Update building a module documentation with section about address generation","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/9916"},"id":"PVTI_lADOAAN9684ABqEwzgBIhpM","labels":["T:Docs"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Update building a module documentation with section about address generation"},{"content":{"body":"## Summary\r\n\r\nIn past year we checked few approach for designing modules and transaction messages. ADR-31 introduced Protobuf Service oriented architecture. Recently we simplified service request messages and types and update the documentation. \r\nOur module specs are still oriented towards _messages_ rather then services. Core modules act as a template and a guideline for all other modules. Hence we should update the documentation of the core modules towards the architecture we are implementing.\r\n\r\n## Proposal\r\n\r\nIn authz module spec, we drafted how the the service oriented spec can look like and decided to roll it back and have a separate issue to update the SPEC-SPEC document together with a module spec to present a\r\n\r\n- [ ] Update the SPEC-SPEC\r\n- [ ] Update x/authz/spec files \r\n\r\nOnce done, we should create follow-up tasks to migrate other module specs.\r\n\r\n\r\n____\r\n\r\n#### For Admin Use\r\n\r\n- [x] Not duplicate issue\r\n- [x] Appropriate labels applied\r\n- [x] Appropriate contributors tagged\r\n- [x] Contributor assigned/self-assigned\r\n","number":9352,"repository":"cosmos/cosmos-sdk","title":"Update module spec towards service oriented architecture","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/9352"},"id":"PVTI_lADOAAN9684ABqEwzgBIhpc","labels":["T:Docs","spec","C:x/authz"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"Update module spec towards service oriented architecture"},{"content":{"body":"Following up from https://github.com/cosmos/cosmos-sdk/pull/7105#discussion_r505643003, as improvements to the core `x/authz` implementations it would be desirable to:\r\n* DONE ~support some method for pruning expired authorizations~\r\n* have a gas fee or some other financial mechanism to prevent lots of spurious authorizations from polluting state","number":8311,"repository":"cosmos/cosmos-sdk","title":"x/authz pruning and gas","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/8311"},"id":"PVTI_lADOAAN9684ABqEwzgBIhrg","labels":["C:x/authz"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/8595"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"x/authz pruning and gas"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Problem\r\n\r\nHistorically, validator info was obtained indirectly, via validators having a link to a keybase in their identity field, and then explorers & wallets going to keybase to find their profile picture and displaying that.\r\n\r\nThis was making a bet on keybase becoming big, which ended up not panning out. (Even at launch, IIRC, getting cosmos validator profile pictures ended up being a large load on keybase servers)\r\n\r\nNow explorers like mintscan maintain their own repository for storing profile pictures, that has no authentication to ensure it maps to what the on-chain validator wanted.\r\n\r\n## Proposal\r\n\r\nWe should make validator info field have an explicit field for `profile_picture`, which links to a png or jpg image of some max size, that explorers / wallets / etc. can all use in a unified manner. \r\n\r\nWe shouldn't be having images done indirectly via keybase imo, because the scale of cosmos >> the scale of keybase, and clearly this has failed at getting sufficient adoption.\r\n\r\n____\r\n\r\n#### For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":9988,"repository":"cosmos/cosmos-sdk","title":"x/Staking: make validator info have an explicit link to profile pictures","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/9988"},"id":"PVTI_lADOAAN9684ABqEwzgBI8KI","labels":["C:x/staking","T:feature-request"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"x/Staking: make validator info have an explicit link to profile pictures"},{"content":{"body":"In this repository, we heavily use the Go standard library's crypto/sha256. However there exists a Single Instruction Multiple Data (SIMD) package from our friends at Minio per https://github.com/minio/sha256-simd and it promises 8X speed ups when using AVX instructions. We should explore this.\n\nLet's explore if performance radically improves and then plumb it in.\n\nKindly cc-ing my colleague @elias-orijtech\n____\n\n#### For Admin Use\n\n- [ ] Not duplicate issue\n- [ ] Appropriate labels applied\n- [ ] Appropriate contributors tagged\n- [ ] Contributor assigned/self-assigned","number":700,"repository":"cosmos/iavl","title":"all: use SHA256 with SIMD instructions for higher performance and throughout","type":"Issue","url":"https://github.com/cosmos/iavl/issues/700"},"id":"PVTI_lADOAAN9684ABqEwzgBWN0w","labels":["T:performance"],"priority ":"Medium","repository":"https://github.com/cosmos/iavl","status":"üìã Backlog","title":"all: use SHA256 with SIMD instructions for higher performance and throughout"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nDocument how to change default genesis values\r\n\r\nhere are some good examples:\r\nhttps://github.com/umee-network/umee/blob/main/app/app.go#L134\r\nhttps://github.com/umee-network/umee/blob/main/app/app.go#L746\r\nhttps://github.com/umee-network/umee/blob/main/app/modules.go#L102-L115\r\n____\r\n\r\n#### For Admin Use\r\n\r\n- [x] Not duplicate issue\r\n- [x] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":11008,"repository":"cosmos/cosmos-sdk","title":"document how to change defaultGenesis","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/11008"},"id":"PVTI_lADOAAN9684ABqEwzgBZLCs","labels":["T:Docs"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"document how to change defaultGenesis"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nAuthz empowers Cosmos developers to build noncustodial solutions. However, the integration of Authz in Defi-like products today prevents protocol engineers from capturing fees and creating an elegant user experience for customers. Authz doesn't allow us to charge a performance fee for our service as authz dynamically can't read state nor does it store a type to charge the fee owned by a user that the delegator can claim. The solution we propose is to implement stateful checks inside an authz execution and incorporate a fee type that can store the fee amount that needs to be paid out after a specific duration. \r\n\r\n## Problem Definition\r\n\r\n<!-- Why do we need this feature? \r\n**What problems may be addressed by introducing this feature?**\r\nWith Authz there is no way to non-custodially capture a performance fee. Capturing a performance fee is needed for yield-based products. Here is an example, auto compounding staking rewards. The issue with authz is there is no way to claim a fee. For instance, Alice goes and noncustodial grants a protocol to auto compound the staking rewards on behalf of Alice for 6 months. Once those 6 months end, the protocol doesn‚Äôt have a way to capture a percentage of rewards it helped Alice accrue. Alice would need to interact with the protocol and send an additional tx to pay the service fee off. This is poor ux creates the risk the protocol won‚Äôt be paid. \r\n\r\n**What benefits does the SDK stand to gain by including this feature?**\r\nAuthz ability to capture a fee would open a new design space in protocol engineering in Web3. Today, the majority of yield generating applications require giving up custody of one's assets to generate that yield. It goes against the very ethos of noncustody. However, the inability to effectively capture a fee for the noncustodial work prevents protocols to provide a safer, noncustodial solution to their community. The addition of capturing a fee based on duration can allow applications to provide noncustodial services. \r\n\r\nAre there any disadvantages of including this feature? -->\r\nThe inclusion of a FeeAuthorization type may be complex and introduce security concerns unaware during implementation. However, this is a risk majority of new implications have and requires thorough testing and safeguards. \r\n\r\n## Proposal\r\n\r\nThe idea is to capture a fee or tax for the authx grant. \r\n\r\n```\r\ntype TaxedAuthorization struct {\r\n    Authorization\r\n    TaxAmount sdk.Coins\r\n}\r\n```\r\n\r\nAnd then, inside the Accept method, simply transfer the TaxAmount from the Authorization.Granter to the Authorization.Grantee. The solution would be to implement the statefull checks inside the authz execution, have that released into a new Cosmos SDK version. \r\n\r\nWe worked on this solution with @RiccardoM . Love to hear other input on how to best implement a fee capture mechanism in Authz. The introduction of this improvement will increase the adoption of this module. \r\n____\r\n\r\n#### For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":11583,"repository":"cosmos/cosmos-sdk","title":"Authz Fee Capture Request ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/11583"},"id":"PVTI_lADOAAN9684ABqEwzgBkoDE","labels":["S:proposed","C:x/authz"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"Authz Fee Capture Request "},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nSomething thats always confused me is why does `ImportGenesis` and `ExportGenesis` in every module take in a JSON interface.\r\n\r\nWe can definitely change `ExportGenesis` to return a `proto.Message` interface, that the SDK then serializes into a JSON? Seems odd from an API and complexity perspective that we have to serialize this in our module.go right now.\r\n\r\nSomething I'm less sure about: Can we change `ImportGenesis` to take in a `proto.Message`, and then ImportGenesis does a type cast? We likely still need the codec, to deal with unpacking proto any types.\r\n\r\nIs this an acceptable API break? (It could technically be done via versioned extension interfaces, and making modules one of the new or old init genesis methods) Theres not really a way to do this thats not an API break, so it may be annoying for folks.\r\n\r\n## Problem Definition\r\n\r\nJust an idea for reducing the JSON serialization code in each module, and getting serialization complexity handled at a higher layer of abstraction.\r\n\r\n## Proposal\r\n\r\nMake ImportGenesis take in a proto.Message instead of json.RawMessage, and ExportGenesis return a proto.Message\r\n\r\nRework module interfaces, to push this to an extension interface, and allow modules to implement this or the legacy one.\r\n\r\ncref #12295 - this would also allow that to occur, with no further complexity to the module writer\r\n____\r\n\r\n#### For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":12642,"repository":"cosmos/cosmos-sdk","title":"Can we change ImportGenesis & ExportGenesis to return a proto.Message interface","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/12642"},"id":"PVTI_lADOAAN9684ABqEwzgB1pnU","labels":["Type: Code Hygiene","T: Dev UX"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/12700","https://github.com/cosmos/cosmos-sdk/pull/12828"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"Can we change ImportGenesis & ExportGenesis to return a proto.Message interface"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nEvents have been used by many applications for internal state machine actions and external clients. There has been confusion on where events should be used and where they should not. Recently we saw Juno halt due to a misunderstanding of how events are emitted and thus incorrect reliance of nondeterministic ordering of events in the cosmos-sdk. While events are non deterministic it is unclear at which stage they are non-deterministic.\r\n\r\n## Problem Definition\r\n\r\nIt is unclear who events are for and what is the safest way to use them?\r\n\r\n## Work Breakdown\r\n\r\n### Things we can do today:\r\n\r\n- [ ] define events determinism and who are the primary consumers of events\r\n- [ ] Organise a break out call with ecosystem partners to discuss deeper about how events should act and how they should be treated.\r\n- [ ] populate msg responses of proto messages in order to use these with cosmwasm and potentially other applications \r\n- [ ] Fix non-determinism in any events\r\n\r\n### Related/Future Work:\r\n\r\n - [ ] Typed events [ADR](https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-032-typed-events.md)\r\n - [ ] [ADR-033](https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-033-protobuf-inter-module-comm.md)\r\n - [ ] further work can be discussed \r\n","number":13074,"repository":"cosmos/cosmos-sdk","title":"EPIC: Events ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/13074"},"id":"PVTI_lADOAAN9684ABqEwzgCSegU","labels":["T:Epic"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"‚≠êÔ∏è User story","title":"EPIC: Events "},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nAs mentioned in https://github.com/CosmWasm/wasmd/issues/941 non-determinism in maps is a concern for users of cosmwasm and others. There are places the Cosmos-SDK uses maps in many places we should aim to replace this with a deterministic sort with maps or something like a btree. \r\n\r\n## Problem Definition\r\n\r\nMaps are non-deterministic if handled incorrectly. Cosmos-sdk has a few places where maps could end in non-determinism \r\n\r\n## Proposal\r\n\r\nReplace maps with a deterministic ordering data structure or sort for maps where needed. \r\n\r\ncc @ValarDragon @ethanfrey \r\n","number":13039,"repository":"cosmos/cosmos-sdk","title":"EPIC: determinism with maps","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/13039"},"id":"PVTI_lADOAAN9684ABqEwzgCSehg","labels":["T:Epic"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"üëë Epic","title":"EPIC: determinism with maps"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nCurrently when looking at a stack trace or error in the state machine, it is fairly difficult to identify where the error came from and/or in which stage of tx execution the error occurred. \r\n\r\n## Problem Definition\r\n\r\nErrors and their origination are not easily legible. \r\n\r\n## Proposal\r\n\r\nIsolate errors in a way that I easy to debug and identify at which stage of the process a tx or the state machine is at. \r\n\r\n\r\nWould love to hear from @zmanian, @ValarDragon and others on needs for what they would like to see\r\n\r\n\r\n\r\n","number":12985,"repository":"cosmos/cosmos-sdk","title":"EPIC: Isolated Errors","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/12985"},"id":"PVTI_lADOAAN9684ABqEwzgCSeiU","labels":["T:Epic","T: Design Needed"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"‚≠êÔ∏è User story","title":"EPIC: Isolated Errors"},{"assignees":["JulianToledano","tac0turtle"],"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nCurrently bech32 prefixes is a global in the cosmos-sdk and for applications as well. We should aim to remove most if not all globals within the sdk. \r\n\r\n## Problem Definition\r\n\r\nGlobals should be removed. \r\n\r\n## Work Breakdown\r\n\r\n- [x] replace account bech32 calls with calls into address codec for the prefix(s)\r\n- [x] replace validator key bech32 calls\r\n- [ ] remove sdk.bech32 from types and outside modules\r\n- [x] Remove address verifier from global config, put it as argument to NewAccountKeeper\r\n- [x] https://github.com/cosmos/cosmos-sdk/issues/11275\r\n- [x] Add a way for clients to get the bech32 prefix\r\n- [ ] Go through every module and remove calls to .String() (this may require state migrations)\r\n  - [ ] auth\r\n  - [x] authz\r\n  - [x] bank\r\n  - [x] feegrant\r\n  - [x] gov\r\n  - [x] groups\r\n  - [x] nft\r\n  - [x] distribution\r\n  - [x] staking\r\n  - [x] slashing\r\n  - [x] upgrade\r\n- [ ] Deprecate all .String calls on addresses\r\n- [ ] remove the need to set global codecs\r\n\r\n## Notes: \r\n-  do not call address.String() (https://github.com/cosmos/cosmos-sdk/issues/8332)\r\n\r\nIs there any other work we should mention here? \r\n\r\n\r\nref https://github.com/cosmos/cosmos-sdk/issues/8332\r\n","number":13140,"repository":"cosmos/cosmos-sdk","title":"EPIC: remove global bech32","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/13140"},"id":"PVTI_lADOAAN9684ABqEwzgCVBXY","labels":["T: Dev UX","T: Client UX","T:Epic"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/18175"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"EPIC: remove global bech32"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Please also ensure that this is not a duplicate issue :)  \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n<!--\r\nIMPORTANT: Prior to opening a bug report, check if it affects one of the core modules\r\nand if its elegible for a bug bounty on `SECURITY.md`. Bugs that are not submitted\r\nthrough the appropriate channels won't receive any bounty.\r\n -->\r\n\r\n## Summary of Bug\r\n\r\nref: https://github.com/cosmos/cosmos-sdk/pull/10701#discussion_r880414337\r\n\r\nOnly allow valid denoms in bank's denom Metadata.\r\n\r\nThe denom regex we use is\r\n\r\nhttps://github.com/cosmos/cosmos-sdk/blob/23baecf220045242d6ea779c5a3a77edde6e418a/types/coin.go#L856\r\n\r\nBut it seems to me we don't do a regex check when writing the metadata to state.\r\n\r\n## Version\r\n\r\nv0.46.0-rc1\r\n\r\n## Steps to Reproduce\r\n\r\nCurrently, the denom metadata is set in InitGenesis, by reading a genesis JSON file. This json file can contain denom strings that don't adhere to the regex above. But they are still written to state:\r\n\r\nhttps://github.com/cosmos/cosmos-sdk/blob/55054282d2df794d9a5fe2599ea25473379ebc3d/x/bank/keeper/keeper.go#L305-L312\r\n\r\n## Proposed fix\r\n\r\nA validate basic function on Metadata to verify that all denoms match the regex.\r\n\r\n<!-- What commands in order should someone run to reproduce your problem? -->\r\n\r\n____\r\n\r\n## For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":12026,"repository":"cosmos/cosmos-sdk","title":"Only allow valid denoms in bank's denom Metadata","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/12026"},"id":"PVTI_lADOAAN9684ABqEwzgCWVF0","labels":["S:proposed","T: State Machine Breaking","C:x/bank"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/13247"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Only allow valid denoms in bank's denom Metadata"},{"content":{"body":"For a given delegator, currently redelegations will _always_ fail if the source-validator of the redelegation has _any_ unmature redelegations to where _it_ is the destination-validator (i.e. the tokens could be considered \"hopping\" across many validators).\r\n\r\nUnfortunately, if there is even a single token in this process, it will prevent any new redelegations from occurring.\r\n\r\nI reckon that there is a way that we can track the amount of redelegations tied up, so even if the original condition is true, it may be that there are enough tokens within the source validator that the redelegation would not be transitive. ","number":3288,"repository":"cosmos/cosmos-sdk","title":"Transitive redelegation is over-inhibiting ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/3288"},"id":"PVTI_lADOAAN9684ABqEwzgCzFSA","labels":["C:x/staking","T: State Machine Breaking"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/13451"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Transitive redelegation is over-inhibiting "},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nThe sdk added many metrics on things users wanted, I believe there is a much larger story to be had with metrics that we need to explore. The long term goal for the sdk team is to be able to host nodes on a few chains in order to gather metrics for when we have minor releases. When we have major releases we should spin up a new chain that tests specific metrics we would like. \r\n\r\n## Problem Definition\r\n\r\nMetrics don't influence sdk development enough today. The core sdk team needs more insights into what is going on in the real world in order to be able to know they are headed in the right direction for various things in the repo. \r\n\r\n## Work Breakdown\r\n\r\n### Phase 1\r\n\r\n- [ ] Create a grafana dashboard with the current metrics that we can host and use to watch various things of the cosmos-sdk. \r\n- [ ] Discuss which metrics we would like to better track as a team. \r\n\r\n\r\n@thanethomson would you like to collaborate on a dashboard we can share for Tendermint and Cosmos-SDK?\r\n\r\n@crodriguezvega would you like to collaborate on this as well for metrics from the ibc modules? \r\n\r\n\r\n> Note: the work breakdown is not complete and this issue may be a longer lived epic in order for us to cover everything we will want. \r\n","number":13566,"repository":"cosmos/cosmos-sdk","title":"Epic: Metrics ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/13566"},"id":"PVTI_lADOAAN9684ABqEwzgC-C7s","labels":["C: telemetry","T:Epic"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"‚≠êÔ∏è User story","title":"Epic: Metrics "},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nThis Epic is slated for tendermint 0.38. \r\n\r\nOne new feature of tendermint 0.38 is being able to add things into the consensus vote. This is an amazing feature for upgrading software. In the future chains will be able to migrate versions of modules once 2/3+ have upgraded to the new binary. Currently when the network hits 2/3+ it is unknown in the state machine this has happened. \r\n\r\n## Problem Definition\r\n\r\nState machine is unaware of network version state. If the state machine is aware when network participants (validators) have upgraded to a new version of the software then upgrades become seamless and allow the outside world to know when a chain is upgraded. \r\n\r\n## Work Breakdown\r\n\r\nThis part is unknown at this time. This is meant as a place holder for when the work of integrating 0.38 begins \r\n","number":13565,"repository":"cosmos/cosmos-sdk","title":"EPIC: Consensus on software version","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/13565"},"id":"PVTI_lADOAAN9684ABqEwzgC-C9s","labels":["C: comet","C:x/upgrade","T:Epic","T: Design Needed"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","story Type":"‚≠êÔ∏è User story","title":"EPIC: Consensus on software version"},{"assignees":["aaronc","kocubinski","tac0turtle"],"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nThis PR aims to do 2 things:\r\n- verify that all `Msg` services have the `cosmos.msg.service=true` annotation.\r\n- verify that all `Msg*` messages have the `cosmos.msg.signer=...` annotation.\r\n\r\nIf it's not the case, then it prints a warning to StdErr at startup.\r\n\r\nIt also fixes a couple of wrong proto annotations it caught üí™ \r\n\r\nCloses: #13405 \r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n- [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] added `!` to the type prefix if API or client breaking change\r\n- [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n- [ ] provided a link to the relevant issue or specification\r\n- [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/building-modules)\r\n- [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n- [ ] added a changelog entry to `CHANGELOG.md`\r\n- [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n- [ ] updated the relevant documentation or specification\r\n- [ ] reviewed \"Files changed\" and left comments if necessary\r\n- [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n- [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] confirmed `!` in the type prefix if API or client breaking change\r\n- [ ] confirmed all author checklist items have been addressed \r\n- [ ] reviewed state machine logic\r\n- [ ] reviewed API design and naming\r\n- [ ] reviewed documentation is accurate\r\n- [ ] reviewed tests and test coverage\r\n- [ ] manually tested (if applicable)\r\n","number":13793,"repository":"cosmos/cosmos-sdk","title":"feat: Validate Msg proto annotations","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/13793"},"id":"PVTI_lADOAAN9684ABqEwzgDUvfs","labels":["C:x/group","C:x/consensus","C:x/tx"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev","JeancarloBarrios","samricotta"],"title":"feat: Validate Msg proto annotations"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Please also ensure that this is not a duplicate issue :)  \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n<!--\r\nIMPORTANT: Prior to opening a bug report, check if it affects one of the core modules\r\nand if its elegible for a bug bounty on `SECURITY.md`. Bugs that are not submitted\r\nthrough the appropriate channels won't receive any bounty.\r\n -->\r\n\r\n## Summary of Bug\r\n\r\nWhile gas is charged for the each item we iterate through, iterating over one item is significantly cheaper than reading that one item. This is clearly a misconfiguration and should be updated.\r\n\r\n<!-- Concisely describe the issue -->\r\n\r\n## Version\r\n\r\n<!-- git commit hash or release version -->\r\n\r\n0.45.11 and main\r\n\r\n## Steps to Reproduce\r\n\r\n<!-- What commands in order should someone run to reproduce your problem? -->\r\n\r\nLook at the [KVGasConfig](https://github.com/cosmos/cosmos-sdk/blob/main/store/types/gas.go#L239).\r\n\r\nWe charge `30 + 3 * (len(k) + len(v))` for each call to `Next()`,\r\nyet `1000 + 3 * (len(k) + len(v))` for each call to `Get()`.\r\n\r\nThis is state machine breaking to change, but please adjust this before the 0.47 final. \r\n\r\nThank you to @dakom for spotting this and pointing it out.","number":13961,"repository":"cosmos/cosmos-sdk","title":"Incorrect gas charged for iteration","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/13961"},"id":"PVTI_lADOAAN9684ABqEwzgDi4pY","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/15037"],"priority ":"Low","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Incorrect gas charged for iteration"},{"assignees":["julienrbrt","samricotta","atheeshp"],"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\ncloses: #14492 \r\nref: #12332  #14145 \r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n- [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] added `!` to the type prefix if API or client breaking change\r\n- [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n- [ ] provided a link to the relevant issue or specification\r\n- [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n- [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n- [ ] added a changelog entry to `CHANGELOG.md`\r\n- [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n- [ ] updated the relevant documentation or specification\r\n- [ ] reviewed \"Files changed\" and left comments if necessary\r\n- [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n- [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] confirmed `!` in the type prefix if API or client breaking change\r\n- [ ] confirmed all author checklist items have been addressed \r\n- [ ] reviewed state machine logic\r\n- [ ] reviewed API design and naming\r\n- [ ] reviewed documentation is accurate\r\n- [ ] reviewed tests and test coverage\r\n- [ ] manually tested (if applicable)\r\n","number":14479,"repository":"cosmos/cosmos-sdk","title":"chore: Replace testify with gotest.tools in genutil integration tests","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/14479"},"id":"PVTI_lADOAAN9684ABqEwzgEJFB4","labels":["C:CLI","C:x/group"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["alexanderbez","julienrbrt","sdk-core-dev"],"title":"chore: Replace testify with gotest.tools in genutil integration tests"},{"assignees":["kocubinski","samricotta","testinginprod"],"content":{"body":"## Description\r\n\r\nadd circuit breaker module \r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n- [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] added `!` to the type prefix if API or client breaking change\r\n- [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n- [ ] provided a link to the relevant issue or specification\r\n- [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n- [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n- [ ] added a changelog entry to `CHANGELOG.md`\r\n- [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n- [ ] updated the relevant documentation or specification\r\n- [ ] reviewed \"Files changed\" and left comments if necessary\r\n- [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n- [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] confirmed `!` in the type prefix if API or client breaking change\r\n- [ ] confirmed all author checklist items have been addressed \r\n- [ ] reviewed state machine logic\r\n- [ ] reviewed API design and naming\r\n- [ ] reviewed documentation is accurate\r\n- [ ] reviewed tests and test coverage\r\n- [ ] manually tested (if applicable)\r\n","number":14521,"repository":"cosmos/cosmos-sdk","title":"feat: module circuit breaker ","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/14521"},"id":"PVTI_lADOAAN9684ABqEwzgEQmEs","labels":["C:CLI","C:x/auth","C:Rosetta","C:x/circuit"],"priority ":"High","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev","aaronc","amaury1093","alexanderbez","julienrbrt","facundomedica","julienrbrt"],"title":"feat: module circuit breaker "},{"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nThis ADR outlines the design of ABCI++ (2.0), which include `VoteExtensions` and `FinalizeBlock`, in the Cosmos SDK.\r\n\r\nRef: #12272\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n- [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] added `!` to the type prefix if API or client breaking change\r\n- [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n- [ ] provided a link to the relevant issue or specification\r\n- [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n- [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n- [ ] added a changelog entry to `CHANGELOG.md`\r\n- [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n- [ ] updated the relevant documentation or specification\r\n- [ ] reviewed \"Files changed\" and left comments if necessary\r\n- [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n- [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] confirmed `!` in the type prefix if API or client breaking change\r\n- [ ] confirmed all author checklist items have been addressed \r\n- [ ] reviewed state machine logic\r\n- [ ] reviewed API design and naming\r\n- [ ] reviewed documentation is accurate\r\n- [ ] reviewed tests and test coverage\r\n- [ ] manually tested (if applicable)\r\n","number":14657,"repository":"cosmos/cosmos-sdk","title":"docs: ADR-064 ABCI++ (2.0)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/14657"},"id":"PVTI_lADOAAN9684ABqEwzgEXL3w","labels":["T:Docs","C:ABCI","T: ADR","Type: ADR"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev","facundomedica","likhita-809"],"title":"docs: ADR-064 ABCI++ (2.0)"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nCreate a buf registry for each extracted module and move the proto module protos to their own folder.\r\n\r\n## Problem Definition\r\n\r\nCurrently, the modules' proto definition is located under https://github.com/cosmos/cosmos-sdk/tree/main/proto/cosmos.\r\nFrom our DEV UX interview, this is not intuitive and does not align with the goal of a creating go module for SDK modules (https://github.com/cosmos/cosmos-sdk/issues/11899).\r\n\r\n## Proposal\r\n\r\n\r\n~We must ensure that pushing to the buf registry (https://buf.build/cosmos/cosmos-sdk) gives the same content.\r\nVerify, if is better to have each of the modules have their own buf repo.~\r\n\r\n- Move each proto definition to their own folder: E.g. `proto/cosmos/auth` -> `x/auth/proto`.\r\n- Create buf registry for each extracted module\r\n- Update extraction module documentation\r\n- Update UPGRADING.md of what to add in the buf.yaml of consumers (as buf.build/cosmos/cosmos-sdk won't contain the extracted modules).\r\n","number":13363,"repository":"cosmos/cosmos-sdk","title":"EPIC: Create buf registry for each extracted module","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/13363"},"id":"PVTI_lADOAAN9684ABqEwzgFC3Ug","labels":["T: Dev UX"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/13382"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"EPIC: Create buf registry for each extracted module"},{"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nCloses: #XXXX\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n- [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] added `!` to the type prefix if API or client breaking change\r\n- [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n- [ ] provided a link to the relevant issue or specification\r\n- [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n- [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n- [ ] added a changelog entry to `CHANGELOG.md`\r\n- [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n- [ ] updated the relevant documentation or specification\r\n- [ ] reviewed \"Files changed\" and left comments if necessary\r\n- [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n- [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] confirmed `!` in the type prefix if API or client breaking change\r\n- [ ] confirmed all author checklist items have been addressed \r\n- [ ] reviewed state machine logic\r\n- [ ] reviewed API design and naming\r\n- [ ] reviewed documentation is accurate\r\n- [ ] reviewed tests and test coverage\r\n- [ ] manually tested (if applicable)\r\n","number":14820,"repository":"cosmos/cosmos-sdk","title":"docs(collections): add documentation","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/14820"},"id":"PVTI_lADOAAN9684ABqEwzgEi628","labels":["C:collections"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev","kocubinski","likhita-809","samricotta"],"title":"docs(collections): add documentation"},{"assignees":["alexanderbez"],"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nCloses: #13086\r\n\r\nThis PR demonstrates how to filter out \"dust\" delegations from relevant staking delegation queries. The one drawback to this is that the pagination is not setup to take \"filtering\" into account. So what that means is, say if you ask for 100 records, 10 of which are filtered, you might get 90 valid one instead of 100 valid ones.\r\n\r\nThere's unfortunately no way around this unless we refactor `Paginate` to have the `onResult`  return an additional `skip bool` value.\r\n\r\nI'd be happy to refactor `Paginate` by defining a new `FilteredPaginate` so that we don't break any APIs.\r\n\r\ncc @tac0turtle \r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n- [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] added `!` to the type prefix if API or client breaking change\r\n- [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n- [ ] provided a link to the relevant issue or specification\r\n- [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n- [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n- [ ] added a changelog entry to `CHANGELOG.md`\r\n- [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n- [ ] updated the relevant documentation or specification\r\n- [ ] reviewed \"Files changed\" and left comments if necessary\r\n- [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n- [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] confirmed `!` in the type prefix if API or client breaking change\r\n- [ ] confirmed all author checklist items have been addressed \r\n- [ ] reviewed state machine logic\r\n- [ ] reviewed API design and naming\r\n- [ ] reviewed documentation is accurate\r\n- [ ] reviewed tests and test coverage\r\n- [ ] manually tested (if applicable)\r\n","number":14930,"repository":"cosmos/cosmos-sdk","title":"feat: support filtering dust delegations in queries","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/14930"},"id":"PVTI_lADOAAN9684ABqEwzgEugYY","labels":["C:x/staking","Stale"],"repository":"https://github.com/cosmos/cosmos-sdk","title":"feat: support filtering dust delegations in queries"},{"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nRef #11774\r\nThis follows up on #13438 and actually implements the query servers as well as making the following changes:\r\n- queries are renamed to follow the patterns more commonly encountered in SDK queries and CLI commands, ex. `Balance` and `Balances` instead of `GetBalance` and `ListBalance`. This should play more nicely with autocli\r\n- there is a separate list method per index which matches how query servers are structured now (ex. `Groups`, and `GroupsByMember` are separate query methods)\r\n- range queries are removed (for now) - I haven't found any instances of range queries in our gRPC query servers or CLI commands, so I consider this advanced usage. We should support it but it can be dealt with later and maybe generically through the API in #11791\r\n- gRPC gateway REST annotations have been added - these follow the convention of using plurals (ex. `users/{id}`). Indexed are separated using a `.` which I'm not sure about but seems like the best generic solution so far (ex. `balances.by-denom?denom=foo`)\r\n\r\n**The most important files for reviewers to look at are bank_query.proto and test_schema_query.proto**\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n- [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] added `!` to the type prefix if API or client breaking change\r\n- [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n- [ ] provided a link to the relevant issue or specification\r\n- [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n- [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n- [ ] added a changelog entry to `CHANGELOG.md`\r\n- [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n- [ ] updated the relevant documentation or specification\r\n- [ ] reviewed \"Files changed\" and left comments if necessary\r\n- [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n- [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] confirmed `!` in the type prefix if API or client breaking change\r\n- [ ] confirmed all author checklist items have been addressed \r\n- [ ] reviewed state machine logic\r\n- [ ] reviewed API design and naming\r\n- [ ] reviewed documentation is accurate\r\n- [ ] reviewed tests and test coverage\r\n- [ ] manually tested (if applicable)\r\n","number":14965,"repository":"cosmos/cosmos-sdk","title":"feat(orm)!: implement gRPC query support","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/14965"},"id":"PVTI_lADOAAN9684ABqEwzgExvfg","labels":["C:orm","Stale"],"repository":"https://github.com/cosmos/cosmos-sdk","title":"feat(orm)!: implement gRPC query support"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nThis details a proposal for how to make a CacheKV store v2.\r\n\r\nRight now it is hard to iterate on the CacheKV store. It mixes a lot of roles into the same data structure, is rather complex, and under-specified. This has led to large numbers of performance and liveness critical bugs, that would be vastly simplified with a redesign.\r\n\r\nI claim that the way to best simplify this is to do an API compatible rewrite, that simplifies the roles of the differing components, and then drop-in replace this.\r\n\r\nThe cache KV store has two roles, each of which has roadmaps for improvement, and potential for tighter integration with gas counting. These are:\r\n- ReadBuffers\r\n- WriteBuffers\r\n\r\nThe proposal is to make a directory structure as follows:\r\n```\r\nstore/cachekv2\r\nstore/cachekv2/readbuffer\r\nstore/cachekv2/writebuffer\r\n```\r\n\r\nBasically, separate packages, for ReadBuffer and WriteBuffers that allow us to flexibly iterate going forward, and making a for now \"merged CacheKV store API\" that has the exact API guarantees (aside from bug/perf improvements) as the existing one, so theres no break to users. As time goes on, this merged CacheKV store API gets less used. \r\n\r\nThe short-term roadmap proposed:\r\n\r\n- Make a store/cachekv2 with identical external API guarantees as the existing CacheKV\r\n  - The semantic will always be, for reads and iterates, \"attempt iterating over write buffer. If not in write buffer, go to read buffer\"\r\n- Create a ReadBuffer and WriteBuffer interface\r\n- Make the first objects behind the interface, the equivalent object in CacheKV 1\r\n  - ReadBuffer only has data thats in parent, it has no \"dirty\" data.\r\n- Swap cachekv usage with cachekv2\r\n\r\n\r\nThen internal API roadmaps, that can far more simply progress after a basic split:\r\n\r\n- Amend the ReadBuffer to have an interval tree, so it can know during repeated iterations, whether the iteration is already cached. (Today we always hit IAVL on repeat iterations)\r\n  - Ensure single threaded concurrency safety\r\n- Make a new API for Gets, that is also aware of whether the data was in cache or not. Cache gets should be much cheaper than uncached ones.\r\n  - This will be short-term unused, but will get used when we are willing to do a larger API break with the gas store \r\n- Make write buffer single threaded concurrency safe. (As far as I'm aware, a fix for this was merged into SDK, so maybe we just re-use that)\r\n- Consider lifting concurrency safety to multi-threaded safety\r\n- Make Cachewrap only layer a write buffer on top\r\n- Add RAM bounds to ReadBuffer\r\n- Create safer iter_mut API's\r\n\r\nWhats nice about having these split out, is we can also make these re-usable components, as we explore more distinct concurrency designs. Furthermore, we should be expecting different read buffer and write buffer designs to emerge. A lot of performance suffering is had to support iteration, when really there could be flexibility in only making things that need iteration pay that cost.\r\n\r\nIf folks like this direction, I can get started on it.","number":14990,"repository":"cosmos/cosmos-sdk","title":"Proposal for a CacheKV v2 store","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/14990"},"id":"PVTI_lADOAAN9684ABqEwzgE0FwU","labels":["C:Store"],"priority ":"Low","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"Proposal for a CacheKV v2 store"},{"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nCloses: #13961 \r\nref: https://github.com/cosmos/cosmos-sdk/issues/13961#issuecomment-1325635509\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n- [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] added `!` to the type prefix if API or client breaking change\r\n- [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n- [ ] provided a link to the relevant issue or specification\r\n- [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n- [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n- [ ] added a changelog entry to `CHANGELOG.md`\r\n- [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n- [ ] updated the relevant documentation or specification\r\n- [ ] reviewed \"Files changed\" and left comments if necessary\r\n- [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n- [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] confirmed `!` in the type prefix if API or client breaking change\r\n- [ ] confirmed all author checklist items have been addressed \r\n- [ ] reviewed state machine logic\r\n- [ ] reviewed API design and naming\r\n- [ ] reviewed documentation is accurate\r\n- [ ] reviewed tests and test coverage\r\n- [ ] manually tested (if applicable)\r\n","number":15037,"repository":"cosmos/cosmos-sdk","title":"fix: Incorrect gas charged for iteration","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15037"},"id":"PVTI_lADOAAN9684ABqEwzgE5OiI","labels":["C:Store"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["alexanderbez","amaury1093","tac0turtle"],"title":"fix: Incorrect gas charged for iteration"},{"assignees":["amaury1093","testinginprod"],"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nCloses: #11980\r\n\r\nThis changes the encoding of durations in the ORM to the one proposed in #11980.\r\n\r\nIt also fixes a bug with the timestamp encoding where the min and max seconds values were calculated incorrectly (by me). I found this by adding tests for the min and max cases for both timestamps and durations. It would be good to have a second pair of eyes look closely at both of these encodings - especially the hard coded min/max values to make sure they're correct.\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n- [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] added `!` to the type prefix if API or client breaking change\r\n- [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n- [ ] provided a link to the relevant issue or specification\r\n- [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n- [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n- [ ] added a changelog entry to `CHANGELOG.md`\r\n- [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n- [ ] updated the relevant documentation or specification\r\n- [ ] reviewed \"Files changed\" and left comments if necessary\r\n- [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n- [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] confirmed `!` in the type prefix if API or client breaking change\r\n- [ ] confirmed all author checklist items have been addressed \r\n- [ ] reviewed state machine logic\r\n- [ ] reviewed API design and naming\r\n- [ ] reviewed documentation is accurate\r\n- [ ] reviewed tests and test coverage\r\n- [ ] manually tested (if applicable)\r\n","number":15138,"repository":"cosmos/cosmos-sdk","title":"fix(orm)!: duration encoding doesn't handle nil values properly","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15138"},"id":"PVTI_lADOAAN9684ABqEwzgFEqic","labels":["C:orm"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev","amaury1093","testinginprod","ryanchristo"],"title":"fix(orm)!: duration encoding doesn't handle nil values properly"},{"assignees":["alexanderbez","facundomedica","tac0turtle","julienrbrt"],"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nref: #5231\r\nUpstream from: https://github.com/iqlusioninc/cosmos-sdk/pull/2\r\nincluded changes from: #9016\r\n\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n- [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] added `!` to the type prefix if API or client breaking change\r\n- [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n- [ ] provided a link to the relevant issue or specification\r\n- [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n- [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n- [ ] added a changelog entry to `CHANGELOG.md`\r\n- [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n- [ ] updated the relevant documentation or specification\r\n- [ ] reviewed \"Files changed\" and left comments if necessary\r\n- [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n- [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] confirmed `!` in the type prefix if API or client breaking change\r\n- [ ] confirmed all author checklist items have been addressed \r\n- [ ] reviewed state machine logic\r\n- [ ] reviewed API design and naming\r\n- [ ] reviewed documentation is accurate\r\n- [ ] reviewed tests and test coverage\r\n- [ ] manually tested (if applicable)\r\n","number":15165,"repository":"cosmos/cosmos-sdk","title":"feat: consensus key rotation of validator","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15165"},"id":"PVTI_lADOAAN9684ABqEwzgFIKHM","labels":["C:x/staking","C:CLI","C:x/slashing","C:x/distribution","C:Simulations","C:x/auth","C:x/evidence","Type: ADR"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev","aaronc","julienrbrt","tac0turtle","alexanderbez","tac0turtle"],"status":"ü•≥ Done","title":"feat: consensus key rotation of validator"},{"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nDuring a SIGN_MODE_TEXTUAL sync w/ @webmaster128 and @facundomedica, we discussed how to coordinate with client-side signing if we ever make updates to the ADR-050 spec.\r\n\r\nWe came up with a proposal to use a simple incremented integer to denote the spec version.\r\n\r\ncloses: #15291 \r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n- [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] added `!` to the type prefix if API or client breaking change\r\n- [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n- [ ] provided a link to the relevant issue or specification\r\n- [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n- [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n- [ ] added a changelog entry to `CHANGELOG.md`\r\n- [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n- [ ] updated the relevant documentation or specification\r\n- [ ] reviewed \"Files changed\" and left comments if necessary\r\n- [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n- [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] confirmed `!` in the type prefix if API or client breaking change\r\n- [ ] confirmed all author checklist items have been addressed \r\n- [ ] reviewed state machine logic\r\n- [ ] reviewed API design and naming\r\n- [ ] reviewed documentation is accurate\r\n- [ ] reviewed tests and test coverage\r\n- [ ] manually tested (if applicable)\r\n","number":15270,"repository":"cosmos/cosmos-sdk","title":"docs(adr): Add Textual SpecVersion","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15270"},"id":"PVTI_lADOAAN9684ABqEwzgFSMCA","labels":["Type: ADR","C:x/tx"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev","aaronc","julienrbrt","webmaster128","facundomedica","JimLarson"],"title":"docs(adr): Add Textual SpecVersion"},{"content":{"body":"## Summary\r\n\r\nrefactor Cosmos SDK‚Äôs public API to use more new type wrappers / domain types that would enforce each function‚Äôs expected invariants\r\n\r\n## Problem Definition\r\n\r\nThe purpose would be to consolidate data validation and possible panic sources (that could halt chains if they happen in begin/end blockers) in one place.\r\nRight now, many SDK functions use raw types like `string` or `sdk.Int` which leads to duplicate defensive checking of expected invariants (is that string a valid module address, does that module have a permission, is that int a positive amount, ‚Ä¶) and possible omissions of checking them‚Ä¶\r\n\r\n## Work Breakdown\r\n\r\nperhaps do it module by module?\r\n","number":15292,"repository":"cosmos/cosmos-sdk","title":"refactor public API to use more new type wrappers / domain types","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/15292"},"id":"PVTI_lADOAAN9684ABqEwzgFTSQM","labels":["S:proposed","T: Dev UX"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"refactor public API to use more new type wrappers / domain types"},{"assignees":["facundomedica"],"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nCloses: #14647 \r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n- [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] added `!` to the type prefix if API or client breaking change\r\n- [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n- [ ] provided a link to the relevant issue or specification\r\n- [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n- [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n- [ ] added a changelog entry to `CHANGELOG.md`\r\n- [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n- [ ] updated the relevant documentation or specification\r\n- [ ] reviewed \"Files changed\" and left comments if necessary\r\n- [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n- [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] confirmed `!` in the type prefix if API or client breaking change\r\n- [ ] confirmed all author checklist items have been addressed \r\n- [ ] reviewed state machine logic\r\n- [ ] reviewed API design and naming\r\n- [ ] reviewed documentation is accurate\r\n- [ ] reviewed tests and test coverage\r\n- [ ] manually tested (if applicable)\r\n","number":15302,"repository":"cosmos/cosmos-sdk","title":"feat(x/tx): Support gogo registry in Textual","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15302"},"id":"PVTI_lADOAAN9684ABqEwzgFVRns","labels":["C:x/auth","C:x/tx"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev","aaronc","julienrbrt","JimLarson"],"title":"feat(x/tx): Support gogo registry in Textual"},{"assignees":["aaronc","kocubinski"],"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nCloses: https://github.com/cosmos/cosmos-sdk/issues/15295\r\n\r\nVery much work in progress due to tests and migration. The rest should be ok.\r\nThe most important file is `state.proto`.\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n- [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] added `!` to the type prefix if API or client breaking change\r\n- [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n- [ ] provided a link to the relevant issue or specification\r\n- [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n- [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n- [ ] added a changelog entry to `CHANGELOG.md`\r\n- [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n- [ ] updated the relevant documentation or specification\r\n- [ ] reviewed \"Files changed\" and left comments if necessary\r\n- [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n- [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] confirmed `!` in the type prefix if API or client breaking change\r\n- [ ] confirmed all author checklist items have been addressed \r\n- [ ] reviewed state machine logic\r\n- [ ] reviewed API design and naming\r\n- [ ] reviewed documentation is accurate\r\n- [ ] reviewed tests and test coverage\r\n- [ ] manually tested (if applicable)\r\n","number":15304,"repository":"cosmos/cosmos-sdk","title":"feat!: migrate group to sdk orm","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15304"},"id":"PVTI_lADOAAN9684ABqEwzgFVhYo","labels":["C:CLI","C:Simulations","C:x/auth","C:x/evidence","C:x/upgrade","C:x/feegrant","C:x/genutil","C:x/group","C:x/nft","C:Confix"],"repository":"https://github.com/cosmos/cosmos-sdk","title":"feat!: migrate group to sdk orm"},{"assignees":["facundomedica","tac0turtle","likhita-809"],"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nCloses: #15315 \r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n- [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] added `!` to the type prefix if API or client breaking change\r\n- [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n- [ ] provided a link to the relevant issue or specification\r\n- [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n- [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n- [ ] added a changelog entry to `CHANGELOG.md`\r\n- [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n- [ ] updated the relevant documentation or specification\r\n- [ ] reviewed \"Files changed\" and left comments if necessary\r\n- [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n- [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] confirmed `!` in the type prefix if API or client breaking change\r\n- [ ] confirmed all author checklist items have been addressed \r\n- [ ] reviewed state machine logic\r\n- [ ] reviewed API design and naming\r\n- [ ] reviewed documentation is accurate\r\n- [ ] reviewed tests and test coverage\r\n- [ ] manually tested (if applicable)\r\n","number":15327,"repository":"cosmos/cosmos-sdk","title":"refactor(bank): move bank balances to use collections","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15327"},"id":"PVTI_lADOAAN9684ABqEwzgFXEN4","labels":["C:CLI","C:x/bank","C:x/circuit"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev","tac0turtle","atheeshp"],"title":"refactor(bank): move bank balances to use collections"},{"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nref: #13140 \r\n\r\nremoves bech32 global from bank module \r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n- [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] added `!` to the type prefix if API or client breaking change\r\n- [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n- [ ] provided a link to the relevant issue or specification\r\n- [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n- [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n- [ ] added a changelog entry to `CHANGELOG.md`\r\n- [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n- [ ] updated the relevant documentation or specification\r\n- [ ] reviewed \"Files changed\" and left comments if necessary\r\n- [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n- [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n- [ ] confirmed `!` in the type prefix if API or client breaking change\r\n- [ ] confirmed all author checklist items have been addressed \r\n- [ ] reviewed state machine logic\r\n- [ ] reviewed API design and naming\r\n- [ ] reviewed documentation is accurate\r\n- [ ] reviewed tests and test coverage\r\n- [ ] manually tested (if applicable)\r\n","number":15343,"repository":"cosmos/cosmos-sdk","title":"refactor: removing bech32 global from bank module","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15343"},"id":"PVTI_lADOAAN9684ABqEwzgFYhsA","labels":["C:x/bank"],"repository":"https://github.com/cosmos/cosmos-sdk","title":"refactor: removing bech32 global from bank module"},{"content":{"body":"This is an automatic backport of pull request #15447 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":15460,"repository":"cosmos/cosmos-sdk","title":"fix: flaky group genesis sim (backport #15447)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15460"},"id":"PVTI_lADOAAN9684ABqEwzgFkrog","labels":["C:Simulations","C:x/group"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix: flaky group genesis sim (backport #15447)"},{"content":{"body":"This is an automatic backport of pull request #15316 done by [Mergify](https://mergify.com).\nCherry-pick of fafe04bef503201f82e2bd56845508cad89dd049 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-15316\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit fafe04bef.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   x/genutil/collect.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":15466,"repository":"cosmos/cosmos-sdk","title":"chore: remove requirement on user ips (backport #15316)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15466"},"id":"PVTI_lADOAAN9684ABqEwzgFlDhg","labels":["A:automerge","C:x/genutil"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"chore: remove requirement on user ips (backport #15316)"},{"content":{"body":"This is an automatic backport of pull request #15147 done by [Mergify](https://mergify.com).\nCherry-pick of b53be683b65a02080651bb9dbf46a0fb3ab93452 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-15147\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit b53be683b.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   client/flags/flags.go\n\tmodified:   x/genutil/client/cli/init_test.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   x/genutil/client/cli/init.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":15467,"repository":"cosmos/cosmos-sdk","title":"feat: add --initial-height flag to cli init cmd (backport #15147)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15467"},"id":"PVTI_lADOAAN9684ABqEwzgFlDpA","labels":["C:CLI","C:x/genutil"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"feat: add --initial-height flag to cli init cmd (backport #15147)"},{"content":{"body":"This is an automatic backport of pull request #14655 done by [Mergify](https://mergify.com).\nCherry-pick of 5233d5e67c740a07e7ae2300f4688988829733c8 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-14655\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 5233d5e67.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   client/flags/flags.go\n\tmodified:   client/keys/add.go\n\tmodified:   client/keys/add_ledger_test.go\n\tmodified:   client/keys/add_test.go\n\tmodified:   client/keys/list.go\n\tmodified:   client/keys/list_test.go\n\tmodified:   client/keys/root.go\n\tmodified:   client/keys/root_test.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   simapp/simd/cmd/testnet.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":15468,"repository":"cosmos/cosmos-sdk","title":"feat: add a new command to list supported algos (backport #14655)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15468"},"id":"PVTI_lADOAAN9684ABqEwzgFlDx8","labels":["C:CLI","C:Keys"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"feat: add a new command to list supported algos (backport #14655)"},{"assignees":["tac0turtle"],"content":{"body":"This is an automatic backport of pull request #14609 done by [Mergify](https://mergify.com).\nCherry-pick of 7505c18e2f8f695dd6ab7b00515a9686bb5cec27 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-14609\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 7505c18e2.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   client/rpc/rpc_test.go\n\tmodified:   tests/e2e/auth/suite.go\n\tmodified:   tests/e2e/distribution/withdraw_all_suite.go\n\tmodified:   tests/e2e/feegrant/suite.go\n\tmodified:   tests/e2e/gov/deposits.go\n\tmodified:   tests/e2e/staking/suite.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   testutil/network/network.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":15469,"repository":"cosmos/cosmos-sdk","title":"test: fix flaky tests + new method RetryForBlocks (backport #14609)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15469"},"id":"PVTI_lADOAAN9684ABqEwzgFlD2U","labels":["C:CLI"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"test: fix flaky tests + new method RetryForBlocks (backport #14609)"},{"content":{"body":"This is an automatic backport of pull request #15462 done by [Mergify](https://mergify.com).\nCherry-pick of 176c61cf70be223e2b66e0ccee386d5a82558cc6 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-15462\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 176c61cf7.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   x/distribution/keeper/delegation.go\n\tmodified:   x/distribution/types/events.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":15472,"repository":"cosmos/cosmos-sdk","title":"feat: add delegator to withdraw address (backport #15462)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15472"},"id":"PVTI_lADOAAN9684ABqEwzgFlGJU","labels":["C:x/distribution"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"feat: add delegator to withdraw address (backport #15462)"},{"content":{"body":"This is an automatic backport of pull request #14879 done by [Mergify](https://mergify.com).\nCherry-pick of a2797c8cd478d18f1caefafb9d612bab06dd9812 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-14879\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit a2797c8cd.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   api/cosmos/group/v1/query.pulsar.go\n\tmodified:   api/cosmos/group/v1/query_grpc.pb.go\n\tmodified:   api/cosmos/orm/module/v1alpha1/module.pulsar.go\n\tmodified:   proto/cosmos/group/v1/query.proto\n\tmodified:   tests/e2e/group/query.go\n\tmodified:   x/group/client/cli/query.go\n\tmodified:   x/group/keeper/grpc_query.go\n\tmodified:   x/group/query.pb.go\n\tmodified:   x/group/query.pb.gw.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   x/group/keeper/grpc_query_test.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":15475,"repository":"cosmos/cosmos-sdk","title":"feat: add query `groups` in `x/group` (backport #14879)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15475"},"id":"PVTI_lADOAAN9684ABqEwzgFlP88","labels":["C:CLI","C:x/group"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"feat: add query `groups` in `x/group` (backport #14879)"},{"content":{"body":"This is an automatic backport of pull request #15123 done by [Mergify](https://mergify.com).\nCherry-pick of c71d19939baa377aff576cbf0b0eeee028c5ef2b has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-15123\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit c71d19939.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   client/tx/factory.go\n\tmodified:   client/tx/tx.go\n\tmodified:   tests/e2e/auth/suite.go\n\tmodified:   x/auth/client/cli/tips.go\n\tmodified:   x/auth/client/cli/tx_multisign.go\n\tmodified:   x/auth/client/cli/tx_sign.go\n\tmodified:   x/auth/client/cli/validate_sigs.go\n\tmodified:   x/genutil/client/cli/gentx.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   tests/e2e/tx/service_test.go\n\tboth modified:   x/staking/client/cli/tx.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":15478,"repository":"cosmos/cosmos-sdk","title":"fix: change the behavior of offline mode correctly (backport #15123)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15478"},"id":"PVTI_lADOAAN9684ABqEwzgFlS28","labels":["C:x/staking","C:CLI","C:x/auth","C:x/genutil"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix: change the behavior of offline mode correctly (backport #15123)"},{"content":{"body":"This is an automatic backport of pull request #15474 done by [Mergify](https://mergify.com).\nCherry-pick of 5612bb815b340cd6bf3ce3a340f57aee0152c5c3 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-15474\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 5612bb815.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   api/cosmos/vesting/v1beta1/vesting.pulsar.go\n\tmodified:   x/auth/vesting/types/vesting.pb.go\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tboth modified:   api/cosmos/vesting/v1beta1/tx.pulsar.go\n\tdeleted by us:   client/v2/internal/testpb/msg.proto\n\tboth modified:   orm/internal/testpb/bank.proto\n\tboth modified:   proto/cosmos/vesting/v1beta1/tx.proto\n\tboth modified:   proto/cosmos/vesting/v1beta1/vesting.proto\n\tdeleted by us:   tests/integration/aminojson/internal/testpb/test.proto\n\tboth modified:   x/auth/vesting/types/tx.pb.go\n\tdeleted by us:   x/tx/internal/testpb/signers.proto\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":15480,"repository":"cosmos/cosmos-sdk","title":"docs: improve proto vesting docs about time attributes (backport #15474)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15480"},"id":"PVTI_lADOAAN9684ABqEwzgFlUSE","labels":["C:x/auth"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"docs: improve proto vesting docs about time attributes (backport #15474)"},{"content":{"body":"This is an automatic backport of pull request #15521 done by [Mergify](https://mergify.com).\nCherry-pick of 750d12505f78c3dd9acf659ff6662b7ab4214051 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-15521\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 750d12505.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   README.md\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   docs/architecture/adr-057-app-wiring.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":15523,"repository":"cosmos/cosmos-sdk","title":"docs: remove ignite cli (backport #15521)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15523"},"id":"PVTI_lADOAAN9684ABqEwzgFpsk8","labels":["Type: ADR"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"docs: remove ignite cli (backport #15521)"},{"content":{"body":"This is an automatic backport of pull request #15422 done by [Mergify](https://mergify.com).\nCherry-pick of 67dc594888c63f037a34f324c9b9c6d2a2dcfc6b has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-15422\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 67dc59488.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   Makefile\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":15524,"repository":"cosmos/cosmos-sdk","title":"fix: Makefile rocksdb (backport #15422)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15524"},"id":"PVTI_lADOAAN9684ABqEwzgFpvFY","labels":["Type: Build"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix: Makefile rocksdb (backport #15422)"},{"content":{"body":"This is an automatic backport of pull request #15448 done by [Mergify](https://mergify.com).\nCherry-pick of ee9774af2754b4f9f27dbd912f0aeae42178694a has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-15448\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit ee9774af2.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   go.mod\n\tmodified:   proto/cosmos/base/store/v1beta1/commit_info.proto\n\tmodified:   store/rootmulti/store_test.go\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   api/cosmos/base/store/v1beta1/commit_info.pulsar.go\n\tboth modified:   baseapp/abci.go\n\tboth modified:   go.sum\n\tboth modified:   simapp/go.mod\n\tboth modified:   simapp/go.sum\n\tdeleted by us:   store/go.mod\n\tboth modified:   store/rootmulti/store.go\n\tboth modified:   store/types/commit_info.pb.go\n\tboth modified:   tests/go.mod\n\tboth modified:   tests/go.sum\n\tboth modified:   types/errors/errors.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com/) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":15573,"repository":"cosmos/cosmos-sdk","title":"feat: auto-set block timestamp for historical queries (backport #15448)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15573"},"id":"PVTI_lADOAAN9684ABqEwzgFwkHA","labels":["C:Store"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"feat: auto-set block timestamp for historical queries (backport #15448)"},{"content":{"body":"This issue is meant to cover what is needed to launch the github org discussion board\r\n\r\n\r\n- [x] #1 \r\n- [ ] #2 \r\n- [ ] #3 \r\n- [ ] etc..","number":10,"repository":"cosmos/community","title":"[Epic]: Prep for launch","type":"Issue","url":"https://github.com/cosmos/community/issues/10"},"id":"PVTI_lADOAAN9684ABqEwzgF4P0Y","priority ":"High","repository":"https://github.com/cosmos/community","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","title":"[Epic]: Prep for launch"},{"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nCloses: https://github.com/cosmos/cosmos-sdk/issues/15670\r\nWe need to find a way to deprecate `interchainio/simapp`.\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] added `!` to the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] updated the relevant documentation or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] confirmed all author checklist items have been addressed \r\n* [ ] reviewed state machine logic\r\n* [ ] reviewed API design and naming\r\n* [ ] reviewed documentation is accurate\r\n* [ ] reviewed tests and test coverage\r\n* [ ] manually tested (if applicable)\r\n","number":15702,"repository":"cosmos/cosmos-sdk","title":"ci: backport docker job from main","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15702"},"id":"PVTI_lADOAAN9684ABqEwzgF7YOc","labels":["Type: Build","Type: CI"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"ci: backport docker job from main"},{"content":{"body":"This is an automatic backport of pull request #15703 done by [Mergify](https://mergify.com).\nCherry-pick of b2c84188deb426714cb711f3aeb7390a5368a1fa has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-15703\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit b2c84188d.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   Dockerfile\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   .github/workflows/docker.yml\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":15718,"repository":"cosmos/cosmos-sdk","title":"ci: use alpine in dockerfile and bump go version (backport #15703)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15718"},"id":"PVTI_lADOAAN9684ABqEwzgF9Tw0","labels":["Type: Build","Type: CI"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"ci: use alpine in dockerfile and bump go version (backport #15703)"},{"content":{"body":"This is an automatic backport of pull request #15719 done by [Mergify](https://mergify.com).\nCherry-pick of 22f26829de5e32db585d387cdc39dc131570769f has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-15719\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 22f26829d.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   Dockerfile\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":15720,"repository":"cosmos/cosmos-sdk","title":"build: install necessary deps in docker (backport #15719)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15720"},"id":"PVTI_lADOAAN9684ABqEwzgF9qiQ","labels":["Type: Build"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"build: install necessary deps in docker (backport #15719)"},{"content":{"body":"This is an automatic backport of pull request #15683 done by [Mergify](https://mergify.com).\nCherry-pick of d5a618db6a431ee3b6a39c16e6057f47a57d4b1c has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-15683\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit d5a618db6.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   store/rootmulti/store.go\n\tmodified:   store/rootmulti/store_test.go\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tdeleted by us:   store/CHANGELOG.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":15774,"repository":"cosmos/cosmos-sdk","title":"feat: More flexibility for `CacheMultiStoreWithVersion` (backport #15683)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15774"},"id":"PVTI_lADOAAN9684ABqEwzgGBdO0","labels":["C:Store"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"feat: More flexibility for `CacheMultiStoreWithVersion` (backport #15683)"},{"content":{"body":"This is an automatic backport of pull request #15789 done by [Mergify](https://mergify.com).\nCherry-pick of f95585b40d0f72e25b73d81df662e2e5ce755442 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-15789\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit f95585b40.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   baseapp/baseapp.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   baseapp/abci.go\n\tboth modified:   baseapp/abci_test.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":15792,"repository":"cosmos/cosmos-sdk","title":"fix: use initialHeight correctly (backport #15789)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15792"},"id":"PVTI_lADOAAN9684ABqEwzgGC6Ho","labels":["A:automerge"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix: use initialHeight correctly (backport #15789)"},{"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nThe consensus version was not bumped in v0.47 because it was not necessary: https://github.com/cosmos/cosmos-sdk/pull/14483#discussion_r1062294196\r\nHowever an empty migration stayed while it shouldn't have, meaning there is a discrepancy between the consensus version and the migrated version: https://github.com/cosmos/cosmos-sdk/pull/15830#discussion_r1167028540 \r\n\r\nThis PR fixes that.\r\n\r\nNote, notice this targets v0.47, as this is updated here for main: https://github.com/cosmos/cosmos-sdk/pull/15830/files\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] added `!` to the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] updated the relevant documentation or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] confirmed all author checklist items have been addressed \r\n* [ ] reviewed state machine logic\r\n* [ ] reviewed API design and naming\r\n* [ ] reviewed documentation is accurate\r\n* [ ] reviewed tests and test coverage\r\n* [ ] manually tested (if applicable)\r\n","number":15848,"repository":"cosmos/cosmos-sdk","title":"fix: remove unnecessary migration","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15848"},"id":"PVTI_lADOAAN9684ABqEwzgGICTM","labels":["C:x/auth"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix: remove unnecessary migration"},{"assignees":["aaronc","julienrbrt"],"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nCloses: #13290 \r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] added `!` to the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] updated the relevant documentation or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] confirmed all author checklist items have been addressed \r\n* [ ] reviewed state machine logic\r\n* [ ] reviewed API design and naming\r\n* [ ] reviewed documentation is accurate\r\n* [ ] reviewed tests and test coverage\r\n* [ ] manually tested (if applicable)\r\n","number":15770,"repository":"cosmos/cosmos-sdk","title":"feat(autocli): add map support","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15770"},"id":"PVTI_lADOAAN9684ABqEwzgGKdH8","labels":["C:CLI"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev","aaronc","julienrbrt","odeke-em","julienrbrt"],"title":"feat(autocli): add map support"},{"content":{"body":"This is an automatic backport of pull request #15876 done by [Mergify](https://mergify.com).\nCherry-pick of 5948b38c13f02909f1206bc5a8c05b09aa4250c4 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-15876\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 5948b38c1.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   client/keys/list.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":15894,"repository":"cosmos/cosmos-sdk","title":"fix: list keys output for empty keys (backport #15876)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15894"},"id":"PVTI_lADOAAN9684ABqEwzgGOljU","labels":["C:CLI","C:Keys"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix: list keys output for empty keys (backport #15876)"},{"content":{"body":"This is an automatic backport of pull request #15908 done by [Mergify](https://mergify.com).\nCherry-pick of 97e4978f0f773d49a122a353ad117e58ff6ee50c has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-15908\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 97e4978f0.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   x/slashing/keeper/infractions.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   x/evidence/keeper/infraction.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":15947,"repository":"cosmos/cosmos-sdk","title":"feat: update the slashing and evidence modules to work with ICS (backport #15908)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15947"},"id":"PVTI_lADOAAN9684ABqEwzgGV2pg","labels":["C:x/slashing","C:x/evidence"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev","sainoe"],"title":"feat: update the slashing and evidence modules to work with ICS (backport #15908)"},{"content":{"body":"This is an automatic backport of pull request #15943 done by [Mergify](https://mergify.com).\nCherry-pick of e59c4a8577e7d0273a1adb7486d755abfcc832db has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-15943\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit e59c4a857.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   x/group/simulation/genesis.go\n\tmodified:   x/simulation/client/cli/flags.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   simapp/sim_test.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":15951,"repository":"cosmos/cosmos-sdk","title":"fix: unique constraint violation for group policy sim genesis (backport #15943)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15951"},"id":"PVTI_lADOAAN9684ABqEwzgGWtjg","labels":["C:CLI","C:Simulations","C:x/group"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix: unique constraint violation for group policy sim genesis (backport #15943)"},{"assignees":["tac0turtle"],"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  --> \r\n\r\n## Summary\r\nThis is a feature request to introduce a replacement mechanism for validator operator keys.\r\n\r\nIt seems like a sensible place to introduce this would be in the \"edit validator\" code paths.\r\n\r\n## Problem Definition\r\nWith the fairly recent introduction of multisig it seems likely that validators will want to strengthen their security post launch, which will require the ability to replace the valoper key.\r\n\r\nIf a valoper key compromise is suspected it also makes sense to replace it.\r\n\r\n## Proposal\r\nFrom a validator perspective it should be as simple as:\r\n```\r\ngaiacli edit-validator ... --from <existing key> --next-from <new key>\r\n```\r\n\r\nTX should be signed by the existing key and, for bonus points and to reduce risk, could required a signature with the  new key as well.\r\n\r\n<!-- Detailed description of requirements of implementation --> \r\nReplacement should only be allowed if the new valoper account adheres to the minimum self bond. \r\n\r\nCouple of ideas to solve scenario where validator can't finance 2 x min-self-bond:\r\n1) Respect a send message that happens in same TX, which moves >= min-self-bond from old account to new (my personal preference)\r\n2) Introduce explicit TX type (so not edit-validator) for this, which includes the logic to sufficiently fund the new account to level of min-self-bond.\r\n\r\n____\r\n#### For Admin Use\r\n - [ ] Not duplicate issue\r\n - [ ] Appropriate labels applied\r\n - [ ] Appropriate contributors tagged\r\n - [ ] Contributor assigned/self-assigned\r\n","number":3863,"repository":"cosmos/cosmos-sdk","title":"EPIC: Operator key replacement","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/3863"},"id":"PVTI_lADOAAN9684ABqEwzgGXC9M","labels":["C:x/staking","T:Epic"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19601"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"EPIC: Operator key replacement"},{"content":{"body":"This is an automatic backport of pull request #15955 done by [Mergify](https://mergify.com).\nCherry-pick of 6a8251aafa8eae04e968fe71eecdc62f8b97b9bd has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-15955\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 6a8251aaf.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tboth modified:   client/v2/go.mod\n\tboth modified:   client/v2/go.sum\n\tboth modified:   go.mod\n\tboth modified:   go.sum\n\tboth modified:   simapp/go.mod\n\tboth modified:   simapp/go.sum\n\tdeleted by us:   store/go.mod\n\tdeleted by us:   store/go.sum\n\tboth modified:   tests/go.mod\n\tboth modified:   tests/go.sum\n\tdeleted by us:   tools/confix/go.mod\n\tdeleted by us:   tools/confix/go.sum\n\tboth modified:   tools/cosmovisor/go.mod\n\tboth modified:   tools/cosmovisor/go.sum\n\tdeleted by us:   tools/hubl/go.mod\n\tdeleted by us:   tools/hubl/go.sum\n\tboth modified:   tools/rosetta/go.mod\n\tboth modified:   tools/rosetta/go.sum\n\tdeleted by us:   x/circuit/go.mod\n\tdeleted by us:   x/circuit/go.sum\n\tdeleted by us:   x/evidence/go.mod\n\tdeleted by us:   x/evidence/go.sum\n\tdeleted by us:   x/feegrant/go.mod\n\tdeleted by us:   x/feegrant/go.sum\n\tdeleted by us:   x/nft/go.mod\n\tdeleted by us:   x/nft/go.sum\n\tdeleted by us:   x/upgrade/go.mod\n\tdeleted by us:   x/upgrade/go.sum\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":15957,"repository":"cosmos/cosmos-sdk","title":"build(deps): bump cometbft to v0.37.1 (backport #15955)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/15957"},"id":"PVTI_lADOAAN9684ABqEwzgGXcnk","labels":["C:CLI","C:Store","C:x/evidence","C:x/upgrade","C:x/feegrant","C:Cosmovisor","C:Rosetta","C:x/nft"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"build(deps): bump cometbft to v0.37.1 (backport #15955)"},{"content":{"body":"This is an automatic backport of pull request #16017 done by [Mergify](https://mergify.com).\nCherry-pick of 1d03f419f7d8ed917bd512fd2f4bb5f76c74ca39 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-16017\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 1d03f419f.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   x/group/migrations/v2/migrate.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   x/group/migrations/v2/migrate_test.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":16018,"repository":"cosmos/cosmos-sdk","title":"fix(x/group): v2 migration (backport #16017)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16018"},"id":"PVTI_lADOAAN9684ABqEwzgGfqOw","labels":["C:x/group"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix(x/group): v2 migration (backport #16017)"},{"content":{"body":"Bumps [github.com/cosmos/gogoproto](https://github.com/cosmos/gogoproto) from 1.4.8 to 1.4.9.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/cosmos/gogoproto/blob/main/CHANGELOG.md\">github.com/cosmos/gogoproto's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/cosmos/gogoproto/releases/tag/v1.4.9\">v1.4.9</a> - 2023-05-03</h2>\n<h3>Breaking changes</h3>\n<ul>\n<li><a href=\"https://redirect.github.com/cosmos/gogoproto/pull/62\">#62</a> Change public API for <code>MergedFileDescriptors</code>, <code>MergedGlobalFileDescriptors</code>, etc. introduced in v1.4.8, retracting that release.</li>\n</ul>\n<h3>Improvements</h3>\n<ul>\n<li><a href=\"https://redirect.github.com/cosmos/gogoproto/pull/62\">#62</a> Add the <code>proto.HybridResolver</code> var  which exposes the merged <code>*protoregistry.Files</code> functionality in a high-performance way. Also add the <code>proto.GogoResolver</code> var.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/cosmos/gogoproto/commit/80518725d53359f02c9eb5098059450d4624ed0c\"><code>8051872</code></a> feat!: add HybridResolver (<a href=\"https://redirect.github.com/cosmos/gogoproto/issues/62\">#62</a>)</li>\n<li>See full diff in <a href=\"https://github.com/cosmos/gogoproto/compare/v1.4.8...v1.4.9\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=github.com/cosmos/gogoproto&package-manager=go_modules&previous-version=1.4.8&new-version=1.4.9)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>","number":16030,"repository":"cosmos/cosmos-sdk","title":"build(deps): Bump github.com/cosmos/gogoproto from 1.4.8 to 1.4.9","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16030"},"id":"PVTI_lADOAAN9684ABqEwzgGnQxA","labels":["S:blocked","C:CLI","dependencies","A:automerge","C:Cosmovisor","C:Rosetta","C:orm","testing-required"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"build(deps): Bump github.com/cosmos/gogoproto from 1.4.8 to 1.4.9"},{"content":{"body":"This is an automatic backport of pull request #14991 done by [Mergify](https://mergify.com).\nCherry-pick of a90569c7e4e4282005d3596cc2763c5f6b2e3f16 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-14991\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit a90569c7e.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   Makefile\n\tmodified:   api/cosmos/orm/v1/orm.pulsar.go\n\tmodified:   baseapp/abci_test.go\n\tmodified:   baseapp/block_gas_test.go\n\tmodified:   baseapp/grpcrouter_test.go\n\tmodified:   baseapp/testutil/messages.pb.go\n\tmodified:   baseapp/testutil/messages.proto\n\tmodified:   client/context_test.go\n\tmodified:   codec/types/types_test.go\n\tmodified:   codec/unknownproto/unknown_fields_test.go\n\tmodified:   codec/yaml_test.go\n\tnew file:   testutil/testdata/README.md\n\tmodified:   testutil/testdata/buf.gen.pulsar.yaml\n\tmodified:   testutil/testdata/buf.gen.yaml\n\tmodified:   testutil/testdata/codec.go\n\tmodified:   testutil/testdata/query.pb.go\n\tmodified:   testutil/testdata/testdata.pb.go\n\trenamed:    testutil/testdata/query.proto -> testutil/testdata/testpb/query.proto\n\trenamed:    testutil/testdata_pulsar/query.pulsar.go -> testutil/testdata/testpb/query.pulsar.go\n\trenamed:    testutil/testdata/testdata.proto -> testutil/testdata/testpb/testdata.proto\n\trenamed:    testutil/testdata_pulsar/testdata.pulsar.go -> testutil/testdata/testpb/testdata.pulsar.go\n\trenamed:    testutil/testdata/tx.proto -> testutil/testdata/testpb/tx.proto\n\trenamed:    testutil/testdata_pulsar/tx.pulsar.go -> testutil/testdata/testpb/tx.pulsar.go\n\trenamed:    testutil/testdata/unknonwnproto.proto -> testutil/testdata/testpb/unknonwnproto.proto\n\trenamed:    testutil/testdata_pulsar/unknonwnproto.pulsar.go -> testutil/testdata/testpb/unknonwnproto.pulsar.go\n\tmodified:   testutil/testdata/tx.pb.go\n\tmodified:   testutil/testdata/unknonwnproto.pb.go\n\tdeleted:    testutil/testdata_pulsar/query.go\n\tdeleted:    testutil/testdata_pulsar/query_grpc.pb.go\n\tdeleted:    testutil/testdata_pulsar/tx_grpc.pb.go\n\tmodified:   types/tx_msg_test.go\n\tmodified:   x/auth/tx/encode_decode_test.go\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tboth modified:   .golangci.yml\n\tboth modified:   CHANGELOG.md\n\tboth modified:   simapp/app.go\n\tboth modified:   simapp/app_v2.go\n\tdeleted by us:   testutil/assert_helpers.go\n\tboth modified:   testutil/testdata/testpb/pulsar_query.go\n\tboth modified:   testutil/testdata/testpb/query_grpc.pb.go\n\tboth modified:   testutil/testdata/testpb/tx_grpc.pb.go\n\tboth modified:   x/auth/ante/testutil_test.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":16083,"repository":"cosmos/cosmos-sdk","title":"fix: correct path required proto testdata (backport #14991)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16083"},"id":"PVTI_lADOAAN9684ABqEwzgGomUw","labels":["C:x/staking","C:CLI","C:x/auth","Type: Build","Type: CI"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev","mark-rushakoff","facundomedica"],"title":"fix: correct path required proto testdata (backport #14991)"},{"content":{"body":"This is an automatic backport of pull request #16067 done by [Mergify](https://mergify.com).\nCherry-pick of c1ceb3bdda83ebc1bbe4878a67b0df31d2a50d5a has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-16067\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit c1ceb3bdd.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tnew file:   client/snapshot/cmd.go\n\tnew file:   client/snapshot/delete.go\n\tnew file:   client/snapshot/dump.go\n\tnew file:   client/snapshot/export.go\n\tnew file:   client/snapshot/list.go\n\tnew file:   client/snapshot/load.go\n\tnew file:   client/snapshot/restore.go\n\tmodified:   server/util.go\n\tmodified:   snapshots/manager.go\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   go.mod\n\tboth modified:   server/types/app.go\n\tboth modified:   simapp/simd/cmd/root.go\n\tdeleted by us:   simapp/simd/cmd/root_v2.go\n\tboth modified:   snapshots/store.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":16102,"repository":"cosmos/cosmos-sdk","title":"feat: add local snapshots management commands (backport #16067)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16102"},"id":"PVTI_lADOAAN9684ABqEwzgGqK2k","labels":["C:CLI"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"feat: add local snapshots management commands (backport #16067)"},{"content":{"body":"This is an automatic backport of pull request #16068 done by [Mergify](https://mergify.com).\nCherry-pick of ddf51ccddfc37fcb1fb7b5d9b3ee61882c67f717 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-16068\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit ddf51ccdd.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   x/staking/simulation/operations.go\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":16130,"repository":"cosmos/cosmos-sdk","title":"fix: allow non-EOA accounts to stake in simulation (backport #16068)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16130"},"id":"PVTI_lADOAAN9684ABqEwzgGsKoo","labels":["C:x/staking","C:Simulations"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix: allow non-EOA accounts to stake in simulation (backport #16068)"},{"content":{"body":"This is an automatic backport of pull request #16138 done by [Mergify](https://mergify.com).\nCherry-pick of 92247cb0e9fdaed30b1db7d3cc7a05f7efe79828 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-16138\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 92247cb0e.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   client/snapshot/dump.go\n\tmodified:   snapshots/manager.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":16139,"repository":"cosmos/cosmos-sdk","title":"fix: snapshot commands panic if snapshot don't exists (backport #16138)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16139"},"id":"PVTI_lADOAAN9684ABqEwzgGs5mA","labels":["C:CLI"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix: snapshot commands panic if snapshot don't exists (backport #16138)"},{"content":{"body":"This is an automatic backport of pull request #16142 done by [Mergify](https://mergify.com).\nCherry-pick of 94dec7a4d64beb21058ba0063f60cfe692d12d81 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-16142\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 94dec7a4d.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   server/api/server.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":16143,"repository":"cosmos/cosmos-sdk","title":"perf: Remove indentation in REST respones (backport #16142)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16143"},"id":"PVTI_lADOAAN9684ABqEwzgGtDac","labels":["conflicts"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"perf: Remove indentation in REST respones (backport #16142)"},{"content":{"body":"This is an automatic backport of pull request #16141 done by [Mergify](https://mergify.com).\nCherry-pick of fb8ff071ca2eec97e218a9be1ec05b5a16efebb3 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-16141\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit fb8ff071c.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   math/dec.go\n\tmodified:   math/dec_test.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   math/CHANGELOG.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":16151,"repository":"cosmos/cosmos-sdk","title":"perf: Speedup Dec.Sqrt() (backport #16141)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16151"},"id":"PVTI_lADOAAN9684ABqEwzgGuZxo","labels":["conflicts"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"perf: Speedup Dec.Sqrt() (backport #16141)"},{"content":{"body":"This is an automatic backport of pull request #16209 done by [Mergify](https://mergify.com).\nCherry-pick of de75e568b4d99d52f84dcc590d2f7b5729d2af40 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-16209\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit de75e568b.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   server/start.go\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":16228,"repository":"cosmos/cosmos-sdk","title":"feat: make StartCmd more customizable (backport #16209)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16228"},"id":"PVTI_lADOAAN9684ABqEwzgG0zSk","labels":["conflicts"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"feat: make StartCmd more customizable (backport #16209)"},{"assignees":["julienrbrt"],"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nPrepare v0.47.3.\r\n\r\nThis version will be released after https://github.com/cosmos/cosmos-sdk/pull/16249, after testing thoroughly the snapshots features on mainnets.\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] added `!` to the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] updated the relevant documentation or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] confirmed all author checklist items have been addressed \r\n* [ ] reviewed state machine logic\r\n* [ ] reviewed API design and naming\r\n* [ ] reviewed documentation is accurate\r\n* [ ] reviewed tests and test coverage\r\n* [ ] manually tested (if applicable)\r\n","number":16248,"repository":"cosmos/cosmos-sdk","title":"chore: prepare v0.47.3","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16248"},"id":"PVTI_lADOAAN9684ABqEwzgG3Y6Y","labels":["Type: CI"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"chore: prepare v0.47.3"},{"content":{"body":"This is an automatic backport of pull request #16191 done by [Mergify](https://mergify.com).\nCherry-pick of be2003e58101cd506eb1249b1e0435accf5a4b58 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-16191\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit be2003e58.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   api/cosmos/group/v1/events.pulsar.go\n\tmodified:   proto/cosmos/group/v1/events.proto\n\tmodified:   proto/cosmos/group/v1/query.proto\n\tmodified:   x/group/README.md\n\tmodified:   x/group/events.pb.go\n\tmodified:   x/group/keeper/genesis.go\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   api/cosmos/group/v1/types.pulsar.go\n\tboth modified:   proto/cosmos/group/v1/types.proto\n\tboth modified:   x/group/keeper/keeper.go\n\tboth modified:   x/group/keeper/msg_server.go\n\tdeleted by us:   x/group/keeper/msg_server_test.go\n\tboth modified:   x/group/types.pb.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":16305,"repository":"cosmos/cosmos-sdk","title":"feat(group): add group event tally result (backport #16191)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16305"},"id":"PVTI_lADOAAN9684ABqEwzgG96Ww","labels":["C:x/group"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"feat(group): add group event tally result (backport #16191)"},{"content":{"body":"This is an automatic backport of pull request #16312 done by [Mergify](https://mergify.com).\nCherry-pick of 60977e6dbdd888293fb58b2a8d7164bb53b5b076 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-16312\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 60977e6db.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\trenamed:    client/prompts.go -> client/prompt_validation.go\n\tnew file:   client/prompt_validation_test.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":16313,"repository":"cosmos/cosmos-sdk","title":"fix: allow any address in `ValidatePromptAddress` (backport #16312)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16313"},"id":"PVTI_lADOAAN9684ABqEwzgG-Ovw","labels":["C:CLI"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix: allow any address in `ValidatePromptAddress` (backport #16312)"},{"content":{"body":"This is an automatic backport of pull request #16404 done by [Mergify](https://mergify.com).\nCherry-pick of b590b091076078c7e5c740e9c9f3f2f98f7e85e7 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-16404\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit b590b0910.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   client/snapshot/cmd.go\n\tmodified:   client/snapshot/list.go\n\tmodified:   client/snapshot/load.go\n\tmodified:   docs/docs/run-node/01-run-node.md\n\tmodified:   go.mod\n\tmodified:   simapp/go.mod\n\tmodified:   snapshots/README.md\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tboth modified:   client/snapshot/export.go\n\tdeleted by us:   server/cmt_cmds.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":16408,"repository":"cosmos/cosmos-sdk","title":"chore: small snapshot commands & docs improvement (backport #16404)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16408"},"id":"PVTI_lADOAAN9684ABqEwzgHGjX0","labels":["C:CLI"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"chore: small snapshot commands & docs improvement (backport #16404)"},{"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nref: https://github.com/cosmos/cosmos-sdk/pull/16415#discussion_r1218253866\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] added `!` to the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] updated the relevant documentation or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] confirmed all author checklist items have been addressed \r\n* [ ] reviewed state machine logic\r\n* [ ] reviewed API design and naming\r\n* [ ] reviewed documentation is accurate\r\n* [ ] reviewed tests and test coverage\r\n* [ ] manually tested (if applicable)\r\n","number":16430,"repository":"cosmos/cosmos-sdk","title":"refactor: avoid breaking change due to #16415 included in v0.50","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16430"},"id":"PVTI_lADOAAN9684ABqEwzgHK1No","labels":["backport/0.46.x"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"refactor: avoid breaking change due to #16415 included in v0.50"},{"content":{"body":"This is an automatic backport of pull request #16449 done by [Mergify](https://mergify.com).\nCherry-pick of d1e685b4db43baf6f6e90d53c46af16595af7c07 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-16449\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit d1e685b4d.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   store/rootmulti/store.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":16452,"repository":"cosmos/cosmos-sdk","title":"fix: StateSync Restore by excluding memory store (backport #16449)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16452"},"id":"PVTI_lADOAAN9684ABqEwzgHNayQ","labels":["C:Store"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix: StateSync Restore by excluding memory store (backport #16449)"},{"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nCloses: #XXXX\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] added `!` to the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] updated the relevant documentation or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] confirmed all author checklist items have been addressed \r\n* [ ] reviewed state machine logic\r\n* [ ] reviewed API design and naming\r\n* [ ] reviewed documentation is accurate\r\n* [ ] reviewed tests and test coverage\r\n* [ ] manually tested (if applicable)\r\n","number":16465,"repository":"cosmos/cosmos-sdk","title":"fix: patch barberry","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16465"},"id":"PVTI_lADOAAN9684ABqEwzgHOhXw","labels":["C:x/auth"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix: patch barberry"},{"content":{"body":"This is an automatic backport of pull request #16554 done by [Mergify](https://mergify.com).\nCherry-pick of 629dc63ecdc76687785ede7c7df54dbf7b0afe8a has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-16554\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 629dc63ec.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   x/auth/types/account.go\n\tmodified:   x/auth/types/account_test.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":16569,"repository":"cosmos/cosmos-sdk","title":"fix(x/auth): ensure nil .BaseAccounts are reported in ModuleAccount.Validate (backport #16554)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16569"},"id":"PVTI_lADOAAN9684ABqEwzgHXM_E","labels":["C:x/auth"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix(x/auth): ensure nil .BaseAccounts are reported in ModuleAccount.Validate (backport #16554)"},{"content":{"body":"This is an automatic backport of pull request #16656 done by [Mergify](https://mergify.com).\nCherry-pick of 9b2fd7bad9eac5015d10ed76c798826bfd63d44d has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-16656\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 9b2fd7bad.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   CHANGELOG.md\n\tmodified:   types/simulation/config.go\n\tmodified:   x/simulation/simulate.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   x/simulation/params.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":16730,"repository":"cosmos/cosmos-sdk","title":"feat: add custom max gas for block for sim config (backport #16656)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16730"},"id":"PVTI_lADOAAN9684ABqEwzgHm484","labels":["C:Simulations"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"feat: add custom max gas for block for sim config (backport #16656)"},{"content":{"body":"This is an automatic backport of pull request #16784 done by [Mergify](https://mergify.com).\nCherry-pick of 3702dfc8aa315ac4a0e4c3587c0c9c4eec66b061 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-16784\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 3702dfc8a.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   x/slashing/types/events.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   x/slashing/keeper/keeper.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":16793,"repository":"cosmos/cosmos-sdk","title":"fix(x/slashing): Emit slashing event with the correct reason in SlashWithInfractionReason (backport #16784)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16793"},"id":"PVTI_lADOAAN9684ABqEwzgHqmb8","labels":["C:x/slashing"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix(x/slashing): Emit slashing event with the correct reason in SlashWithInfractionReason (backport #16784)"},{"content":{"body":"This is an automatic backport of pull request #16856 done by [Mergify](https://mergify.com).\nCherry-pick of 317fb0b33088f3bda937fd4d76e421cc2177d642 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-16856\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 317fb0b33.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   client/pruning/main.go\n\tboth modified:   simapp/simd/cmd/root.go\n\tdeleted by us:   simapp/simd/cmd/root_v2.go\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":16875,"repository":"cosmos/cosmos-sdk","title":"fix(cli): improve `prune` command ux (backport #16856)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16875"},"id":"PVTI_lADOAAN9684ABqEwzgHzC2k","labels":["C:CLI"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix(cli): improve `prune` command ux (backport #16856)"},{"content":{"body":"This is an automatic backport of pull request #16994 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":16996,"repository":"cosmos/cosmos-sdk","title":"fix: query tx events with `>=` and `<=` operators (backport #16994)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/16996"},"id":"PVTI_lADOAAN9684ABqEwzgH7tHk","labels":["C:x/auth"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix: query tx events with `>=` and `<=` operators (backport #16994)"},{"content":{"body":"This is an automatic backport of pull request #17009 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17011,"repository":"cosmos/cosmos-sdk","title":"docs(group): fix typo in README.md (backport #17009)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17011"},"id":"PVTI_lADOAAN9684ABqEwzgH9SLI","labels":["C:x/group"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"docs(group): fix typo in README.md (backport #17009)"},{"content":{"body":"This is an automatic backport of pull request #16950 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17018,"repository":"cosmos/cosmos-sdk","title":"docs: change bank multi-send command description (backport #16950)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17018"},"id":"PVTI_lADOAAN9684ABqEwzgH93UE","labels":["C:CLI","C:x/bank"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"docs: change bank multi-send command description (backport #16950)"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \nv    Before smashing the submit button please review the template.\nv    Word of caution: poorly thought-out proposals may be rejected \nv                     without deliberation \n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\n\n## Summary\n\nToday the cosmos-sdk is meant to be modular, while it is \"modular\" to a certain extent there is a need for this to be easier for advanced users. Secondly as we explore different worlds and different consensus engines limiting to what is defined ABCI further limits what can be built. \n\nFor example if a user wanted to use a custom header for specific use cases that may not be as generalizable as the current structure (abci).\n\nThere are many cases where users may want to swap things out for different designs or only use the sdk as a middleware. The current design is limiting in these functions. \n\nThis epic aims to define a couple interfaces that users can swap functionality: consensus, mempool, server, client, commitment, storage and so on.\n\n## Problem Definition\n\nBaseapp is limiting in nature due to the tight coupling of ABCI and degree of understanding in order to have confidence in the changes. \n\n## Work Breakdown\n\n### Phase 1\n\n```[tasklist]\n### Tasks\n- [x] Begin defining needs of various users\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/17425\n- [ ] Write ADR on different interfaces\n```\n\n### Phase 2\n\n(After Phase 1 is completed we will have a better idea of the work break down needed for phase 2, for now it will be left as TBD)\n\n```[tasklist]\n### Tasks\n- [ ] TBD\n```\n\n\n","number":17045,"repository":"cosmos/cosmos-sdk","title":"[Epic]: Runtime","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/17045"},"id":"PVTI_lADOAAN9684ABqEwzgIAN7M","labels":["T:Epic"],"priority ":"Medium","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"üëë Epic","title":"[Epic]: Runtime"},{"content":{"body":"This is an automatic backport of pull request #17089 done by [Mergify](https://mergify.com).\nCherry-pick of 0fa85b7a424d78bfa1703ceb2e245c0bb4bcda22 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-17089\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 0fa85b7a4.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   testutil/configurator/configurator.go\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17092,"repository":"cosmos/cosmos-sdk","title":"fix: testutil/configurator: correctly create fresh copy of defaultConfig (backport #17089)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17092"},"id":"PVTI_lADOAAN9684ABqEwzgIFxdY","labels":["conflicts"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix: testutil/configurator: correctly create fresh copy of defaultConfig (backport #17089)"},{"content":{"body":"This is an automatic backport of pull request #17132 done by [Mergify](https://mergify.com).\nCherry-pick of 2c5f36c259126b0d3836e4aa110cd78949f305f6 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-17132\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 2c5f36c25.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   docs/docs/basics/02-query-lifecycle.md\n\tmodified:   docs/docs/basics/03-accounts.md\n\tmodified:   docs/docs/basics/04-gas-fees.md\n\tmodified:   docs/docs/building-apps/01-app-go-v2.md\n\tmodified:   docs/docs/building-apps/02-app-mempool.md\n\tmodified:   docs/docs/building-modules/01-intro.md\n\tmodified:   docs/docs/building-modules/01-module-manager.md\n\tmodified:   docs/docs/building-modules/02-messages-and-queries.md\n\tmodified:   docs/docs/building-modules/03-msg-services.md\n\tmodified:   docs/docs/building-modules/04-query-services.md\n\tmodified:   docs/docs/building-modules/05-beginblock-endblock.md\n\tmodified:   docs/docs/building-modules/06-keeper.md\n\tmodified:   docs/docs/building-modules/07-invariants.md\n\tmodified:   docs/docs/building-modules/08-genesis.md\n\tmodified:   docs/docs/building-modules/09-module-interfaces.md\n\tmodified:   docs/docs/building-modules/10-autocli.md\n\tmodified:   docs/docs/building-modules/13-upgrade.md\n\tmodified:   docs/docs/building-modules/15-depinject.md\n\tmodified:   docs/docs/core/00-baseapp.md\n\tmodified:   docs/docs/core/01-transactions.md\n\tmodified:   docs/docs/core/02-context.md\n\tmodified:   docs/docs/core/03-node.md\n\tmodified:   docs/docs/core/04-store.md\n\tmodified:   docs/docs/core/05-encoding.md\n\tmodified:   docs/docs/core/08-events.md\n\tmodified:   docs/docs/run-node/01-run-node.md\n\tmodified:   docs/docs/run-node/02-interact-node.md\n\tmodified:   x/auth/tx/README.md\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   docs/docs/basics/01-tx-lifecycle.md\n\tboth modified:   docs/docs/building-apps/03-app-upgrade.md\n\tboth modified:   docs/docs/building-modules/14-simulator.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17134,"repository":"cosmos/cosmos-sdk","title":"docs: improve usage of `:::note` (backport #17132)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17134"},"id":"PVTI_lADOAAN9684ABqEwzgIKgwo","labels":["C:x/auth"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"docs: improve usage of `:::note` (backport #17132)"},{"assignees":["julienrbrt"],"content":{"body":"This is an automatic backport of pull request #17138 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17141,"repository":"cosmos/cosmos-sdk","title":"fix(simapp): set chain-id on `NewSimApp` for sim bench tests (backport #17138)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17141"},"id":"PVTI_lADOAAN9684ABqEwzgIKvl0","labels":["Type: Build"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix(simapp): set chain-id on `NewSimApp` for sim bench tests (backport #17138)"},{"assignees":["alexanderbez","facundomedica","julienrbrt"],"content":{"body":"This is an automatic backport of pull request #16547 done by [Mergify](https://mergify.com).\nCherry-pick of 75b4918b94fbe1ba24dc8822810e4da85afb1773 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-16547\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 75b4918b9.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   docs/docs/building-apps/02-app-mempool.md\n\tmodified:   testutil/sims/app_helpers.go\n\tmodified:   x/auth/ante/setup.go\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   baseapp/abci_test.go\n\tdeleted by us:   baseapp/abci_utils.go\n\tboth modified:   baseapp/block_gas_test.go\n\tboth modified:   baseapp/utils_test.go\n\tboth modified:   x/auth/ante/setup_test.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17161,"repository":"cosmos/cosmos-sdk","title":"fix: check tx gas limit against block gas limit (backport #16547)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17161"},"id":"PVTI_lADOAAN9684ABqEwzgIMZL0","labels":["C:x/auth","testing-required"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev","alexanderbez","facundomedica"],"title":"fix: check tx gas limit against block gas limit (backport #16547)"},{"content":{"body":"This is an automatic backport of pull request #17188 done by [Mergify](https://mergify.com).\nCherry-pick of 0b5e7ed0af567a5be49f0dd0d7a0f2062042c9fd has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-17188\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 0b5e7ed0a.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   x/auth/client/cli/decode.go\n\tmodified:   x/auth/client/cli/encode.go\n\tmodified:   x/genutil/client/cli/gentx.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   x/auth/client/cli/tx_multisign.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17192,"repository":"cosmos/cosmos-sdk","title":"refactor: hide `--output` flags that don't work (backport #17188)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17192"},"id":"PVTI_lADOAAN9684ABqEwzgIPEzY","labels":["C:CLI","C:x/auth","C:x/genutil"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"refactor: hide `--output` flags that don't work (backport #17188)"},{"content":{"body":"This is an automatic backport of pull request #17209 done by [Mergify](https://mergify.com).\nCherry-pick of bf1803bc578da645be5d6074ebcb6fcdcd3bd781 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-17209\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit bf1803bc5.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   x/auth/keeper/grpc_query.go\n\tmodified:   x/auth/keeper/grpc_query_test.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17211,"repository":"cosmos/cosmos-sdk","title":"fix(x/auth): internal error on AccountInfo when PubKey is nil (backport #17209)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17211"},"id":"PVTI_lADOAAN9684ABqEwzgIQK7o","labels":["C:x/auth"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix(x/auth): internal error on AccountInfo when PubKey is nil (backport #17209)"},{"content":{"body":"This is an automatic backport of pull request #17228 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17230,"repository":"cosmos/cosmos-sdk","title":"feat(docker): Add debuging dependencies directly into the dockerfile (backport #17228)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17230"},"id":"PVTI_lADOAAN9684ABqEwzgIQ_LM","labels":["Type: Build"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"feat(docker): Add debuging dependencies directly into the dockerfile (backport #17228)"},{"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nPart of: #17207\r\n\r\nAmends the usage of `sdk.Context` to `context.Context` within keeper docs\r\n\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] added `!` to the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] updated the relevant documentation or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] run `make lint` and `make test`\r\n* [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] confirmed all author checklist items have been addressed \r\n* [ ] reviewed state machine logic\r\n* [ ] reviewed API design and naming\r\n* [ ] reviewed documentation is accurate\r\n* [ ] reviewed tests and test coverage\r\n* [ ] manually tested (if applicable)\r\n","number":17239,"repository":"cosmos/cosmos-sdk","title":"docs: Amend usage of sdk.Context","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17239"},"id":"PVTI_lADOAAN9684ABqEwzgISRd0","labels":["backport/v0.50.x"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev","kocubinski","atheeshp"],"title":"docs: Amend usage of sdk.Context"},{"content":{"body":"This is an automatic backport of pull request #17296 done by [Mergify](https://mergify.com).\nCherry-pick of 7a778f5c9077bf81a1675612edb27dc8dbb582d0 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-17296\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 7a778f5c9.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   x/genutil/client/cli/migrate.go\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17300,"repository":"cosmos/cosmos-sdk","title":"refactor: add MigrateHandler to allow reuse migrate genesis related function  (backport #17296)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17300"},"id":"PVTI_lADOAAN9684ABqEwzgIZORI","labels":["C:CLI","C:x/genutil"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"refactor: add MigrateHandler to allow reuse migrate genesis related function  (backport #17296)"},{"content":{"body":"This is an automatic backport of pull request #17302 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17303,"repository":"cosmos/cosmos-sdk","title":"fix: resolve migration map in MigrateHandler (#17301) (backport #17302)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17303"},"id":"PVTI_lADOAAN9684ABqEwzgIZdNs","labels":["C:CLI","C:x/genutil"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix: resolve migration map in MigrateHandler (#17301) (backport #17302)"},{"content":{"body":"This is an automatic backport of pull request #17284 done by [Mergify](https://mergify.com).\nCherry-pick of 60198f077af73867594d8dbe0359e5f84b8cba2d has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-17284\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 60198f077.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   docs/docs/building-apps/01-app-go-v2.md\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   runtime/app.go\n\tboth modified:   runtime/module.go\n\tdeleted by us:   scripts/init-simapp.sh\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17305,"repository":"cosmos/cosmos-sdk","title":"fix(runtime): allow to properly register non app wiring modules (backport #17284)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17305"},"id":"PVTI_lADOAAN9684ABqEwzgIZfjg","labels":["Type: Build"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix(runtime): allow to properly register non app wiring modules (backport #17284)"},{"content":{"body":"This is an automatic backport of pull request #16583 done by [Mergify](https://mergify.com).\nCherry-pick of 0c1f6fc162ff56f07a10aaae945bc1a012ecdac1 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-16583\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 0c1f6fc16.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   runtime/builder.go\n\tmodified:   simapp/app.go\n\tmodified:   x/upgrade/module.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   UPGRADING.md\n\tboth modified:   baseapp/baseapp.go\n\tboth modified:   docs/docs/building-modules/01-module-manager.md\n\tboth modified:   docs/docs/core/00-baseapp.md\n\tboth modified:   testutil/mock/types_mock_appmodule.go\n\tboth modified:   types/module/module.go\n\tboth modified:   types/module/module_test.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17398,"repository":"cosmos/cosmos-sdk","title":"fix: Add MigrationModuleManager to handle migration of upgrade module before other modules (backport #16583)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17398"},"id":"PVTI_lADOAAN9684ABqEwzgIlG54","labels":["C:x/upgrade","conflicts"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix: Add MigrationModuleManager to handle migration of upgrade module before other modules (backport #16583)"},{"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nPrepare v0.47.5 release:\r\n\r\nTested on the following mainnets:\r\n\r\n* Juno\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] added `!` to the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/building-modules)\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] updated the relevant documentation or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] run `make lint` and `make test`\r\n* [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] confirmed all author checklist items have been addressed \r\n* [ ] reviewed state machine logic\r\n* [ ] reviewed API design and naming\r\n* [ ] reviewed documentation is accurate\r\n* [ ] reviewed tests and test coverage\r\n* [ ] manually tested (if applicable)\r\n","number":17407,"repository":"cosmos/cosmos-sdk","title":"chore: prepare v0.47.5","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17407"},"id":"PVTI_lADOAAN9684ABqEwzgIl10A","labels":["C:x/authz"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"chore: prepare v0.47.5"},{"content":{"body":"This is an automatic backport of pull request #17424 done by [Mergify](https://mergify.com).\nCherry-pick of 0e057851cc12b18c5297c05fe009b97d860a6cb0 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-17424\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 0e057851c.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   client/keys/import.go\n\tmodified:   client/keys/import_test.go\n\tmodified:   client/keys/root.go\n\tmodified:   client/keys/root_test.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   crypto/keyring/keyring.go\n\tboth modified:   crypto/keyring/keyring_test.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17433,"repository":"cosmos/cosmos-sdk","title":"feat: import hex keys (backport #17424)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17433"},"id":"PVTI_lADOAAN9684ABqEwzgIn9kA","labels":["C:CLI","C:Keys"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"feat: import hex keys (backport #17424)"},{"assignees":["julienrbrt"],"content":{"body":"This is an automatic backport of pull request #17274 done by [Mergify](https://mergify.com).\nCherry-pick of d0f23440bb043bac7d9eeacf2318fa5f1eeea76c has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-17274\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit d0f23440b.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tnew file:   client/rpc/tx.go\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tdeleted by us:   simapp/simd/cmd/commands.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17435,"repository":"cosmos/cosmos-sdk","title":"feat: add event-query-tx-for cmd to subscribe and wait for transaction (backport #17274)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17435"},"id":"PVTI_lADOAAN9684ABqEwzgIn_rs","labels":["C:CLI","conflicts"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"feat: add event-query-tx-for cmd to subscribe and wait for transaction (backport #17274)"},{"content":{"body":"This issue is aimed at removing the comet dependency in modules and other areas of the Cosmos SDK. \r\n\r\nWe would like to remove the dependence in order to allow teams to use the Cosmos SDK without needing to rely on comet as a dependency themself. Secondly this allows comet integration into the sdk and mainnets to be quicker and streamlined \r\n\r\n- [x] storage\r\n- [ ] auth\r\n- [x] authz\r\n- [x] accounts\r\n- [x] evidence\r\n- [x] circuit\r\n- [x] distribution\r\n- [ ] staking\r\n- [x] slashing\r\n- [ ] gov\r\n- [ ] upgrade\r\n- [ ] feegrant\r\n- [x] mint\r\n- [x] protocolpool\r\n","number":17425,"repository":"cosmos/cosmos-sdk","title":"Decouple Comet from modules and storage","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/17425"},"id":"PVTI_lADOAAN9684ABqEwzgIpSsY","labels":["C: comet","T:tech debt","C:server/v2"],"need":"Nice To Have","priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Decouple Comet from modules and storage"},{"assignees":["lucaslopezf"],"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\n`x/upgrade` maintains an increasing protocol version number, it's set to `BaseApp.appVersion`, but it's not passed to cometbft, so it's never shown in `http://127.0.0.1:26657/abci_info`, and not included in block header.\r\n\r\n## Problem Definition\r\n\r\n<!-- Why do we need this feature? \r\nWhat problems may be addressed by introducing this feature?\r\nWhat benefits does the SDK stand to gain by including this feature?\r\nAre there any disadvantages of including this feature? -->\r\n\r\n## Proposal\r\n\r\n- Initialize `BaseApp.appVersion` from `x/upgrade`'s current state.\r\n- Pass to cometbft through block delivery response when it's changed.","number":16455,"repository":"cosmos/cosmos-sdk","title":"[Feature]: pass protocol version to cometbft","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/16455"},"id":"PVTI_lADOAAN9684ABqEwzgIpS_c","labels":["T:feature-request","S:zondax"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","title":"[Feature]: pass protocol version to cometbft"},{"content":{"body":"## Summary of Bug\r\n\r\nI'm working on the ComsJS upgrade for testing against 0.47 backends. One existing test become unreliable for a gas multiplier of 1.3 (the default): A `/cosmos.feegrant.v1beta1.MsgGrantAllowance`.\r\n\r\nThe simulation passes but often the actual gas usage exceeds 1.3 * simulated gas. Until now, 1.3 has always been a reliable multiplier and is the default multiplier in CosmJS.\r\n\r\nLogs of the test:\r\n\r\n```\r\n      ‚úó works with feegrant granter (0.979 sec)\r\n        - Error: Error when broadcasting tx F46373FB6B9D3589274729D71DB106AEF9C297AC0149B0DEE392ACE2134A61DF at height 57. Code: 11; Raw log: \r\n        github.com/cosmos/cosmos-sdk/baseapp.newOutOfGasRecoveryMiddleware.func1\r\n                github.com/cosmos/cosmos-sdk@v0.47.0/baseapp/recovery.go:55\r\n        github.com/cosmos/cosmos-sdk/baseapp.newRecoveryMiddleware.func1\r\n                github.com/cosmos/cosmos-sdk@v0.47.0/baseapp/recovery.go:39\r\n        github.com/cosmos/cosmos-sdk/baseapp.processRecovery\r\n                github.com/cosmos/cosmos-sdk@v0.47.0/baseapp/recovery.go:28\r\n        github.com/cosmos/cosmos-sdk/baseapp.(*BaseApp).runTx.func1\r\n                github.com/cosmos/cosmos-sdk@v0.47.0/baseapp/baseapp.go:630\r\n        runtime.gopanic\r\n                runtime/panic.go:890\r\n        github.com/cosmos/cosmos-sdk/store/types.(*basicGasMeter).ConsumeGas\r\n                github.com/cosmos/cosmos-sdk@v0.47.0/store/types/gas.go:116\r\n        github.com/cosmos/cosmos-sdk/store/gaskv.(*Store).Set\r\n                github.com/cosmos/cosmos-sdk@v0.47.0/store/gaskv/store.go:53\r\n        github.com/cosmos/cosmos-sdk/x/feegrant/keeper.Keeper.GrantAllowance\r\n                github.com/cosmos/cosmos-sdk@v0.47.0/x/feegrant/keeper/keeper.go:114\r\n        github.com/cosmos/cosmos-sdk/x/feegrant/keeper.msgServer.GrantAllowance\r\n                github.com/cosmos/cosmos-sdk@v0.47.0/x/feegrant/keeper/msg_server.go:50\r\n        github.com/cosmos/cosmos-sdk/x/feegrant._Msg_GrantAllowance_Handler.func1\r\n                github.com/cosmos/cosmos-sdk@v0.47.0/x/feegrant/tx.pb.go:351\r\n        github.com/cosmos/cosmos-sdk/baseapp.(*MsgServiceRouter).RegisterService.func2.1\r\n                github.com/cosmos/cosmos-sdk@v0.47.0/baseapp/msg_service_router.go:113\r\n        github.com/cosmos/cosmos-sdk/x/feegrant._Msg_GrantAllowance_Handler\r\n                github.com/cosmos/cosmos-sdk@v0.47.0/x/feegrant/tx.pb.go:353\r\n        github.com/cosmos/cosmos-sdk/baseapp.(*MsgServiceRouter).RegisterService.func2\r\n                github.com/cosmos/cosmos-sdk@v0.47.0/baseapp/msg_service_router.go:121\r\n        github.com/cosmos/cosmos-sdk/baseapp.(*BaseApp).runMsgs\r\n                github.com/cosmos/cosmos-sdk@v0.47.0/baseapp/baseapp.go:789\r\n        github.com/cosmos/cosmos-sdk/baseapp.(*BaseApp).runTx\r\n                github.com/cosmos/cosmos-sdk@v0.47.0/baseapp/baseapp.go:732\r\n        github.com/cosmos/cosmos-sdk/baseapp.(*BaseApp).DeliverTx\r\n                github.com/cosmos/cosmos-sdk@v0.47.0/baseapp/abci.go:408\r\n        github.com/cometbft/cometbft/abci/client.(*localClient).DeliverTxAsync\r\n                github.com/cometbft/cometbft@v0.37.0/abci/client/local_client.go:82\r\n        github.com/cometbft/cometbft/proxy.(*appConnConsensus).DeliverTxAsync\r\n                github.com/cometbft/cometbft@v0.37.0/proxy/app_conn.go:106\r\n        github.com/cometbft/cometbft/state.execBlockOnProxyApp\r\n                github.com/cometbft/cometbft@v0.37.0/state/execution.go:376\r\n        github.com/cometbft/cometbft/state.(*BlockExecutor).ApplyBlock\r\n                github.com/cometbft/cometbft@v0.37.0/state/execution.go:197\r\n        github.com/cometbft/cometbft/consensus.(*State).finalizeCommit\r\n                github.com/cometbft/cometbft@v0.37.0/consensus/state.go:1700\r\n        github.com/cometbft/cometbft/consensus.(*State).tryFinalizeCommit\r\n                github.com/cometbft/cometbft@v0.37.0/consensus/state.go:1609\r\n        github.com/cometbft/cometbft/consensus.(*State).enterCommit.func1\r\n                github.com/cometbft/cometbft@v0.37.0/consensus/state.go:1544\r\n        github.com/cometbft/cometbft/consensus.(*State).enterCommit\r\n                github.com/cometbft/cometbft@v0.37.0/consensus/state.go:1582\r\n        github.com/cometbft/cometbft/consensus.(*State).addVote\r\n                github.com/cometbft/cometbft@v0.37.0/consensus/state.go:2213\r\n        github.com/cometbft/cometbft/consensus.(*State).tryAddVote\r\n                github.com/cometbft/cometbft@v0.37.0/consensus/state.go:2002\r\n        github.com/cometbft/cometbft/consensus.(*State).handleMsg\r\n                github.com/cometbft/cometbft@v0.37.0/consensus/state.go:861\r\n        github.com/cometbft/cometbft/consensus.(*State).receiveRoutine\r\n                github.com/cometbft/cometbft@v0.37.0/consensus/state.go:788\r\n        out of gas in location: WritePerByte; gasWanted: 53425, gasUsed: 56230: out of gas\r\n```\r\n\r\nwhere `gasWanted` is set to 1.3 times the simulated gas:\r\n\r\n- Estimated: 41096\r\n- gasWanted: 53425\r\n- gasUsed (at the time of error): 56230\r\n\r\nWhen increasing the multiplier to 2, I get a succeeding transaction with:\r\n\r\n- Estimated: 41096\r\n- Gas used: 56230 (137%)\r\n\r\n## Version\r\n\r\n`0.47.2-lfg.1` from `ghcr.io/cosmos/simapp`\r\n\r\n## Steps to Reproduce\r\n\r\nCreate MsgGrantAllowance transaction with a multiplier of 1.3.\r\n","number":16020,"repository":"cosmos/cosmos-sdk","title":"[Bug]: MsgGrantAllowance simulation is unprecise (0.45 -> 0.47 regression)","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/16020"},"id":"PVTI_lADOAAN9684ABqEwzgIpTVI","labels":["T:Bug","C:x/feegrant"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"false","sprint":"true","status":"üìã Backlog","story Type":"üêû Bug","title":"[Bug]: MsgGrantAllowance simulation is unprecise (0.45 -> 0.47 regression)"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nAs x/tx matures the CLI commands in x/auth/tx should be migrated there.\r\nRef: https://github.com/cosmos/cosmos-sdk/pull/15822#discussion_r1171022511\r\n","number":15888,"repository":"cosmos/cosmos-sdk","title":"Migrate CLI commands in x/auth/tx to comet txserver","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/15888"},"id":"PVTI_lADOAAN9684ABqEwzgIpTro","labels":["C:server/v2"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Migrate CLI commands in x/auth/tx to comet txserver"},{"assignees":["lucaslopezf"],"content":{"body":"## Context\r\n\r\nhttps://github.com/cosmos/cosmos-sdk/blob/c0eade17fe8665748f136133d50b889393e7c2de/x/mint/README.md?plain=1#L117-L118\r\n\r\n## Problem\r\n\r\nProvisions are used before they are described.\r\n\r\n## Proposal\r\n\r\nDescribe provisions. What are they? How do they relate to inflation? How much of the provisions get used per block? ","number":15887,"repository":"cosmos/cosmos-sdk","title":"Describe provisions before usage","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/15887"},"id":"PVTI_lADOAAN9684ABqEwzgIpTsM","labels":["T:Docs","S:zondax"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/21109"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"Describe provisions before usage"},{"content":{"body":"## Summary of Bug\r\n\r\nWhen testing the EstimateGas for stateful precompiles in Polaris (https://github.com/berachain/polaris) we experienced a strange phenonemum where the estimated gas when using a QueryContext vs the canonical DeliverStateContxt resulted in two different numbers for the consumed gas. For context, Polaris supports stateful precompile evm contracts, which allows for smart contracts in our EVM to call Cosmos-SDK modules directly, in this example we are using x/staking (and by proxy x/distribution). \r\n\r\nThis difference in rounding lead to situations where our Ethereum JSON-RPC's Estimate Gas was reporting a lower required gas then what is actually required to execute the transaction leading to failed transactions. Most notably this occurs when a user tries to call `delegate()`. Part of delegating to a validator in the SDK requires withdrawing outstanding rewards in order to allow the passive distribution math ot functional. Notably, on an alternating fashion, we saw that when using the QueryContext the pending rewards for a user was 0, leading to the following control flow to be skipped (https://github.com/cosmos/cosmos-sdk/blob/ba9d4df6d0d1e8b28631459090b50f8da6aa71b0/x/distribution/keeper/delegation.go#L170) The rewards being 0 (when they shouldnt be) causes the control flow to skip calling into the bank module and thus consumes less gas. This estimated gas is then utilized when the transaciton is submitted on chain, in which the outstanding is no 0, the control flow enters the bank module, consuming the extra gas and resulting in an evm out of gas error.\r\n\r\nHere is a link to the issue in our repo: https://github.com/berachain/polaris/issues/480\r\n\r\n@tac0turtle and I have chatted a bit and he thinks that it may be a caching issue with the QueryContext and/or the Root Multistore, but would love others thoughts on this for sure. \r\n\r\n## Version\r\nFrom our `go.mod`\r\n\r\n```\r\nmodule pkg.berachain.dev/polaris/cosmos\r\n\r\ngo 1.20\r\n\r\nreplace (\r\n\tcosmossdk.io/x/evidence => cosmossdk.io/x/evidence v0.0.0-20230305125317-672b052f323b\r\n\tcosmossdk.io/x/feegrant => cosmossdk.io/x/feegrant v0.0.0-20230305125317-672b052f323b\r\n\tgithub.com/cosmos/cosmos-sdk => github.com/cosmos/cosmos-sdk v0.46.0-beta2.0.20230305125317-672b052f323b\r\n\tgithub.com/docker/docker => github.com/docker/docker v20.10.3-0.20221013203545-33ab36d6b304+incompatible // 22.06 branch\r\n\t// Required for stateful precompiles and supporting the Ethereum JSON-RPC API.\r\n\tgithub.com/ethereum/go-ethereum => github.com/berachain/polaris-geth v0.0.0-20230320232033-db2035009c47\r\n\tgithub.com/syndtr/goleveldb => github.com/syndtr/goleveldb v1.0.1-0.20210819022825-2ae1ddf74ef7\r\n)\r\n\r\nrequire (\r\n\tcosmossdk.io/api v0.3.1\r\n\tcosmossdk.io/client/v2 v2.0.0-20230220152935-67f04e629623\r\n\tcosmossdk.io/core v0.6.0\r\n\tcosmossdk.io/depinject v1.0.0-alpha.3\r\n\tcosmossdk.io/errors v1.0.0-beta.7\r\n\tcosmossdk.io/log v0.0.0-20230305202224-89c956f8ed3a\r\n\tcosmossdk.io/math v1.0.0-beta.6.0.20230305125317-672b052f323b\r\n\tcosmossdk.io/simapp v0.0.0-20230305125317-672b052f323b\r\n\tcosmossdk.io/store v0.0.0-20230305125317-672b052f323b\r\n\tcosmossdk.io/tools/confix v0.0.0-20230227140543-7c9245dbdf19\r\n\tcosmossdk.io/x/evidence v0.1.0\r\n\tcosmossdk.io/x/feegrant v0.0.0-20230305125317-672b052f323b\r\n\tcosmossdk.io/x/upgrade v0.0.0-20230305125317-672b052f323b\r\n\t//........\r\n)\r\n```\r\n\r\n## Steps to Reproduce\r\n\r\n1. Clone Polaris, Setup dependecies and run `mage start` (this will start a chain)\r\n2. Run the following commands using foundry cast\r\n3. View the following result and the lack of inclusion in the EVM chains block. Due to out-of-gas error (which can be seen in the terminal logs for the chain)\r\n\r\n```\r\ncast estimate 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --from 0x20f33CE90A13a4b5E7697E3544c3083B8F8A51D4\r\n131760\r\ncast send 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --private-key 0xfffdbb37105441e14b0ee6330d855d8504ff39e705c3afa8f859ac9865f99306 --gas-limit 115000\r\n\r\nblockHash               0xe407faa1253ca2d916eb6a1f444dc404c6f4188db029b94d295a175d35a039c1\r\nblockNumber             248\r\ncontractAddress\r\ncumulativeGasUsed       115000\r\neffectiveGasPrice\r\ngasUsed                 115000\r\nlogs                    []\r\nlogsBloom               0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\r\nroot\r\nstatus                  0\r\ntransactionHash         0x30824d4a026fe2a30272f79180e6d9e2673d46a57eb4ee33be40d7b701cdde81\r\ntransactionIndex        0\r\ntype                    2\r\ncast estimate 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --from 0x20f33CE90A13a4b5E7697E3544c3083B8F8A51D4\r\n131760\r\ncast send 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --private-key 0xfffdbb37105441e14b0ee6330d855d8504ff39e705c3afa8f859ac9865f99306 --gas-limit 131760\r\n\r\nblockHash               0x2179de87b08ea53de72839b3dc913d4bf8fe860f0c2d72d04e57c00331f0dafe\r\nblockNumber             270\r\ncontractAddress\r\ncumulativeGasUsed       131760\r\neffectiveGasPrice\r\ngasUsed                 131760\r\nlogs                    [{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xcd91156b4607a66e03194df5423537108085ebd28cca92794de7e9c53bd4c1c7\",\"0x00000000000000000000000093354845030274cd4bf1686abd60ab28ec52e1a7\"],\"data\":\"0x00000000000000000000000000000000000000000000000000000000000000b9\",\"blockHash\":\"0xc65bec11ea5f2c9e25a2107578428410f47ec2c6adbc922661674ba51b6d9408\",\"blockNumber\":\"0x10e\",\"transactionHash\":\"0x8d495eff32d9885287cfc5308b03bde4065fee0de240131a7bbd81bd0c9e8829\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x0\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xb2217585c246e507e3fcadd4d32d0177479d19c83452fabed3d7650cac3b0420\",\"0x00000000000000000000000020f33ce90a13a4b5e7697e3544c3083b8f8a51d4\"],\"data\":\"0x00000000000000000000000000000000000000000000000000000000000000b9\",\"blockHash\":\"0xc65bec11ea5f2c9e25a2107578428410f47ec2c6adbc922661674ba51b6d9408\",\"blockNumber\":\"0x10e\",\"transactionHash\":\"0x8d495eff32d9885287cfc5308b03bde4065fee0de240131a7bbd81bd0c9e8829\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x1\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0x69ca02dd4edd7bf0a4abb9ed3b7af3f14778db5d61921c7dc7cd545266326de2\",\"0x00000000000000000000000020f33ce90a13a4b5e7697e3544c3083b8f8a51d4\"],\"data\":\"0x00000000000000000000000000000000000000000000000000000000000000b9\",\"blockHash\":\"0xc65bec11ea5f2c9e25a2107578428410f47ec2c6adbc922661674ba51b6d9408\",\"blockNumber\":\"0x10e\",\"transactionHash\":\"0x8d495eff32d9885287cfc5308b03bde4065fee0de240131a7bbd81bd0c9e8829\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x2\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0x516772d06520d23d2705f0b46a1fa6deec0ae36a2c00db049bd5f4094a123b85\",\"0x00000000000000000000000093354845030274cd4bf1686abd60ab28ec52e1a7\"],\"data\":\"0x\",\"blockHash\":\"0xc65bec11ea5f2c9e25a2107578428410f47ec2c6adbc922661674ba51b6d9408\",\"blockNumber\":\"0x10e\",\"transactionHash\":\"0x8d495eff32d9885287cfc5308b03bde4065fee0de240131a7bbd81bd0c9e8829\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x3\",\"removed\":false},{\"address\":\"0x93354845030274cd4bf1686abd60ab28ec52e1a7\",\"topics\":[\"0xaa1377f7ec93c239e959efa811f7b8554c036fd7a706c23e58024626a8f3db96\",\"0x000000000000000000000000cb6600d6ccdd50474926a955b920e91ec9eb4db1\"],\"data\":\"0x00000000000000000000000000000000000000000000000000000000000000b9\",\"blockHash\":\"0xc65bec11ea5f2c9e25a2107578428410f47ec2c6adbc922661674ba51b6d9408\",\"blockNumber\":\"0x10e\",\"transactionHash\":\"0x8d495eff32d9885287cfc5308b03bde4065fee0de240131a7bbd81bd0c9e8829\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x4\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xcd91156b4607a66e03194df5423537108085ebd28cca92794de7e9c53bd4c1c7\",\"0x00000000000000000000000020f33ce90a13a4b5e7697e3544c3083b8f8a51d4\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000007b\",\"blockHash\":\"0xc65bec11ea5f2c9e25a2107578428410f47ec2c6adbc922661674ba51b6d9408\",\"blockNumber\":\"0x10e\",\"transactionHash\":\"0x8d495eff32d9885287cfc5308b03bde4065fee0de240131a7bbd81bd0c9e8829\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x5\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xb2217585c246e507e3fcadd4d32d0177479d19c83452fabed3d7650cac3b0420\",\"0x0000000000000000000000004fea76427b8345861e80a3540a8a9d936fd39391\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000007b\",\"blockHash\":\"0xc65bec11ea5f2c9e25a2107578428410f47ec2c6adbc922661674ba51b6d9408\",\"blockNumber\":\"0x10e\",\"transactionHash\":\"0x8d495eff32d9885287cfc5308b03bde4065fee0de240131a7bbd81bd0c9e8829\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x6\",\"removed\":false},{\"address\":\"0xd9a998cac66092748ffec7cfbd155aae1737c2ff\",\"topics\":[\"0xb0d234274aef7a61aa5a2eb44c23881ebf46a068cccbd413c978bcbd555fe17f\",\"0x000000000000000000000000cb6600d6ccdd50474926a955b920e91ec9eb4db1\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000007b\",\"blockHash\":\"0xc65bec11ea5f2c9e25a2107578428410f47ec2c6adbc922661674ba51b6d9408\",\"blockNumber\":\"0x10e\",\"transactionHash\":\"0x8d495eff32d9885287cfc5308b03bde4065fee0de240131a7bbd81bd0c9e8829\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x7\",\"removed\":false}]\r\nlogsBloom               0x00000000000020000000000000000300000002000000000000000002800000002000000000020000000000000000000000280600000200000000000000000000000000000008800000000000800000000000000000000000000000000000040502000000200000000000000000000000000000000000000000000000000008000000000040000010000000200000000000000000000000000000000000000000000010080000000000000008000000000000000082000000000000000000000020000000000000000000000000000000000400000000000001800000000000000000000000000000000000000000000000200008000008000020000000000020\r\nroot\r\nstatus                  1\r\ntransactionHash         0x8d495eff32d9885287cfc5308b03bde4065fee0de240131a7bbd81bd0c9e8829\r\ntransactionIndex        0\r\ntype                    2\r\ncast send 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --private-key 0xfffdbb37105441e14b0ee6330d855d8504ff39e705c3afa8f859ac9865f99306 --gas-limit 131760\r\n\r\nblockHash               0xba4ba63e0cd97316f876d668abfb19944848e4d0dc0cff72e9075ad9903e657a\r\nblockNumber             276\r\ncontractAddress\r\ncumulativeGasUsed       131757\r\neffectiveGasPrice\r\ngasUsed                 131757\r\nlogs                    [{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xcd91156b4607a66e03194df5423537108085ebd28cca92794de7e9c53bd4c1c7\",\"0x00000000000000000000000093354845030274cd4bf1686abd60ab28ec52e1a7\"],\"data\":\"0x0000000000000000000000000000000000000000000000000000000000000013\",\"blockHash\":\"0xd775bdceed6afbcfee31a5718c41ff4369fc66ba2a7d32e31af69555d8c92c27\",\"blockNumber\":\"0x114\",\"transactionHash\":\"0x05378d01c90c20572b904bfe25239367cb4951e4b2e186f74e42c376b6baa7a5\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x0\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xb2217585c246e507e3fcadd4d32d0177479d19c83452fabed3d7650cac3b0420\",\"0x00000000000000000000000020f33ce90a13a4b5e7697e3544c3083b8f8a51d4\"],\"data\":\"0x0000000000000000000000000000000000000000000000000000000000000013\",\"blockHash\":\"0xd775bdceed6afbcfee31a5718c41ff4369fc66ba2a7d32e31af69555d8c92c27\",\"blockNumber\":\"0x114\",\"transactionHash\":\"0x05378d01c90c20572b904bfe25239367cb4951e4b2e186f74e42c376b6baa7a5\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x1\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0x69ca02dd4edd7bf0a4abb9ed3b7af3f14778db5d61921c7dc7cd545266326de2\",\"0x00000000000000000000000020f33ce90a13a4b5e7697e3544c3083b8f8a51d4\"],\"data\":\"0x0000000000000000000000000000000000000000000000000000000000000013\",\"blockHash\":\"0xd775bdceed6afbcfee31a5718c41ff4369fc66ba2a7d32e31af69555d8c92c27\",\"blockNumber\":\"0x114\",\"transactionHash\":\"0x05378d01c90c20572b904bfe25239367cb4951e4b2e186f74e42c376b6baa7a5\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x2\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0x516772d06520d23d2705f0b46a1fa6deec0ae36a2c00db049bd5f4094a123b85\",\"0x00000000000000000000000093354845030274cd4bf1686abd60ab28ec52e1a7\"],\"data\":\"0x\",\"blockHash\":\"0xd775bdceed6afbcfee31a5718c41ff4369fc66ba2a7d32e31af69555d8c92c27\",\"blockNumber\":\"0x114\",\"transactionHash\":\"0x05378d01c90c20572b904bfe25239367cb4951e4b2e186f74e42c376b6baa7a5\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x3\",\"removed\":false},{\"address\":\"0x93354845030274cd4bf1686abd60ab28ec52e1a7\",\"topics\":[\"0xaa1377f7ec93c239e959efa811f7b8554c036fd7a706c23e58024626a8f3db96\",\"0x000000000000000000000000cb6600d6ccdd50474926a955b920e91ec9eb4db1\"],\"data\":\"0x0000000000000000000000000000000000000000000000000000000000000013\",\"blockHash\":\"0xd775bdceed6afbcfee31a5718c41ff4369fc66ba2a7d32e31af69555d8c92c27\",\"blockNumber\":\"0x114\",\"transactionHash\":\"0x05378d01c90c20572b904bfe25239367cb4951e4b2e186f74e42c376b6baa7a5\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x4\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xcd91156b4607a66e03194df5423537108085ebd28cca92794de7e9c53bd4c1c7\",\"0x00000000000000000000000020f33ce90a13a4b5e7697e3544c3083b8f8a51d4\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000007b\",\"blockHash\":\"0xd775bdceed6afbcfee31a5718c41ff4369fc66ba2a7d32e31af69555d8c92c27\",\"blockNumber\":\"0x114\",\"transactionHash\":\"0x05378d01c90c20572b904bfe25239367cb4951e4b2e186f74e42c376b6baa7a5\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x5\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xb2217585c246e507e3fcadd4d32d0177479d19c83452fabed3d7650cac3b0420\",\"0x0000000000000000000000004fea76427b8345861e80a3540a8a9d936fd39391\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000007b\",\"blockHash\":\"0xd775bdceed6afbcfee31a5718c41ff4369fc66ba2a7d32e31af69555d8c92c27\",\"blockNumber\":\"0x114\",\"transactionHash\":\"0x05378d01c90c20572b904bfe25239367cb4951e4b2e186f74e42c376b6baa7a5\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x6\",\"removed\":false},{\"address\":\"0xd9a998cac66092748ffec7cfbd155aae1737c2ff\",\"topics\":[\"0xb0d234274aef7a61aa5a2eb44c23881ebf46a068cccbd413c978bcbd555fe17f\",\"0x000000000000000000000000cb6600d6ccdd50474926a955b920e91ec9eb4db1\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000007b\",\"blockHash\":\"0xd775bdceed6afbcfee31a5718c41ff4369fc66ba2a7d32e31af69555d8c92c27\",\"blockNumber\":\"0x114\",\"transactionHash\":\"0x05378d01c90c20572b904bfe25239367cb4951e4b2e186f74e42c376b6baa7a5\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x7\",\"removed\":false}]\r\nlogsBloom               0xr\nroot\r\nstatus                  1\r\ntransactionHash         0x05378d01c90c20572b904bfe25239367cb4951e4b2e186f74e42c376b6baa7a5\r\ntransactionIndex        0\r\ntype                    2\r\ncast send 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --private-key 0xfffdbb37105441e14b0ee6330d855d8504ff39e705c3afa8f859ac9865f99306 --gas-limit 131760\r\n\r\nblockHash               0x651138af5cd9147091001604286c174aa9c8180175101da6474aa5c35a202d37\r\nblockNumber             279\r\ncontractAddress\r\ncumulativeGasUsed       131757\r\neffectiveGasPrice\r\ngasUsed                 131757\r\nlogs                    [{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xcd91156b4607a66e03194df5423537108085ebd28cca92794de7e9c53bd4c1c7\",\"0x00000000000000000000000093354845030274cd4bf1686abd60ab28ec52e1a7\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000000c\",\"blockHash\":\"0x737215ecc3f8558cc9346c9f8833b050eccbe49c8401a1b17e61335d5a812194\",\"blockNumber\":\"0x117\",\"transactionHash\":\"0x4861d52e8dc47cdb92487fd8c4b20881d3a235c99cf00c3cd59e8c3cf4655fa9\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x0\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xb2217585c246e507e3fcadd4d32d0177479d19c83452fabed3d7650cac3b0420\",\"0x00000000000000000000000020f33ce90a13a4b5e7697e3544c3083b8f8a51d4\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000000c\",\"blockHash\":\"0x737215ecc3f8558cc9346c9f8833b050eccbe49c8401a1b17e61335d5a812194\",\"blockNumber\":\"0x117\",\"transactionHash\":\"0x4861d52e8dc47cdb92487fd8c4b20881d3a235c99cf00c3cd59e8c3cf4655fa9\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x1\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0x69ca02dd4edd7bf0a4abb9ed3b7af3f14778db5d61921c7dc7cd545266326de2\",\"0x00000000000000000000000020f33ce90a13a4b5e7697e3544c3083b8f8a51d4\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000000c\",\"blockHash\":\"0x737215ecc3f8558cc9346c9f8833b050eccbe49c8401a1b17e61335d5a812194\",\"blockNumber\":\"0x117\",\"transactionHash\":\"0x4861d52e8dc47cdb92487fd8c4b20881d3a235c99cf00c3cd59e8c3cf4655fa9\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x2\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0x516772d06520d23d2705f0b46a1fa6deec0ae36a2c00db049bd5f4094a123b85\",\"0x00000000000000000000000093354845030274cd4bf1686abd60ab28ec52e1a7\"],\"data\":\"0x\",\"blockHash\":\"0x737215ecc3f8558cc9346c9f8833b050eccbe49c8401a1b17e61335d5a812194\",\"blockNumber\":\"0x117\",\"transactionHash\":\"0x4861d52e8dc47cdb92487fd8c4b20881d3a235c99cf00c3cd59e8c3cf4655fa9\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x3\",\"removed\":false},{\"address\":\"0x93354845030274cd4bf1686abd60ab28ec52e1a7\",\"topics\":[\"0xaa1377f7ec93c239e959efa811f7b8554c036fd7a706c23e58024626a8f3db96\",\"0x000000000000000000000000cb6600d6ccdd50474926a955b920e91ec9eb4db1\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000000c\",\"blockHash\":\"0x737215ecc3f8558cc9346c9f8833b050eccbe49c8401a1b17e61335d5a812194\",\"blockNumber\":\"0x117\",\"transactionHash\":\"0x4861d52e8dc47cdb92487fd8c4b20881d3a235c99cf00c3cd59e8c3cf4655fa9\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x4\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xcd91156b4607a66e03194df5423537108085ebd28cca92794de7e9c53bd4c1c7\",\"0x00000000000000000000000020f33ce90a13a4b5e7697e3544c3083b8f8a51d4\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000007b\",\"blockHash\":\"0x737215ecc3f8558cc9346c9f8833b050eccbe49c8401a1b17e61335d5a812194\",\"blockNumber\":\"0x117\",\"transactionHash\":\"0x4861d52e8dc47cdb92487fd8c4b20881d3a235c99cf00c3cd59e8c3cf4655fa9\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x5\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xb2217585c246e507e3fcadd4d32d0177479d19c83452fabed3d7650cac3b0420\",\"0x0000000000000000000000004fea76427b8345861e80a3540a8a9d936fd39391\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000007b\",\"blockHash\":\"0x737215ecc3f8558cc9346c9f8833b050eccbe49c8401a1b17e61335d5a812194\",\"blockNumber\":\"0x117\",\"transactionHash\":\"0x4861d52e8dc47cdb92487fd8c4b20881d3a235c99cf00c3cd59e8c3cf4655fa9\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x6\",\"removed\":false},{\"address\":\"0xd9a998cac66092748ffec7cfbd155aae1737c2ff\",\"topics\":[\"0xb0d234274aef7a61aa5a2eb44c23881ebf46a068cccbd413c978bcbd555fe17f\",\"0x000000000000000000000000cb6600d6ccdd50474926a955b920e91ec9eb4db1\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000007b\",\"blockHash\":\"0x737215ecc3f8558cc9346c9f8833b050eccbe49c8401a1b17e61335d5a812194\",\"blockNumber\":\"0x117\",\"transactionHash\":\"0x4861d52e8dc47cdb92487fd8c4b20881d3a235c99cf00c3cd59e8c3cf4655fa9\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x7\",\"removed\":false}]\r\nlogsBloom               0xr\nroot\r\nstatus                  1\r\ntransactionHash         0x4861d52e8dc47cdb92487fd8c4b20881d3a235c99cf00c3cd59e8c3cf4655fa9\r\ntransactionIndex        0\r\ntype                    2\r\ncast estimate 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --from 0x20f33CE90A13a4b5E7697E3544c3083B8F8A51D4\r\n114407\r\ncast estimate 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --from 0x20f33CE90A13a4b5E7697E3544c3083B8F8A51D4\r\n114407\r\ncast estimate 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --from 0x20f33CE90A13a4b5E7697E3544c3083B8F8A51D4\r\n114407\r\ncast estimate 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --from 0x20f33CE90A13a4b5E7697E3544c3083B8F8A51D4\r\n114407\r\ncast send 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --private-key 0xfffdbb37105441e14b0ee6330d855d8504ff39e705c3afa8f859ac9865f99306 --gas-limit 131760\r\n\r\nblockHash               0x76d9947e6ff06d8c6a46c29388cc248c15e1509aea811be2ef4c42bb1495db94\r\nblockNumber             294\r\ncontractAddress\r\ncumulativeGasUsed       131760\r\neffectiveGasPrice\r\ngasUsed                 131760\r\nlogs                    [{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xcd91156b4607a66e03194df5423537108085ebd28cca92794de7e9c53bd4c1c7\",\"0x00000000000000000000000093354845030274cd4bf1686abd60ab28ec52e1a7\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000004a\",\"blockHash\":\"0x99dbf1a3bb70bf4334dcaf241f9f72ea7107833053b931af7cfc6464776eeacf\",\"blockNumber\":\"0x126\",\"transactionHash\":\"0xf9d63374fd87cbe1c481230e7c1421e6a8d68201629bc932f47baef49072ea72\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x0\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xb2217585c246e507e3fcadd4d32d0177479d19c83452fabed3d7650cac3b0420\",\"0x00000000000000000000000020f33ce90a13a4b5e7697e3544c3083b8f8a51d4\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000004a\",\"blockHash\":\"0x99dbf1a3bb70bf4334dcaf241f9f72ea7107833053b931af7cfc6464776eeacf\",\"blockNumber\":\"0x126\",\"transactionHash\":\"0xf9d63374fd87cbe1c481230e7c1421e6a8d68201629bc932f47baef49072ea72\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x1\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0x69ca02dd4edd7bf0a4abb9ed3b7af3f14778db5d61921c7dc7cd545266326de2\",\"0x00000000000000000000000020f33ce90a13a4b5e7697e3544c3083b8f8a51d4\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000004a\",\"blockHash\":\"0x99dbf1a3bb70bf4334dcaf241f9f72ea7107833053b931af7cfc6464776eeacf\",\"blockNumber\":\"0x126\",\"transactionHash\":\"0xf9d63374fd87cbe1c481230e7c1421e6a8d68201629bc932f47baef49072ea72\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x2\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0x516772d06520d23d2705f0b46a1fa6deec0ae36a2c00db049bd5f4094a123b85\",\"0x00000000000000000000000093354845030274cd4bf1686abd60ab28ec52e1a7\"],\"data\":\"0x\",\"blockHash\":\"0x99dbf1a3bb70bf4334dcaf241f9f72ea7107833053b931af7cfc6464776eeacf\",\"blockNumber\":\"0x126\",\"transactionHash\":\"0xf9d63374fd87cbe1c481230e7c1421e6a8d68201629bc932f47baef49072ea72\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x3\",\"removed\":false},{\"address\":\"0x93354845030274cd4bf1686abd60ab28ec52e1a7\",\"topics\":[\"0xaa1377f7ec93c239e959efa811f7b8554c036fd7a706c23e58024626a8f3db96\",\"0x000000000000000000000000cb6600d6ccdd50474926a955b920e91ec9eb4db1\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000004a\",\"blockHash\":\"0x99dbf1a3bb70bf4334dcaf241f9f72ea7107833053b931af7cfc6464776eeacf\",\"blockNumber\":\"0x126\",\"transactionHash\":\"0xf9d63374fd87cbe1c481230e7c1421e6a8d68201629bc932f47baef49072ea72\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x4\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xcd91156b4607a66e03194df5423537108085ebd28cca92794de7e9c53bd4c1c7\",\"0x00000000000000000000000020f33ce90a13a4b5e7697e3544c3083b8f8a51d4\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000007b\",\"blockHash\":\"0x99dbf1a3bb70bf4334dcaf241f9f72ea7107833053b931af7cfc6464776eeacf\",\"blockNumber\":\"0x126\",\"transactionHash\":\"0xf9d63374fd87cbe1c481230e7c1421e6a8d68201629bc932f47baef49072ea72\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x5\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xb2217585c246e507e3fcadd4d32d0177479d19c83452fabed3d7650cac3b0420\",\"0x0000000000000000000000004fea76427b8345861e80a3540a8a9d936fd39391\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000007b\",\"blockHash\":\"0x99dbf1a3bb70bf4334dcaf241f9f72ea7107833053b931af7cfc6464776eeacf\",\"blockNumber\":\"0x126\",\"transactionHash\":\"0xf9d63374fd87cbe1c481230e7c1421e6a8d68201629bc932f47baef49072ea72\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x6\",\"removed\":false},{\"address\":\"0xd9a998cac66092748ffec7cfbd155aae1737c2ff\",\"topics\":[\"0xb0d234274aef7a61aa5a2eb44c23881ebf46a068cccbd413c978bcbd555fe17f\",\"0x000000000000000000000000cb6600d6ccdd50474926a955b920e91ec9eb4db1\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000007b\",\"blockHash\":\"0x99dbf1a3bb70bf4334dcaf241f9f72ea7107833053b931af7cfc6464776eeacf\",\"blockNumber\":\"0x126\",\"transactionHash\":\"0xf9d63374fd87cbe1c481230e7c1421e6a8d68201629bc932f47baef49072ea72\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x7\",\"removed\":false}]\r\nlogsBloom               0xr\nroot\r\nstatus                  1\r\ntransactionHash         0xf9d63374fd87cbe1c481230e7c1421e6a8d68201629bc932f47baef49072ea72\r\ntransactionIndex        0\r\ntype                    2\r\ncast estimate 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --from 0x20f33CE90A13a4b5E7697E3544c3083B8F8A51D4\r\n114407\r\ncast send 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --private-key 0xfffdbb37105441e14b0ee6330d855d8504ff39e705c3afa8f859ac9865f99306 --gas-limit 115000\r\n\r\nblockHash               0x49d42df0de59c719f9cc39eb4947d7b9877427e3dd49994b6edce17a77199c2d\r\nblockNumber             305\r\ncontractAddress\r\ncumulativeGasUsed       115000\r\neffectiveGasPrice\r\ngasUsed                 115000\r\nlogs                    []\r\nlogsBloom               0xr\nroot\r\nstatus                  0\r\ntransactionHash         0x31f7e064f42c7cd1ba47e7ba754ef1a36bca817f19262caac5584d69165f67bb\r\ntransactionIndex        0\r\ntype                    2\r\ncast estimate 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --from 0x20f33CE90A13a4b5E7697E3544c3083B8F8A51D4\r\n131757\r\ncast estimate 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --from 0x20f33CE90A13a4b5E7697E3544c3083B8F8A51D4\r\n131757\r\ncast send 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --private-key 0xfffdbb37105441e14b0ee6330d855d8504ff39e705c3afa8f859ac9865f99306 --gas-limit 115000\r\n\r\nblockHash               0xc2532c010b6dc54b334a61d94decaa96d588e5e1947059e36dfda73c46e07b5b\r\nblockNumber             434\r\ncontractAddress\r\ncumulativeGasUsed       115000\r\neffectiveGasPrice\r\ngasUsed                 115000\r\nlogs                    []\r\nlogsBloom               0xr\nroot\r\nstatus                  0\r\ntransactionHash         0x6bf0714bdb921932580424a4cc97dfc3950be83071483c3ea27d93bca615b7a5\r\ntransactionIndex        0\r\ntype                    2\r\ncast estimate 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --from 0x20f33CE90A13a4b5E7697E3544c3083B8F8A51D4\r\n131760\r\ncast send 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --private-key 0xfffdbb37105441e14b0ee6330d855d8504ff39e705c3afa8f859ac9865f99306 --gas-limit 155000\r\n\r\nblockHash               0xd8298fb5ddf32975108b4daffb2c3150f55094eaa0aa3fee133cfd52d30e765f\r\nblockNumber             442\r\ncontractAddress\r\ncumulativeGasUsed       131760\r\neffectiveGasPrice\r\ngasUsed                 131760\r\nlogs                    [{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xcd91156b4607a66e03194df5423537108085ebd28cca92794de7e9c53bd4c1c7\",\"0x00000000000000000000000093354845030274cd4bf1686abd60ab28ec52e1a7\"],\"data\":\"0x0000000000000000000000000000000000000000000000000000000000000356\",\"blockHash\":\"0xa09d33b39f315fa706861d78d74aab8552b3e9062a5c1bb3f285fcd9484c30e7\",\"blockNumber\":\"0x1ba\",\"transactionHash\":\"0x024e97524e1c6e907ebb2812a6d8e5db9073c57d1b8251bb67bb8170dc817890\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x0\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xb2217585c246e507e3fcadd4d32d0177479d19c83452fabed3d7650cac3b0420\",\"0x00000000000000000000000020f33ce90a13a4b5e7697e3544c3083b8f8a51d4\"],\"data\":\"0x0000000000000000000000000000000000000000000000000000000000000356\",\"blockHash\":\"0xa09d33b39f315fa706861d78d74aab8552b3e9062a5c1bb3f285fcd9484c30e7\",\"blockNumber\":\"0x1ba\",\"transactionHash\":\"0x024e97524e1c6e907ebb2812a6d8e5db9073c57d1b8251bb67bb8170dc817890\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x1\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0x69ca02dd4edd7bf0a4abb9ed3b7af3f14778db5d61921c7dc7cd545266326de2\",\"0x00000000000000000000000020f33ce90a13a4b5e7697e3544c3083b8f8a51d4\"],\"data\":\"0x0000000000000000000000000000000000000000000000000000000000000356\",\"blockHash\":\"0xa09d33b39f315fa706861d78d74aab8552b3e9062a5c1bb3f285fcd9484c30e7\",\"blockNumber\":\"0x1ba\",\"transactionHash\":\"0x024e97524e1c6e907ebb2812a6d8e5db9073c57d1b8251bb67bb8170dc817890\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x2\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0x516772d06520d23d2705f0b46a1fa6deec0ae36a2c00db049bd5f4094a123b85\",\"0x00000000000000000000000093354845030274cd4bf1686abd60ab28ec52e1a7\"],\"data\":\"0x\",\"blockHash\":\"0xa09d33b39f315fa706861d78d74aab8552b3e9062a5c1bb3f285fcd9484c30e7\",\"blockNumber\":\"0x1ba\",\"transactionHash\":\"0x024e97524e1c6e907ebb2812a6d8e5db9073c57d1b8251bb67bb8170dc817890\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x3\",\"removed\":false},{\"address\":\"0x93354845030274cd4bf1686abd60ab28ec52e1a7\",\"topics\":[\"0xaa1377f7ec93c239e959efa811f7b8554c036fd7a706c23e58024626a8f3db96\",\"0x000000000000000000000000cb6600d6ccdd50474926a955b920e91ec9eb4db1\"],\"data\":\"0x0000000000000000000000000000000000000000000000000000000000000356\",\"blockHash\":\"0xa09d33b39f315fa706861d78d74aab8552b3e9062a5c1bb3f285fcd9484c30e7\",\"blockNumber\":\"0x1ba\",\"transactionHash\":\"0x024e97524e1c6e907ebb2812a6d8e5db9073c57d1b8251bb67bb8170dc817890\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x4\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xcd91156b4607a66e03194df5423537108085ebd28cca92794de7e9c53bd4c1c7\",\"0x00000000000000000000000020f33ce90a13a4b5e7697e3544c3083b8f8a51d4\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000007b\",\"blockHash\":\"0xa09d33b39f315fa706861d78d74aab8552b3e9062a5c1bb3f285fcd9484c30e7\",\"blockNumber\":\"0x1ba\",\"transactionHash\":\"0x024e97524e1c6e907ebb2812a6d8e5db9073c57d1b8251bb67bb8170dc817890\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x5\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xb2217585c246e507e3fcadd4d32d0177479d19c83452fabed3d7650cac3b0420\",\"0x0000000000000000000000004fea76427b8345861e80a3540a8a9d936fd39391\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000007b\",\"blockHash\":\"0xa09d33b39f315fa706861d78d74aab8552b3e9062a5c1bb3f285fcd9484c30e7\",\"blockNumber\":\"0x1ba\",\"transactionHash\":\"0x024e97524e1c6e907ebb2812a6d8e5db9073c57d1b8251bb67bb8170dc817890\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x6\",\"removed\":false},{\"address\":\"0xd9a998cac66092748ffec7cfbd155aae1737c2ff\",\"topics\":[\"0xb0d234274aef7a61aa5a2eb44c23881ebf46a068cccbd413c978bcbd555fe17f\",\"0x000000000000000000000000cb6600d6ccdd50474926a955b920e91ec9eb4db1\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000007b\",\"blockHash\":\"0xa09d33b39f315fa706861d78d74aab8552b3e9062a5c1bb3f285fcd9484c30e7\",\"blockNumber\":\"0x1ba\",\"transactionHash\":\"0x024e97524e1c6e907ebb2812a6d8e5db9073c57d1b8251bb67bb8170dc817890\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x7\",\"removed\":false}]\r\nlogsBloom               0xr\nroot\r\nstatus                  1\r\ntransactionHash         0x024e97524e1c6e907ebb2812a6d8e5db9073c57d1b8251bb67bb8170dc817890\r\ntransactionIndex        0\r\ntype                    2\r\ncast estimate 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --from 0x20f33CE90A13a4b5E7697E3544c3083B8F8A51D4\r\n114470\r\ncast send 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --private-key 0xfffdbb37105441e14b0ee6330d855d8504ff39e705c3afa8f859ac9865f99306 --gas-limit 117000\r\n\r\nblockHash               0x7615b6ca3cee0d7f9f81d2c6589e7fbb3baf49a43cea2ad0a85e4b3abd890d6d\r\nblockNumber             454\r\ncontractAddress\r\ncumulativeGasUsed       117000\r\neffectiveGasPrice\r\ngasUsed                 117000\r\nlogs                    []\r\nlogsBloom               0xr\nroot\r\nstatus                  0\r\ntransactionHash         0x1aeba2283d9112a77ebb520cceb0afcf201a8ade951e5cbeb093bc697932bb9c\r\ntransactionIndex        0\r\ntype                    2\r\ncast estimate 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --from 0x20f33CE90A13a4b5E7697E3544c3083B8F8A51D4\r\n131820\r\ncast send 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --private-key 0xfffdbb37105441e14b0ee6330d855d8504ff39e705c3afa8f859ac9865f99306 --gas-limit 155000\r\n\r\nblockHash               0xfe1c37d2f847f7fe0c9655b629b2dcc2f926b1cf6430d503296d4839fcd61850\r\nblockNumber             469\r\ncontractAddress\r\ncumulativeGasUsed       131823\r\neffectiveGasPrice\r\ngasUsed                 131823\r\nlogs                    [{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xcd91156b4607a66e03194df5423537108085ebd28cca92794de7e9c53bd4c1c7\",\"0x00000000000000000000000093354845030274cd4bf1686abd60ab28ec52e1a7\"],\"data\":\"0x00000000000000000000000000000000000000000000000000000000000000b2\",\"blockHash\":\"0xcb8d806c83df955e234f14addb0e66935ab11bff3bfb0de7140673574d69d007\",\"blockNumber\":\"0x1d5\",\"transactionHash\":\"0xeca5504a756b696011f4203e067307e8f43475eb09fbe066462502f9dff40aa6\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x0\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xb2217585c246e507e3fcadd4d32d0177479d19c83452fabed3d7650cac3b0420\",\"0x00000000000000000000000020f33ce90a13a4b5e7697e3544c3083b8f8a51d4\"],\"data\":\"0x00000000000000000000000000000000000000000000000000000000000000b2\",\"blockHash\":\"0xcb8d806c83df955e234f14addb0e66935ab11bff3bfb0de7140673574d69d007\",\"blockNumber\":\"0x1d5\",\"transactionHash\":\"0xeca5504a756b696011f4203e067307e8f43475eb09fbe066462502f9dff40aa6\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x1\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0x69ca02dd4edd7bf0a4abb9ed3b7af3f14778db5d61921c7dc7cd545266326de2\",\"0x00000000000000000000000020f33ce90a13a4b5e7697e3544c3083b8f8a51d4\"],\"data\":\"0x00000000000000000000000000000000000000000000000000000000000000b2\",\"blockHash\":\"0xcb8d806c83df955e234f14addb0e66935ab11bff3bfb0de7140673574d69d007\",\"blockNumber\":\"0x1d5\",\"transactionHash\":\"0xeca5504a756b696011f4203e067307e8f43475eb09fbe066462502f9dff40aa6\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x2\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0x516772d06520d23d2705f0b46a1fa6deec0ae36a2c00db049bd5f4094a123b85\",\"0x00000000000000000000000093354845030274cd4bf1686abd60ab28ec52e1a7\"],\"data\":\"0x\",\"blockHash\":\"0xcb8d806c83df955e234f14addb0e66935ab11bff3bfb0de7140673574d69d007\",\"blockNumber\":\"0x1d5\",\"transactionHash\":\"0xeca5504a756b696011f4203e067307e8f43475eb09fbe066462502f9dff40aa6\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x3\",\"removed\":false},{\"address\":\"0x93354845030274cd4bf1686abd60ab28ec52e1a7\",\"topics\":[\"0xaa1377f7ec93c239e959efa811f7b8554c036fd7a706c23e58024626a8f3db96\",\"0x000000000000000000000000cb6600d6ccdd50474926a955b920e91ec9eb4db1\"],\"data\":\"0x00000000000000000000000000000000000000000000000000000000000000b2\",\"blockHash\":\"0xcb8d806c83df955e234f14addb0e66935ab11bff3bfb0de7140673574d69d007\",\"blockNumber\":\"0x1d5\",\"transactionHash\":\"0xeca5504a756b696011f4203e067307e8f43475eb09fbe066462502f9dff40aa6\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x4\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xcd91156b4607a66e03194df5423537108085ebd28cca92794de7e9c53bd4c1c7\",\"0x00000000000000000000000020f33ce90a13a4b5e7697e3544c3083b8f8a51d4\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000007b\",\"blockHash\":\"0xcb8d806c83df955e234f14addb0e66935ab11bff3bfb0de7140673574d69d007\",\"blockNumber\":\"0x1d5\",\"transactionHash\":\"0xeca5504a756b696011f4203e067307e8f43475eb09fbe066462502f9dff40aa6\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x5\",\"removed\":false},{\"address\":\"0x4381dc2ab14285160c808659aee005d51255add7\",\"topics\":[\"0xb2217585c246e507e3fcadd4d32d0177479d19c83452fabed3d7650cac3b0420\",\"0x0000000000000000000000004fea76427b8345861e80a3540a8a9d936fd39391\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000007b\",\"blockHash\":\"0xcb8d806c83df955e234f14addb0e66935ab11bff3bfb0de7140673574d69d007\",\"blockNumber\":\"0x1d5\",\"transactionHash\":\"0xeca5504a756b696011f4203e067307e8f43475eb09fbe066462502f9dff40aa6\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x6\",\"removed\":false},{\"address\":\"0xd9a998cac66092748ffec7cfbd155aae1737c2ff\",\"topics\":[\"0xb0d234274aef7a61aa5a2eb44c23881ebf46a068cccbd413c978bcbd555fe17f\",\"0x000000000000000000000000cb6600d6ccdd50474926a955b920e91ec9eb4db1\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000007b\",\"blockHash\":\"0xcb8d806c83df955e234f14addb0e66935ab11bff3bfb0de7140673574d69d007\",\"blockNumber\":\"0x1d5\",\"transactionHash\":\"0xeca5504a756b696011f4203e067307e8f43475eb09fbe066462502f9dff40aa6\",\"transactionIndex\":\"0x0\",\"logIndex\":\"0x7\",\"removed\":false}]\r\nlogsBloom               0xr\nroot\r\nstatus                  1\r\ntransactionHash         0xeca5504a756b696011f4203e067307e8f43475eb09fbe066462502f9dff40aa6\r\ntransactionIndex        0\r\ntype                    2\r\ncast estimate 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --from 0x20f33CE90A13a4b5E7697E3544c3083B8F8A51D4\r\n114482\r\ncast send 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --private-key 0xfffdbb37105441e14b0ee6330d855d8504ff39e705c3afa8f859ac9865f99306 --gas-limit 129000\r\n\r\nblockHash               0x6eca5d7601ee7993a47a8fdfe37ef3af818b8638b185728ff814b86350f121af\r\nblockNumber             477\r\ncontractAddress\r\ncumulativeGasUsed       129000\r\neffectiveGasPrice\r\ngasUsed                 129000\r\nlogs                    []\r\nlogsBloom               0xr\nroot\r\nstatus                  0\r\ntransactionHash         0x4dd8c0e3fc4539c3b487dac0c8a0ee926c29fa7b9d5bfb9ce54c09fe6ac52bed\r\ntransactionIndex        0\r\ntype                    2\r\ncast estimate 0xd9A998CaC66092748FfEc7cFBD155Aae1737C2fF \"delegate(address,uint256)\" 0xcB6600d6cCdd50474926A955B920E91eC9Eb4Db1 123 --from 0x20f33CE90A13a4b5E7697E3544c3083B8F8A51D4\r\n131832\r\n```\r\n","number":15533,"repository":"cosmos/cosmos-sdk","title":"bug(store,x/distribution): Rounding error in rewards claim when using QueryContext.","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/15533"},"id":"PVTI_lADOAAN9684ABqEwzgIpUAk","labels":["C:Store"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"bug(store,x/distribution): Rounding error in rewards claim when using QueryContext."},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Please also ensure that this is not a duplicate issue :)  \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n<!--\r\nIMPORTANT: Prior to opening a bug report, check if it affects one of the core modules\r\nand if its elegible for a bug bounty on `SECURITY.md`. Bugs that are not submitted\r\nthrough the appropriate channels won't receive any bounty.\r\n -->\r\n\r\n## Summary of Bug\r\n\r\nThere's an [extra semi-colon](https://github.com/cosmos/cosmos-sdk/blob/release/v0.46.x/proto/cosmos/tx/v1beta1/service.proto#L53) in the proto file on the release/v0.46.x line (fixed on main/v0.47)\r\n\r\n## Version\r\n\r\n`release/v0.46.x`\r\n\r\n## Steps to Reproduce\r\n\r\nUsing [stake.tax](https://github.com/hodgerpodger/staketaxcsv) you can use any chain on the v0.46.x release line, use the cli to generate csv and you'll run into the error: `strconv.ParseInt: parsing \"ORDER_BY_DESC\": invalid syntax'`. This can be fixed on stake.tax by using `2` instead of `ORDER_BY_DESC`. I believe removing the extra semi-colon will allow the enum to be properly parsed again\r\n\r\nPlease add a test for this workflow since dependencies use this functionality\r\n","number":15437,"repository":"cosmos/cosmos-sdk","title":"Improperly formatted proto file causes ORDER_BY_DESC enum to be parsed incorrectly","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/15437"},"id":"PVTI_lADOAAN9684ABqEwzgIpUC8","labels":["T: Tests"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Improperly formatted proto file causes ORDER_BY_DESC enum to be parsed incorrectly"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nWith ABCI++, the application can now define and power it's own mempool. \r\n\r\n## Problem Definition\r\n\r\nWhen designing the integration of ABCI++, we never considered the barrier between the mempool and the gRPC layer, i.e. exposing any insight into the contents and perhaps telemetry of the mempool.\r\n\r\nShould we expand the `Mempool` interface to expose some sort of query method and write a gRPC query with a pagination request?\r\n\r\n## Proposal\r\n\r\n* Expand the `Mempool` interface to support a `Query` method\r\n* Implement a gRPC method\r\n\r\nAlternatively, given that mempools can vary in shapes and sizes, we leave this up to the application.\r\n\r\ncc @kocubinski @tac0turtle \r\n","number":15240,"repository":"cosmos/cosmos-sdk","title":"Expose Mempool Txs ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/15240"},"id":"PVTI_lADOAAN9684ABqEwzgIpUME","labels":["C:ABCI","C: mempool"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/15290"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Expose Mempool Txs "},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Please also ensure that this is not a duplicate issue :)  \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n<!--\r\nIMPORTANT: Prior to opening a bug report, check if it affects one of the core modules\r\nand if its elegible for a bug bounty on `SECURITY.md`. Bugs that are not submitted\r\nthrough the appropriate channels won't receive any bounty.\r\n -->\r\n\r\n## Summary of Bug\r\nwe have a module renamed, just renamed:\r\n- old-module\r\n- new-module\r\n\r\nToday we ran an automatic upgrade using the `x/upgrade` module.\r\n```\r\nstore.StoreUpgrades{\r\n\tRenamed: []store.StoreRename{\r\n\t\t{\r\n\t\t\tOldKey: \"old-module\",\r\n\t\t\tNewKey: \"new-module\",\r\n\t\t},\r\n\t},\r\n}\r\n```\r\nAfter the upgrade, we found that `new-module` data has been created, but get nothing when execute the query command since the data version is lower than current height.\r\nwe debug the upgrade and found some thread:\r\n\r\n1. We found `new-module data` version is lower than `old-module data` when excuted the `moveKVStoreData`.  And `old-module data` jsut have one data.\r\n> - new-module data version is 0\r\n> - old-module data is current height\r\nhttps://github.com/cosmos/cosmos-sdk/blob/90272e3b46a0b877cc7fa26e9b6e09d980eea686/store/rootmulti/store.go#L305-L316\r\n\r\n2. After the upgrade, we found `new-module data` is replaced to `&Store{tree: &immutableTree{&iavl.ImmutableTree{}}}` when we execute the query command since the version checked invalid.\r\nhttps://github.com/cosmos/cosmos-sdk/blob/90272e3b46a0b877cc7fa26e9b6e09d980eea686/store/iavl/store.go#L91-L104\r\n\r\n<!-- Concisely describe the issue -->\r\n\r\n## Version\r\nv0.44.2\r\n<!-- git commit hash or release version -->\r\n\r\n## Steps to Reproduce\r\n1. Start a chain based on the old-module.\r\n2. Submit an upgrade proposal for height 75.\r\n3. Wait until the height is reached and the chain stoped.\r\n4. Start the new chain based on the new-module and executed the upgrade plan.\r\n<!-- What commands in order should someone run to reproduce your problem? -->\r\n____\r\n\r\n## For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":11928,"repository":"cosmos/cosmos-sdk","title":"x/upgrade excuted renamed module not working","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/11928"},"id":"PVTI_lADOAAN9684ABqEwzgIpZ0M","labels":["T:Bug","C:x/upgrade"],"priority ":"Medium","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üêû Bug","title":"x/upgrade excuted renamed module not working"},{"assignees":["julienrbrt"],"content":{"body":"This is an automatic backport of pull request #17334 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17524,"repository":"cosmos/cosmos-sdk","title":"fix(x/authz): GetAuthorizations (backport #17334)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17524"},"id":"PVTI_lADOAAN9684ABqEwzgIw-5Q","labels":["C:x/authz"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix(x/authz): GetAuthorizations (backport #17334)"},{"content":{"body":"This is an automatic backport of pull request #17544 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17548,"repository":"cosmos/cosmos-sdk","title":"docs: update x/group create-proposal to submit-proposal (backport #17544)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17548"},"id":"PVTI_lADOAAN9684ABqEwzgIygy0","labels":["C:x/group"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"docs: update x/group create-proposal to submit-proposal (backport #17544)"},{"content":{"body":"This is an automatic backport of pull request #17546 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17551,"repository":"cosmos/cosmos-sdk","title":"docs(x/group): fix submit-proposal help json example (backport #17546)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17551"},"id":"PVTI_lADOAAN9684ABqEwzgIyixM","labels":["C:CLI","C:x/group"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"docs(x/group): fix submit-proposal help json example (backport #17546)"},{"content":{"body":"This is an automatic backport of pull request #17559 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17590,"repository":"cosmos/cosmos-sdk","title":"docs: improve DeductFeeDecorator godoc (backport #17559)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17590"},"id":"PVTI_lADOAAN9684ABqEwzgI5e3U","labels":["C:x/auth"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"docs: improve DeductFeeDecorator godoc (backport #17559)"},{"content":{"body":"This is an automatic backport of pull request #17635 done by [Mergify](https://mergify.com).\nCherry-pick of 01b8be0c8449472819ea979bbf2a312c3412453a has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-17635\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 01b8be0c8.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   client/config/config.go\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17637,"repository":"cosmos/cosmos-sdk","title":"fix: typo in comment (backport #17635)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17637"},"id":"PVTI_lADOAAN9684ABqEwzgJBJUE","labels":["C:CLI"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"fix: typo in comment (backport #17635)"},{"assignees":["tac0turtle"],"content":{"body":"The following issue tracks the issue to ensure docs are all up to date and aligning with the main sdk repo part of the revamp [epic ](https://github.com/cosmos/cosmos-sdk/issues/15705)\r\n\r\nhttps://github.com/cosmos/cosmos-sdk/issues/17642","number":18,"repository":"cosmos/cosmos-sdk-docs","title":"feat: script to copy across updated files from `main_repo`","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk-docs/pull/18"},"id":"PVTI_lADOAAN9684ABqEwzgJCrUE","labels":["documentation"],"repository":"https://github.com/cosmos/cosmos-sdk-docs","title":"feat: script to copy across updated files from `main_repo`"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nCreate a meaningful test for returning app_hash from InitChain after an upgrade\r\n\r\n## Problem Definition\r\n\r\nAfter https://github.com/cosmos/cosmos-sdk/issues/7020 & https://github.com/cosmos/cosmos-sdk/pull/7208, InitChain returns the app_hash to Tendermint.\r\n\r\nFor a fresh chain, the app_hash is `sha256(\"\")`. This use case is tested.\r\nFor an upgrade, app_hash is the last commitID. This use case is not tested.\r\n\r\n## Proposal\r\n\r\nAdd a test case (ideally an integration test) that would look like:\r\n- launch a chain\r\n- wait a couple of blocks\r\n- stop the chain, do an upgrade\r\n- run the upgraded chain (with same store)\r\n- expected: the upgraded chain should call InitChain, and return the last commitID of the store.\r\n\r\n____\r\n\r\n#### For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":7283,"repository":"cosmos/cosmos-sdk","title":"Create test for returning non-empty app_hash from InitChain","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/7283"},"id":"PVTI_lADOAAN9684ABqEwzgJJH2A","labels":["T: Tests"],"priority ":"Low","quarter":"Q2","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚öôÔ∏è Chore","title":"Create test for returning non-empty app_hash from InitChain"},{"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nA-7\r\n\r\nRelates to https://github.com/cosmos/cosmos-sdk/pull/17794, but targets v0.47.\r\nStore is its own go.mod on main.\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] added `!` to the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-intro.md)\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] updated the relevant documentation or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] run `make lint` and `make test`\r\n* [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] confirmed all author checklist items have been addressed \r\n* [ ] reviewed state machine logic\r\n* [ ] reviewed API design and naming\r\n* [ ] reviewed documentation is accurate\r\n* [ ] reviewed tests and test coverage\r\n* [ ] manually tested (if applicable)\r\n","number":17817,"repository":"cosmos/cosmos-sdk","title":"refactor(store): add missing error checks in store","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17817"},"id":"PVTI_lADOAAN9684ABqEwzgJWr4g","labels":["C:Store"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"refactor(store): add missing error checks in store"},{"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nA-25\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] added `!` to the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-intro.md)\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] updated the relevant documentation or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] run `make lint` and `make test`\r\n* [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] confirmed all author checklist items have been addressed \r\n* [ ] reviewed state machine logic\r\n* [ ] reviewed API design and naming\r\n* [ ] reviewed documentation is accurate\r\n* [ ] reviewed tests and test coverage\r\n* [ ] manually tested (if applicable)\r\n","number":17901,"repository":"cosmos/cosmos-sdk","title":"chore: remove duplicate check ","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17901"},"id":"PVTI_lADOAAN9684ABqEwzgJhbQY","labels":["C:x/auth"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"chore: remove duplicate check "},{"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nCloses: #XXXX\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] added `!` to the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-intro.md)\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] updated the relevant documentation or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] run `make lint` and `make test`\r\n* [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] confirmed all author checklist items have been addressed \r\n* [ ] reviewed state machine logic\r\n* [ ] reviewed API design and naming\r\n* [ ] reviewed documentation is accurate\r\n* [ ] reviewed tests and test coverage\r\n* [ ] manually tested (if applicable)\r\n","number":17902,"repository":"cosmos/cosmos-sdk","title":"chore: remove tip posthandler ","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17902"},"id":"PVTI_lADOAAN9684ABqEwzgJhblU","labels":["C:x/auth"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"chore: remove tip posthandler "},{"content":{"body":"This is an automatic backport of pull request #17903 done by [Mergify](https://mergify.com).\nCherry-pick of 6ac0abde37f1f784635f59225f9a915853140762 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-17903\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 6ac0abde3.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   x/auth/keeper/grpc_query.go\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17906,"repository":"cosmos/cosmos-sdk","title":"chore(auth): return accId in error (backport #17903)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17906"},"id":"PVTI_lADOAAN9684ABqEwzgJhit0","labels":["C:x/auth"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"chore(auth): return accId in error (backport #17903)"},{"content":{"body":"This is an automatic backport of pull request #17900 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":17908,"repository":"cosmos/cosmos-sdk","title":"chore(store): check value (backport #17900)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/17908"},"id":"PVTI_lADOAAN9684ABqEwzgJhkfU","labels":["C:Store"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"title":"chore(store): check value (backport #17900)"},{"content":{"body":"# Summary\r\n\r\nThe recent custom `Any` support with `InterfaceRegistry` and `UnpackInterfacesMessage` could use a little tidying up:\r\n\r\n- [x] #6147: describe usage of the `RegisterInterface` `protoName` param and`accepts_interface` & `implements_interface` proto extensions in ADR 019\r\n- [ ] `UnpackInterfacesMessage` is an ugly name, let's rename it to something better. Maybe `PostUnmarshaler` or some variation of `Rehydrate`?\r\n- [ ] With the `accepts_interface` proto extension we can implement this using codegen. This is not high priority but would be nice in the future\r\n- [ ] Implement static linting of `accepts_interface`, `implements_interface` together with `protoName`\r\n\r\n/cc @alexanderbez @jgimeno ","number":6226,"repository":"cosmos/cosmos-sdk","title":"Cleanup UnpackInterfacesMessage functionality","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/6226"},"id":"PVTI_lADOAAN9684ABqEwzgJumww","labels":["C: Proto"],"milestone":{"description":"Features that are planned but not yet tagged with a specific release","dueOn":"","title":"Feature Backlog"},"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Cleanup UnpackInterfacesMessage functionality"},{"content":{"body":"In the protofiles of the sdk, we frequently use the gogoproto jsontag option, this should be removed as it breaks the jsonpb specification (proto fields have their own json name). \r\n\r\nThis becomes particularly important as the `jsonpb` package gives us free proto to json transcoding.\r\n\r\nDoing this change, would allow us to generate the required transcoding at runtime without the usage of the grpc-gateway. ","number":8952,"repository":"cosmos/cosmos-sdk","title":"proto: remove the usage of jsontag","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/8952"},"id":"PVTI_lADOAAN9684ABqEwzgJupOE","labels":["T: API Breaking"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"proto: remove the usage of jsontag"},{"content":{"body":"This is an automatic backport of pull request #18006 done by [Mergify](https://mergify.com).\nCherry-pick of b170ccc459f28edd467e6318534d971bbde4438f has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-18006\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit b170ccc45.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   x/staking/keeper/msg_server.go\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":18012,"repository":"cosmos/cosmos-sdk","title":"chore(staking): add delegator to events (backport #18006)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18012"},"id":"PVTI_lADOAAN9684ABqEwzgJxXdc","labels":["C:x/staking"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"chore(staking): add delegator to events (backport #18006)"},{"assignees":["JulianToledano"],"content":{"body":"## Summary\r\n\r\nRemove global bech32 prefixes and the rest of the global config before v1.0 (see #7421).\r\n\r\n## Problem Definition\r\n\r\nGlobal config variables are generally a bad design decision. And in interchain world having more flexibility around bech32 prefixes is probably desirable.\r\n\r\nIf we are targeting a v1.0 release at some point, we likely want to remove the global `Config` and do something better that allows us to keep the core SDK minimal, well-designed and the other parts modular.\r\n\r\n#7242 likely brings us closer to being able to do this because address parsing is now happening inside handlers rather than at the encoding level.\r\n\r\n## Proposal\r\n\r\n- [x] Remove bech32 https://github.com/cosmos/cosmos-sdk/issues/9690 / https://github.com/cosmos/cosmos-sdk/issues/13140\r\n- [ ] Remove sdk.Config\r\n\r\n<details>\r\n  <summary>See initial proposal</summary>\r\n  \r\nIn #7242, addresses are now parsed manually using `sdk.AccAddressFromBech32`, etc. Instead we can either pass the parameters into keepers (like we do for codecs) or attach them to `sdk.Context` and maybe decode address using `ctx.AccAddressFromBech32` in keepers and handlers.\r\n\r\nAlso we may consider removing `ValAddress` and `ConsAddress` from `types/` as they are specific to x/staking.\r\n</details>\r\n\r\n\r\n\r\n\r\n____\r\n\r\n#### For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":7448,"repository":"cosmos/cosmos-sdk","title":"Refactor global sdk.Config ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/7448"},"id":"PVTI_lADOAAN9684ABqEwzgJyCUM","labels":["C:Crypto","S:zondax"],"milestone":{"description":"Features that are planned but not yet tagged with a specific release","dueOn":"","title":"Feature Backlog"},"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","title":"Refactor global sdk.Config "},{"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nEarlier, we couldn't bump ledger-cosmos-go in SDK v0.47 because it would have been api breaking, see https://github.com/cosmos/cosmos-sdk/pull/18097#issuecomment-1759031418\r\n\r\nZondax remediated to that by creating a v.0.12.3 with the same fix: https://github.com/cosmos/ledger-cosmos-go/releases/tag/v0.12.3\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] added `!` to the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-intro.md)\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] updated the relevant documentation or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] run `make lint` and `make test`\r\n* [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] confirmed all author checklist items have been addressed \r\n* [ ] reviewed state machine logic\r\n* [ ] reviewed API design and naming\r\n* [ ] reviewed documentation is accurate\r\n* [ ] reviewed tests and test coverage\r\n* [ ] manually tested (if applicable)\r\n","number":18105,"repository":"cosmos/cosmos-sdk","title":"build(deps): bump cosmos/ledger-cosmos-go to v0.12.3 in v0.47","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18105"},"id":"PVTI_lADOAAN9684ABqEwzgJ3p_0","labels":["backport/0.46.x"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"build(deps): bump cosmos/ledger-cosmos-go to v0.12.3 in v0.47"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nThis issue is to discuss an idea that would allow us to give better feedback to users that interact with cosmwasm contracts (ref: https://github.com/CosmWasm/wasmd/issues/1122)\r\n\r\nWhen a message fails, only the anteEvents are provided in the response. This feature would allow modules to submit events of a certain type (error-events) that will be copied to the parent context when discarding a CacheContext. \r\n\r\n## Problem Definition\r\n\r\nWhen a message fails only the ante handler events and the error message is returned to the user. We should be able to add context by emitting error-events. This is particularly useful for cosmwasm. \r\n\r\nWasmd allows contracts to initialte submessages and receive the reply. Since events are not part of concensus there are no determinism guarantees on them, which is why wasmd removes the events before sending the respons back to the caller contract. Error details and logs are also removed because of non-determinism concerns.\r\n\r\nThis makes it very difficult for contract to provide proper error information back to users. For example, if contract A calls contract B, and B fails in message validation (say, invalid sender). No error is provided back to contract A, and so that contract can only fail with a generic error: \"Submessage X call failed\". A specific case of this can be found in https://github.com/osmosis-labs/affiliate-swap. \r\n\r\nAdding this feature would allow any module to provide context information to users in case of errors. \r\n\r\nThe tradeoff is having to ensure events are copied to the parent context when a CacheContext is discarded\r\n\r\n## Proposal\r\n\r\nGive cache CacheContext a `writeErrorEvents()` (or similar) function that allows the caller to decide if those should be kept.\r\n\r\nThis would need to be properly handled in runTxs and and runMsgs in baseapp, but then each module can decide if they want to provide error-events for context or not.  \r\n","number":16174,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Allow failing messages to emit error-events","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/16174"},"id":"PVTI_lADOAAN9684ABqEwzgJ_piQ","labels":["T:feature-request","C:server/v2"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/16522"],"priority ":"High","repository":"https://github.com/cosmos/cosmos-sdk","size":"Medium (2-3 Weeks)","status":"üìã Backlog","title":"[Feature]: Allow failing messages to emit error-events"},{"assignees":["tac0turtle","julienrbrt"],"content":{"body":"This is an automatic backport of pull request #18042 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":18208,"repository":"cosmos/cosmos-sdk","title":"refactor(x/authz): extend validate genesis (backport #18042)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18208"},"id":"PVTI_lADOAAN9684ABqEwzgKGe9g","labels":["C:x/authz"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"refactor(x/authz): extend validate genesis (backport #18042)"},{"assignees":["facundomedica"],"content":{"body":"This is an automatic backport of pull request #17352 done by [Mergify](https://mergify.com).\nCherry-pick of 658a88a30991d05ae6386f21834a4058584ab863 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-17352\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 658a88a30.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   math/int.go\n\tmodified:   math/int_test.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   math/CHANGELOG.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":18215,"repository":"cosmos/cosmos-sdk","title":"fix(math): defend NewIntFromBigInt argument mutation (backport #17352)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18215"},"id":"PVTI_lADOAAN9684ABqEwzgKGolc","labels":["conflicts"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"fix(math): defend NewIntFromBigInt argument mutation (backport #17352)"},{"content":{"body":"This is an automatic backport of pull request #18210 done by [Mergify](https://mergify.com).\nCherry-pick of 458dd044b9caf6c57eae101b1ca7b5695f496fe7 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-18210\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 458dd044b.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   x/upgrade/keeper/keeper.go\n\tmodified:   x/upgrade/keeper/keeper_test.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   x/upgrade/keeper/msg_server.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":18230,"repository":"cosmos/cosmos-sdk","title":"chore(x/upgrade): Use ValidateBasic for Plan in ReadUpgradeInfoFromDisk (backport #18210)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18230"},"id":"PVTI_lADOAAN9684ABqEwzgKIOyM","labels":["C:x/upgrade"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"chore(x/upgrade): Use ValidateBasic for Plan in ReadUpgradeInfoFromDisk (backport #18210)"},{"assignees":["tac0turtle","hieuvubk"],"content":{"body":"While spinning out modules from the cosmos sdk go.mod we introduced module imports into the cosmos sdk. We need to remove these. \r\n\r\n- [ ] Baseapp\r\n- [ ] Client (marko)\r\n- [ ] Server\r\n- [ ] Testutils","number":18290,"repository":"cosmos/cosmos-sdk","title":"remove cosmossdk.io/x/* dependence in the root go module","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18290"},"id":"PVTI_lADOAAN9684ABqEwzgKPkV0","labels":["T: Tests","dependencies"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20066","https://github.com/cosmos/cosmos-sdk/pull/20121"],"need":"Nice To Have","priority ":"High","quarter":"Q2","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"remove cosmossdk.io/x/* dependence in the root go module"},{"assignees":["tac0turtle"],"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\n<!-- Short, concise description of the proposed feature -->\r\n\r\n## Problem Definition\r\n\r\n<!-- Why do we need this feature? \r\nWhat problems may be addressed by introducing this feature?\r\nWhat benefits does the SDK stand to gain by including this feature?\r\nAre there any disadvantages of including this feature? -->\r\nFor a TX, when it is called through abci to deliverTx and checkTx, verification of the signature is used. However, it was found through pprof that the performance overhead of verifying the signature is still significant.\r\nTo save performance, the result of verifying the signature for the same TX can be cached during the first verification. This way, when the signature is needed for verification again, no decrypting and encrypting operations need to be performed, thereby saving performance.\r\n\r\n## Proposal\r\n\r\n<!-- Detailed description of requirements of implementation -->\r\nThe code change is relatively simple, and this Pull-Request can be used as a reference.\r\nhttps://github.com/cosmos/cosmos-sdk/pull/15778/files\r\n\r\n![image](https://user-images.githubusercontent.com/7297559/199190826-1e3e5126-e744-44dc-bb83-f54226a7d5e5.png)\r\nhttps://github.com/okex","number":15780,"repository":"cosmos/cosmos-sdk","title":"[Feature]: add SignatureCache for checkTx and DeliverTx","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/15780"},"id":"PVTI_lADOAAN9684ABqEwzgKgOzw","labels":["T: Performance","C:Crypto","T:feature-request"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/18422"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","title":"[Feature]: add SignatureCache for checkTx and DeliverTx"},{"assignees":["tac0turtle","julienrbrt"],"content":{"body":"# Additional features for gov module\r\n\r\nSee https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-069-gov-improvements.md for a more actual design.\r\n\r\n---\r\n\r\nBelow is the original issue of @CosmosCar\r\n\r\n## Context\r\n\r\nThe OGP wants to implement the following features into the current gov module\r\n\r\n- optimistic proposal\r\n- multiple choice proposal\r\n- batched proposal\r\n## Ideas and solutions\r\n\r\nSince we‚Äôre incoperating these features to the gov module, let‚Äôs first take a look at the current state of the gov module\r\n\r\n### Current Gov Module\r\n\r\n- The gov module supports the processing of different types of binary proposal with customizable execution logic (what to do if the proposal passes). Though, it has a fixed workflows for every proposal.\r\n\r\n- The workflow of a gov proposal can be divided in a few steps below:\r\n\r\n    1. Proposal submission: Proposal is submitted to the blockchain with a deposit.\r\n    2. Vote: Once deposit reaches a certain value (`MinDeposit`), proposal is confirmed and vote opens. Vote options here include Yes, No, Abstain and No with Veto.\r\n    3. Tally: Once voting period ends. The gov module will tally all the votes and output a tally result. The tally result will be `passed` if the `quorum` and yes threshold is reached.\r\n    4. Execution: If the tally result of the proposal is `passed`, the execution logic for the proposal is triggered.\r\n- Note that the execution logic is different for each proposal type.\r\n\r\nNow let‚Äôs look at how to implement optimistic proposal and multiple choice proposal.\r\n\r\n### Optimistic proposal\r\n\r\n- Optimistic proposal is described as below:\r\n\r\n```\r\nUnder Optimistic Voting, proposals pass by default after\r\n\r\nthe predetermined voting period unless vetoed above a \r\ngiven threshold by token holders (both the voting period \r\nand veto threshold will be predetermined by token \r\nholders). If the \"veto threshold\" is met, the vote is \r\nrejected and moves to the Standard Proposal voting \r\nprocess. If the \"veto threshold\" is not met, the proposal \r\npasses and can be enacted by a pre-authorized entity. \r\n```\r\n- From the description, we can sketch out the workflow of optimistic proposal:\r\n\r\n    1. Proposal submission: The proposal is submited by a whitelisted address with a deposit.\r\n    2. Vote: Once deposit reaches a certain value (`MinDeposit`), proposal is confirmed and vote opens. The only vote option is Veto.\r\n    3. Tally: Once voting period ends, all the votes are tallied. The tally result will be `passed` if veto threshold is not met.\r\n    4. Execution: If the tally result of the proposal is `passed`, the execution logic for proposal is triggered, else the proposal will be moved to step 2 of the normal workflow.\r\n- Apparently, optimistic proposal can‚Äôt be implemented as a new unique proposal type (like community fund proposal, text proposal etc) because we can only customize the execution logic not the fixed workflow. Hence, we need to redesign the gov module so that many different workflow is supported. This allows the gov module to be much more versatile as proposal can choose to be processed with the workflow that suits its purpose.\r\n\r\n- The optimistic workflow is adaptable for every existing proposals as it can handle all type of proposal with binary output.\r\n\r\n### Multiple choice proposal\r\n\r\n- Similarly, multiple choice proposal needs a different workflow than the normal workflow because of the differences in the vote, tally and execution step. This means it cannot be implemented as a proposal type.\r\n\r\n- Multiple choice proposal also shouldn‚Äôt be implemented as a workflow like the optimistic because:\r\n\r\n    - Unlike optimistic proposal, this workflow isn‚Äôt adaptable by any of the current proposal types as they‚Äôre are binary proposal.\r\n    - There should be a clear seperation between binary and multiple choice proposal. The two are inherently different from each other, if one is multiple choice it cannot be binary and vice versa.\r\n\r\n- Therefore, we should make multiple choice proposal into an entirely new archtype to be distinguished with the current binary proposal. The multiple choice archtype has the following characteristic:\r\n\r\n    - The vote is customizable for each proposal of the multiple choice archtype. Example: If I submit a multiple choice text proposal, I can customize the votes for my proposal.\r\n\r\n    - The tally result is dependent on how the votes is defines meaning a proposal can have many possible tally result instead of just `passed` or `failed`\r\n\r\n### Conclusion\r\n\r\n- I propose we redesign the gov module so that there‚Äôre two archtype of proposal, one is binary the other is multiple choice.\r\n- For each of the archtype, there could be many workflows to handle proposals of that archtype. Every proposal belong to the archtype can freely choose whatever workflow that suitable. Example: A binary text proposal can choose either optimistic workflow or the normal workflow cuz both workflows are for binary proposals.","number":17781,"repository":"cosmos/cosmos-sdk","title":"Additional features for gov module","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/17781"},"end":"2023-12-13","id":"PVTI_lADOAAN9684ABqEwzgKmXrY","labels":["C:x/gov","T:feature-request"],"priority ":"Medium","project":"Gov","repository":"https://github.com/cosmos/cosmos-sdk","start":"2023-11-13","status":"ü•≥ Done","story Type":"üëë Epic","title":"Additional features for gov module"},{"assignees":["julienrbrt"],"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgEguUw","title":"ADR Optimistic Proposal","type":"DraftIssue"},"end":"2023-11-22","id":"PVTI_lADOAAN9684ABqEwzgKmYOo","priority ":"High","project":"Gov","start":"2023-11-15","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"ADR Optimistic Proposal"},{"assignees":["julienrbrt"],"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgEgubE","title":"ADR Multiple Choice","type":"DraftIssue"},"end":"2023-11-29","id":"PVTI_lADOAAN9684ABqEwzgKmYb8","priority ":"High","project":"Gov","start":"2023-11-23","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"ADR Multiple Choice"},{"assignees":["tac0turtle","julienrbrt"],"content":{"body":"- [ ] Proposal type optimistic Proposals\n- [ ] Voting \n- [ ] Documentation\n- [ ] Testing\n\nCloses: https://github.com/cosmos/cosmos-sdk/issues/12824","id":"DI_lADOAAN9684ABqEwzgEgudc","title":"Optimistic Proposal Implmentation","type":"DraftIssue"},"end":"2023-12-09","id":"PVTI_lADOAAN9684ABqEwzgKmYgs","priority ":"Medium","project":"Gov","start":"2023-12-02","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"Optimistic Proposal Implmentation"},{"assignees":["julienrbrt","tac0turtle"],"content":{"body":"- [ ] Proposal type for multiple choice\n- [ ] Voting \n- [ ] Documentation\n- [ ] Testing","id":"DI_lADOAAN9684ABqEwzgEgudw","title":"Multiple Choice Voting","type":"DraftIssue"},"end":"2023-12-18","id":"PVTI_lADOAAN9684ABqEwzgKmYhw","priority ":"Medium","project":"Gov","start":"2023-12-09","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"Multiple Choice Voting"},{"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgEgupk","title":"Wallet Integration Coordination","type":"DraftIssue"},"end":"2023-12-28","id":"PVTI_lADOAAN9684ABqEwzgKmZAQ","priority ":"Low","project":"Gov","start":"2023-12-19","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"Wallet Integration Coordination"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nCurrently the API server needs to get the chain-id when its being started. (I do not know why) \r\nRelevant code: https://github.com/cosmos/cosmos-sdk/blob/main/server/start.go#L526-L535\r\n\r\nThe way it currently gets this is by unmarshalling the tendermint genesis, and reading it from there.\r\n\r\n@tac0turtle has pointed out [here](https://github.com/cosmos/cosmos-sdk/pull/16238/files#r1200247214) that neither the genesis or the config is a reliable location to get the chain-id.\r\n\r\n## Problem Definition\r\n\r\nWe need to find a better way to get the chain-ID in the API server, or understand when/where the API server actually needs to have the chain-id.\r\n\r\nI do not have a candidate proposal in mind. I think we can break the problem into two parts though:\r\n\r\n- What is the true reliable source of chain-id\r\n- How do we set that on the API server. Is it available at instantiation time, or must it be done later?","number":16247,"repository":"cosmos/cosmos-sdk","title":"[refactor]: Start API server, how to get the chain-ID","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/16247"},"id":"PVTI_lADOAAN9684ABqEwzgKmcsA","labels":["T:feature-request"],"priority ":"Low","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[refactor]: Start API server, how to get the chain-ID"},{"assignees":["cool-develope"],"content":{"body":"We need to implement a new snapshot manager (SM) for state syncing in the store v2 package. It should define the state storage snapshot struct and redesign the snapshot flow in terms of service considering the pruning manager.\r\n\r\n```[tasklist]\r\n### Tasks\r\n- [x] Design the SM lifecycle and implement the PoC\r\n- [x] Detail design of snaptshot format and export/import\r\n- [x] SS backends integration\r\n- [x] SC backends integration\r\n```\r\n","number":18329,"repository":"cosmos/cosmos-sdk","title":"Snapshot Manager","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18329"},"id":"PVTI_lADOAAN9684ABqEwzgKmfZs","labels":["C:Store"],"priority ":"High","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"Snapshot Manager"},{"assignees":["alexanderbez"],"content":{"body":"Implement a multi-tree (i.e. a store key/SC tree per module) version of a `RootStore`. Note, we already have a single tree variant, which we hope new chains will use and existing chains will migrate to. However, some chains may wish to avoid migration and so we should provide a `RootStore` implementation that is congruent with the current store v1 RMS.","number":18226,"repository":"cosmos/cosmos-sdk","title":"Implement (Multi) RootStore (RS)","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18226"},"id":"PVTI_lADOAAN9684ABqEwzgKmfbk","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/18330"],"priority ":"High","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"Implement (Multi) RootStore (RS)"},{"assignees":["tac0turtle"],"content":{"body":"Currently if a module wants to specialise to support a specific runtime it will be required to accept an additional service to properly serve that runtime. This makes the code fail at runtime and also can become hard to maintain in the longterm. \r\n\r\nInstead we could define the `header.Service`¬† and `Header`¬† as generic interfaces. A module can then decide if to specialise for a specific runtime, and be able to use the concrete type which implements the header. \r\n\r\nA module which wants to be agnostic to the runtime can instead still use the generic interface. \r\n\r\nFull example:\r\n\r\n```go\r\n// Header defines a generic header interface.\r\ntype Header interface {\r\n\tGetHeight() uint64  // GetHeight returns the height of the block\r\n\tGetHash() []byte    // GetHash returns the hash of the block header\r\n\tGetTime() time.Time // GetTime returns the time of the block\r\n\tGetChainID() string // GetChainID returns the chain ID of the chain\r\n\tGetAppHash() []byte // GetAppHash used in the current block header\r\n}\r\n\r\n// Service defines the interface in which you can get header information,\r\n// given the execution context.\r\ntype Service[H Header] interface {\r\n\tGetHeader(ctx context.Context) H\r\n}\r\ntype CelestiaHeader struct {\r\n\tSomethingCelestiaSpecific string\r\n}\r\n\r\n// CelestiaHeader implements the Header interface.\r\nfunc (c CelestiaHeader) GetHeight() uint64 {}\r\nfunc (c CelestiaHeader) GetHash() []byte {}\r\nfunc (c CelestiaHeader) GetTime() time.Time {}\r\nfunc (c CelestiaHeader) GetChainID() string {}\r\nfunc (c CelestiaHeader) GetAppHash() []byte {}\r\n\r\n// Specialises Service to be CelestiaHeader.\r\nfunc CelestiaModuleFunction(hs Service[CelestiaHeader], ctx context.Context) {\r\n\tcelestiaHeader := hs.GetHeader(ctx)\r\n\tlog.Printf(\"I am using a celestia header specific thing: %s\", celestiaHeader.SomethingCelestiaSpecific)\r\n}\r\n\r\n// It's generic towards the Header.\r\nfunc RuntimeAgnosticModule[H Header](hs Service[H], ctx context.Context) {\r\n\tagnosticHeader := hs.GetHeader(ctx)\r\n\tlog.Printf(\"runtime agnostic so, only use the interface of the header and not the concrete type: %s \", agnosticHeader.GetTime())\r\n}\r\n\r\n```","number":17135,"repository":"cosmos/cosmos-sdk","title":"feat(core/header): Consider using a Generic interface instead of a non generic one to define header service and header.","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/17135"},"id":"PVTI_lADOAAN9684ABqEwzgKmhek","priority ":"Low","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","size":"Large (3-6 weeks)","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"feat(core/header): Consider using a Generic interface instead of a non generic one to define header service and header."},{"content":{"body":"## Summary\r\n\r\n`client.TxBuilder` and it's implementation (`x/auth/tx.wrapper`) are badly implemented: \r\n* We can't easily observe a state of TxBuilder\r\n* Client signing (`client/tx.Sign`) functionality is twisted and requires a use of external object (txFactory) which may be in conflict with `txBuilder` state. \r\n* Using builder and factory at the same time is error prone.\r\n\r\nContext:\r\n* https://github.com/cosmos/cosmos-sdk/pull/8106#discussion_r539683271\r\n* https://github.com/cosmos/cosmos-sdk/pull/8106#issuecomment-741228311\r\n\r\n## Proposal\r\n\r\nUsage of `txBuilder` should be investigated.\r\nRedesign `client.TxBuilder` interface and reimplement `tx.wrapper` .\r\n\r\n____\r\n\r\n#### For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":8138,"repository":"cosmos/cosmos-sdk","title":"Rework client.TxBuilder","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/8138"},"id":"PVTI_lADOAAN9684ABqEwzgKmj_k","labels":["T: API Breaking","C:Crypto","T: Dev UX","T: Client UX","S:needs architecture"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"Rework client.TxBuilder"},{"assignees":["likhita-809"],"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgEhnYM","title":"Add implementation for continuous fund creation","type":"DraftIssue"},"id":"PVTI_lADOAAN9684ABqEwzgKoqMI","priority ":"High","project":"Protocol Pool","status":"ü•≥ Done","title":"Add implementation for continuous fund creation"},{"assignees":["testinginprod"],"content":{"body":"This epic tracks x/accounts development:\r\n\r\n# MVP\r\n\r\n- [x]  Interface #17496 [audit]\r\n- [x] state isolation #17508 [audit]\r\n- [x]  execution, query and init logic #17514 [audit]\r\n- [x] query and msg server logic #17615  [audit]\r\n- [x] module communication #17686 [audit]\r\n- [x] Export/import Genesis https://github.com/cosmos/cosmos-sdk/pull/17802 [audit]\r\n- [x] Simapp Wiring https://github.com/cosmos/cosmos-sdk/pull/18253 [audit]\r\n\r\n# Release (breaking changes we must have before release)\r\n- [x] Move x/accounts to gogoproto: https://github.com/cosmos/cosmos-sdk/pull/18653/files\r\n- [x] Use account number as bytes prefix for the account storage. https://github.com/cosmos/cosmos-sdk/pull/18664\r\n- [ ] Init Genesis (starting new chain, from scratch; not import/export) [audit]\r\n- [ ] Address Scheme #17516  [audit]\r\n- [x] Migrate x/accounts to use gogoproto instead of protov2 https://github.com/cosmos/cosmos-sdk/pull/18653\r\n- [x] use google.Protobuf.Any instead of bytes for messages: https://github.com/cosmos/cosmos-sdk/pull/18653 [audit]\r\n- [x] Make x/accounts use the same account number sequence as x/auth. https://github.com/cosmos/cosmos-sdk/pull/20405 [audit]\r\n- [ ] Add migration message to migrate x/auth account to x/accounts\r\n- [ ] Make auth check also for x/accounts state when checking for account existence. \r\n- [x] Add Gas and Binary Codec as dependencies: https://github.com/cosmos/cosmos-sdk/pull/19068\r\n\r\n\r\n# Post-Release (can be added in an additive way without breaking things)\r\n\r\n- [ ] Authorized execution from sender (authorize the account to execute an action on behalf of the invoker, eg: coin send)\r\n- [x] Allow to send coins on account init and execute https://github.com/cosmos/cosmos-sdk/pull/19360\r\n- [x] Events #17687\r\n- [x] More core services (block service, branching..)\r\n- [x] Account Schema\r\n- [x] Assert Account Interface functionality https://github.com/cosmos/cosmos-sdk/pull/19361\r\n\r\n## Account Abstraction\r\n- [x] Define core.branch.Service https://github.com/cosmos/cosmos-sdk/pull/18379 [audit]\r\n- [x] Implement core.branch.Service https://github.com/cosmos/cosmos-sdk/pull/18475  [audit]\r\n- [x] Add account abstraction interfaces and protofiles. https://github.com/cosmos/cosmos-sdk/pull/18404 [audit] \r\n- [x] Implement account abstraction execution [audit]\r\n- [x] Implement AA user op execution logic https://github.com/cosmos/cosmos-sdk/pull/18499 [audit]\r\n- [x] Implement user operation simulation https://github.com/cosmos/cosmos-sdk/pull/18979 [audit]\r\n- [ ] Decide if to introduce Sequence to user operation (required to avoid tx hash conflicts)\r\n- [x] Implement MsgServer https://github.com/cosmos/cosmos-sdk/pull/18969\r\n- [x] Implement BaseAccount as Abstracted Account\r\n\r\n\r\n###  Tx Integration (Enshrining)\r\nTasks needed to integrate account abstraction authentication into the TX execution.\r\n- [x] Add TxCompat field, contains auxiliary fields needed to convert a TX into a UserOperation. https://github.com/cosmos/cosmos-sdk/pull/18969\r\n- [x] Implement QueryAccountNumber query to query account number by address. https://github.com/cosmos/cosmos-sdk/pull/18989\r\n- [x] Add header.Service support https://github.com/cosmos/cosmos-sdk/pull/19004\r\n- [x] Add AA authentication logic into SigVerify AnteHandler\r\n\r\n## Auxiliary\r\n\r\nDefines auxiliary tasks needed:\r\n\r\n- [x] Remove `GetAllAccounts`,  `IterateAccounts` methods from `x/auth` `AccountKeeper` https://github.com/cosmos/cosmos-sdk/pull/19363\r\n- [x] Join SigVerification, CasConsume, IncreaseSequence decorators: https://github.com/cosmos/cosmos-sdk/pull/18817\r\n- [x] Join SetPubKeyDecorator with SigVerificationDecorator https://github.com/cosmos/cosmos-sdk/pull/19093\r\n- [x] Refactor auth ante to make it more readable https://github.com/cosmos/cosmos-sdk/pull/18780\r\n- [x] Fix proto.Merge for gogoproto types https://github.com/cosmos/cosmos-sdk/pull/18654\r\n- [x] Refactor unknown proto to use descriptorpb types instead of gogotypes https://github.com/cosmos/cosmos-sdk/pull/18541\r\n- [x] Add hybrid MsgServer handlers https://github.com/cosmos/cosmos-sdk/pull/18071\r\n- [x] Add hybrid QueryServer handlers https://github.com/cosmos/cosmos-sdk/pull/17921 ","number":17786,"repository":"cosmos/cosmos-sdk","title":"Epic: x/accounts","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/17786"},"id":"PVTI_lADOAAN9684ABqEwzgKoqUw","labels":["T:Epic"],"need":"Required","priority ":"High","project":"x/accounts","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"üëë Epic","title":"Epic: x/accounts"},{"assignees":["testinginprod"],"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgEhndo","title":"Account Abstraction implementation","type":"DraftIssue"},"id":"PVTI_lADOAAN9684ABqEwzgKoqYE","priority ":"High","project":"x/accounts","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"Account Abstraction implementation"},{"assignees":["testinginprod"],"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgEhnd8","title":"Bundler implementation","type":"DraftIssue"},"id":"PVTI_lADOAAN9684ABqEwzgKoqYo","priority ":"High","project":"x/accounts","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"Bundler implementation"},{"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgEhnrA","title":"Add depinject support","type":"DraftIssue"},"id":"PVTI_lADOAAN9684ABqEwzgKoq3s","priority ":"High","project":"x/accounts","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"Add depinject support"},{"assignees":["atheeshp"],"content":{"body":"The diff of #15165 looking very confusing to review, hence trying to break it into smaller PRs\r\n\r\n- [x] proto #18140\r\n- [x] introduce new required params #18142 \r\n- [x] msg server changes #18188\r\n- [x] abci changes #18236\r\n- [x] tests #18965\r\n- [x] CLI & tests #19039\r\n- [x] docs #19081","number":18141,"repository":"cosmos/cosmos-sdk","title":"Split Cons pubkey rotation PR","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18141"},"id":"PVTI_lADOAAN9684ABqEwzgKorEE","priority ":"Medium","project":"Consensus Key Rotation","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"üëë Epic","title":"Split Cons pubkey rotation PR"},{"assignees":["kocubinski","cool-develope"],"content":{"body":"This issue tracks IAVL v2's SQLite backed implementation, including briefs of milestones hit (past), in progress work (present), overall strategy and near-term pending items (future).\r\n\r\nmain dev branch: https://github.com/cosmos/iavl/tree/v2-alpha6\r\n\r\n## Benchmarks and Tests\r\nBenchmarks demonstrating the performance of IAVL v2 are implemented, the steps below will reproduce them.  The dataset used is specified as [OsmoLikeMany](https://github.com/cosmos/iavl/blob/a27f61e6651575577280362f1761447fec382e19/testutil/util.go#L185), which approximates the state of osmosis's application.db in mid Sept 2023.\r\n\r\n\r\n```bash\r\n# Generate an IAVL v2 tree at initial version 1 and save to disk\r\n‚ùØ go run ./cmd gen tree --db /tmp/iavl-v2 --limit 1 --type osmo-like-many\r\n...\r\nNov  9 13:03:50 DBG db=tree count=46,600,000 dur=383ms rate=522,711 module=batch path=/tmp/iavl-v2/ibc\r\nNov  9 13:04:38 INF last version=1 hash=e169c479e811275a5b9cca72ca615ce4582f8eeba75b73969fa990e0bc9c02bb\r\n\r\n# Create a snapshot of tree state for fast loading in tests\r\n‚ùØ go run ./cmd snapshot --db /tmp/iavl-v2 --version 1\r\n...\r\nNov  9 13:32:27 INF flush total=46,799,999 batch=200,000 dur=1.153s wr/s=173,461 path=ibc\r\nNov  9 13:32:27 INF creating index on snapshot_1 path=/tmp/iavl-v2/ibc\r\n\r\n# Generate the input data for the benchmark\r\n‚ùØ mkdir -p /tmp/osmo-like-many/v2 && go run ./cmd gen emit --start 2 --limit 5000 --type osmo-like-many --out /tmp/osmo-like-many/v2\r\nNov  9 12:32:14 INF fast forward version=1 nodes=5,000,000\r\n...\r\nNov  9 12:32:28 INF version=7 nodes=46,000,000\r\n...\r\nlast file written: /tmp/osmo-like-many/v2/00-00000144.pb.gz\r\n\r\n# Run a benchmark which loads the snapshot then ingests the above data\r\n‚ùØ go test -v -run TestOsmoLike_HotStart\r\n...\r\nNov  9 13:41:37 INF open file: 00-00000041.pb.gz module=compact path=/tmp/osmo-like-many/v2\r\nleaves=27,500,000 time=3.934s last=63,553 Œº=62,834 version=1431 Œîhit=0 Œîmiss=509,398 alloc=13 GB gc=31\r\nwrites: cnt=203,371 wr/s=370,202 dur/wr=2.701¬µs dur=549ms\r\nqueries=502,260 q/s=103,703 dur/q=9.642¬µs dur=4.843s leaf-q=502,256 branch-q=0 leaf-miss=0\r\n\r\n# Rollback the tree state to version 1\r\n‚ùØ go run ./cmd rollback --path /tmp/iavl-v2 --version 1\r\n...\r\nNov  9 13:44:31 INF revert db /tmp/iavl-v2/wasm to version 1\r\n```\r\n\r\nSimilar benchmark tests against IAVL v0 and IAVL v1 (see https://github.com/cosmos/iavl-bench) were run, throughput is ~60x faster than v0 and 12x v1. \r\n\r\n- [ ] Create an abbreviated CI friendly version of the above test\r\n- [ ] General clean up and organization of tests for CI runs\r\n\r\n[TestTree_Hash](https://github.com/cosmos/iavl/blob/55da84e7c90ead39ce1120fcc83842a46c03de98/tree_test.go#L173) validates the root hash consistency with iavl v0 in a mode closer to historical mode (see below).\r\n\r\n## General\r\n- [x] Changelog storage (leaf set/delete)\r\n- [x] Multitree PoC demonstrating concurrent `SaveVersion` and `LoadSnapshot`\r\n  - Most users will probably use the existing logic in the store package, but this is useful for benchmarks.\r\n- [x] Configurable state storage mode (leaf values/no leaf values) for both store v1 and v2 compatibility.\r\n- [ ] Optimize mmap and cache sizes for leaf and tree tables from benchmarks\r\n- [ ] Storage support for out of consensus metadata like latest version, commit info (possibly others) so that existing application.db is fully deprecated in store v1 with iavl v2.\r\n- [ ] async commit.  Defer the i/o required for writing to disk to a background thread and fail on the next `SaveVersion` if this failed.  MemIAVL has shown that this strategy works very well, since the state machine will take much longer to process block n+1 than time spent in commit of block n.\r\n\r\n## Latest Mode\r\nLatest mode is the fastest and most memory intensive operating of mode of IAVL v2.  In this mode either the entire tree is stored in a memory, or all branch nodes (leaves excluded).\r\n\r\n- [x] Leaf eviction filter\r\n- [x] No evictions (retain entire tree in memory)\r\n- [x] Checkpoint sharding  \r\n- [ ] #856\r\n\r\n## Historical Mode\r\nHistorical mode approximates current behavior in IAVL v0 and v1 where all branch and leaf nodes are saved to disk at every version.  Primary use cases are nodes supporting historical proofs or full archive nodes.\r\n\r\n- [ ] Deferred index creation mode (higher throughput, no proofs until checkpoint)\r\n- [ ] Immediate index mode (proofs immediately available for past versions, slower writes)\r\n\r\n## Snapshot\r\n\r\n- [x] Pre-order snapshot\r\n- [x] Pre-order restore\r\n- [x] #852\r\n- [x] Post-order restore\r\n\r\n## Pruning\r\nDiscussions in the store v2 working group are split on the efficiency of both approaches below.  Orphan tracking is more time efficient and less space efficient, a tree diff is more space efficient but less time efficient.  Benchmarks comparing both are needed.\r\n\r\n- [ ] Orphan tracking (IAVL v0 design)\r\n- [x] #855\r\n- [ ] Benchmarks of both approaches\r\n\r\n## Migration\r\n- [ ] Naive stop the world, all at once migration to snapshot\r\n  - In progress, working with pre-order snapshots.\r\n- [ ] Double-write with cutover strategy to support online migration from iavl v0.\r\n\r\n## Osmosis integration\r\nThere is no better test than mainnet integration.  To support adoption and highlight any issues in IAVL v2 a PoC of integration into an osmosis node is in progress so that mainnet benchmarks may be obtained.  This will inform current and future development.\r\n\r\nOsmosis forked Cosmos SDK with IAVL v2 patch: https://github.com/cosmos/cosmos-sdk/tree/kocubinski/osmosis-iavl-v2\r\nOsmosis with the above patch: https://github.com/01builders/osmosis/tree/kocubinski/iavl-v2\r\n\r\n### Status\r\nmainnet is syncing but panics at snapshot (not yet implemented).\r\n\r\n### TODO\r\n- [x] Collect block time metrics for comparison with IAVL v0\r\n- [ ] Call `SaveVersion` concurrently  \r\n- [ ] Collect `tree.Metrics` and log set/get/delete metrics per tree\r\n- [ ] Make sure the concurrent queryings allowed","number":851,"repository":"cosmos/iavl","title":"[Epic]: IAVL v2 implementation","type":"Issue","url":"https://github.com/cosmos/iavl/issues/851"},"id":"PVTI_lADOAAN9684ABqEwzgKorcM","labels":["T:Epic","T:V2"],"priority ":"High","project":"Store","repository":"https://github.com/cosmos/iavl","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","title":"[Epic]: IAVL v2 implementation"},{"assignees":["tac0turtle"],"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgEhrHE","title":"TxCodec & TxValidation","type":"DraftIssue"},"id":"PVTI_lADOAAN9684ABqEwzgKoz7w","priority ":"High","project":"Server","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"TxCodec & TxValidation"},{"assignees":["tac0turtle"],"content":{"body":"mempool handles the validation of a transaction in a sync of async manner. For the comet server there is not a need for the tx to decoded in the mempool, but if the consensus engine is not include a mempool then the mempool here may need to worry about transaction decoding\n\n\ntxValidation\n- validate\n\ntxCodec(optional)\n- decode\n","id":"DI_lADOAAN9684ABqEwzgEhrHM","title":"Mempool","type":"DraftIssue"},"id":"PVTI_lADOAAN9684ABqEwzgKoz8I","priority ":"High","project":"Server","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"Mempool"},{"content":{"body":"AppManager is the most complex system in the new server. It defines how users set up their app and cmds. \n","id":"DI_lADOAAN9684ABqEwzgEhrHk","title":"AppManager","type":"DraftIssue"},"id":"PVTI_lADOAAN9684ABqEwzgKoz9A","priority ":"High","project":"Server","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"AppManager"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nIf you provide `\"gas\": \"auto\"` when submitting a tx, the application will automatically estimate gas for you via `runTxModeSimulate` before submitting it with that gas estimate. \r\n\r\nHowever, this estimate is not always entirely accurate for the following reasons:\r\n\r\n1. Estimation does not take into consideration state writes\r\n\r\n```go\r\n// Safety check: don't write the cache state unless we're in DeliverTx.\r\nif mode != runTxModeDeliver {\r\n\treturn result\r\n}\r\n\r\n// only update state if all messages pass\r\nif result.IsOK() {\r\n\tmsCache.Write() // <= this is where I believe most of the difference comes from\r\n}\r\n```\r\n\r\n2. State mutations may have occurred between gas estimation and tx execution which could cause a slight deviation from the estimate. This is exacerbated if the time is increased between estimation and broadcasting/execution.\r\n\r\nAs a result, the `gas-adjustment` option exists to multiply this estimate by some factor to account for the delta.\r\n\r\nHowever, the `gas-adjustment` can become cumbersome for clients and may have to constantly change because of (1) requiring them to constantly adjust with new values (or use very large gas and pay the fees to avoid headache).\r\n\r\n## Proposal\r\n\r\nThere is not much we can do about (2) hence I propose we keep the `gas-adjustment` option. However, I propose we can remove (1) and make estimation nearly exact. I believe this can easily be done by introducing a third volatile yet ephemeral state in `BaseApp` -- `simulateState`.\r\n\r\nDuring `runTxModeSimulate`, we create this `simulateState` based off of the `checkState` and cache-wrap it. This will allow us to call `Write()` and get a nearly true estimation. In addition, this is pretty trivial to implement.\r\n\r\nThis is mainly a brain dump and I'm not 100% sure this works but I don't immediately see a reason why it should not work.\r\n\r\n/cc @faboweb \r\n\r\n____\r\n\r\n#### For Admin Use\r\n\r\n- [x] Not duplicate issue\r\n- [x] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":4938,"repository":"cosmos/cosmos-sdk","title":"Tx Gas Estimation Improvement","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/4938"},"id":"PVTI_lADOAAN9684ABqEwzgKo1QQ","labels":["C:baseapp","T: UX","C:Store"],"priority ":"Low","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Tx Gas Estimation Improvement"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nThrough the `GasMeter` charges gas costs per read regardless if that read hits the cache or not of the subseqent `KVStore`.\r\n\r\n```go\r\nfunc (gs *Store) Get(key []byte) (value []byte) {\r\n\tgs.gasMeter.ConsumeGas(gs.gasConfig.ReadCostFlat, types.GasReadCostFlatDesc)\r\n\tvalue = gs.parent.Get(key)\r\n\r\n\t// TODO overflow-safe math?\r\n\tgs.gasMeter.ConsumeGas(gs.gasConfig.ReadCostPerByte*types.Gas(len(value)), types.GasReadPerByteDesc)\r\n\r\n\treturn value\r\n}\r\n```\r\n\r\n## Problem Definition\r\n\r\nIt would be ideal and more economical to either not charge at all for cache hits or have parameterized costs for cache hits (i.e. charge much less).\r\n\r\n## Proposal\r\n\r\nTo not charge at all would be to simply update the `KVStore` interface to have `Get` return `([]byte, ok)` where the boolean signifies if there is a cache hit or not. This is just an idea as we can instead only alter the `CacheKVStore` interface.\r\n\r\nIf we want to charge based on parameterization, this will be slightly more difficult but perhaps one solution could be to have `Stores` return their own respective gas params via `GetGasCosts() GasParams`.\r\n\r\n/cc @AdityaSripal \r\n\r\n____\r\n\r\n#### For Admin Use\r\n\r\n- [x] Not duplicate issue\r\n- [x] Appropriate labels applied\r\n- [x] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":5154,"repository":"cosmos/cosmos-sdk","title":"Gas Cost for Cached Reads","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/5154"},"id":"PVTI_lADOAAN9684ABqEwzgKo1RE","labels":["S:proposed","C:Store"],"priority ":"Low","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Gas Cost for Cached Reads"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nThe root store hash is constructed from a simple tree of all its child stores. The generation of this hash and proof is quite cumbersome in my opinion. We should remove generic structure names in the generation of this hash/proof with more specific types which are done for only this purpose and thus can have great restriction/optimization (it is unclear if these generic types are reused for other purposes)\r\n\r\n## Problem Definition\r\n\r\nThe generation of the root hash does some unnecessary/complicated steps before asking tendermint to generate the root hash and proof. \r\n\r\nOur top level commit, has a list of kvstores and the value of each kvstore is a hash of its contents (generated via iavl). We then call this [function](https://github.com/cosmos/cosmos-sdk/blob/7781cdb3d20bc7ebac017452897ce1e6ab3903ef/store/types/commit_info.go#L36), converting the list of commit id's (which contains hashes) to a golang map. This step seems completely unnecessary (explained further). Then this is turned into a [simple map](https://github.com/cosmos/cosmos-sdk/blob/7781cdb3d20bc7ebac017452897ce1e6ab3903ef/store/internal/maps/maps.go#L187-#L197), and turned back into a sorted list of byte slices. The sorting here is not by the value of the byte slice, but of the kv store keys before generating the byte slice\r\n\r\ncommit stores -> sorted array kvstore hashes -> turn into golang map -> turn into simple map -> turn into partially sorted array\r\n\r\n**NOTE:** The value is [prehashed](https://github.com/cosmos/cosmos-sdk/blob/7781cdb3d20bc7ebac017452897ce1e6ab3903ef/store/internal/maps/maps.go#L99) before included in the root hash. Also note, the value is already a hash of the kvstore, so we have prehash(hash) which is used in constructing the root hash. The simple map implementation seems to indicate this is a potential caching optimization, but that is not the reasoning from a correctness standpoint and would break verification algorithms if removed (without also updating the ics23 spec)!\r\n\r\nAlso note that the []byte provided in [][]byte is not the hash of the kvstore but the leaf value which is `len(key)  + key + len(prehash(kvstore.hash)) + prehash(kvstore.hash)`, see ics23 [prepareLeafData](https://github.com/confio/ics23/blob/a4daeb4c24ce1be827829c0841446abc690c4f11/go/ops.go#L92)\r\n\r\nThe documentation is [incorrect](https://github.com/cosmos/cosmos-sdk/blob/7781cdb3d20bc7ebac017452897ce1e6ab3903ef/store/internal/maps/maps.go#L75). The [tendermint ics23 spec](https://github.com/confio/ics23/blob/a4daeb4c24ce1be827829c0841446abc690c4f11/go/proof.go#L28) does not prehash the key\r\n\r\n\r\n## Proposal\r\n\r\nA new structure can be used, but it should have a specific name like `multistoreRoothashConstructor` or something like that. \r\n\r\nIt should, take in a list of [store infos](https://github.com/cosmos/cosmos-sdk/blob/7781cdb3d20bc7ebac017452897ce1e6ab3903ef/store/types/commit_info.pb.go#L28) (sort by key - maybe add a wrapper for store info or util func), it should then, construct a [][]byte array where each []byte is `len(key) + key + len(prehash_value) + prehash(kvstore.hash)`. Then pass this into [`merkle.ProofsFromByteSlices`](https://github.com/cosmos/cosmos-sdk/blob/7781cdb3d20bc7ebac017452897ce1e6ab3903ef/store/internal/maps/maps.go#L199)\r\n\r\nI highly recommend feeling comfortable with how the root hash is constructed before taking on this issue","number":13534,"repository":"cosmos/cosmos-sdk","title":"remove simple map usage for multistore roothash/proof creation","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/13534"},"id":"PVTI_lADOAAN9684ABqEwzgKo1TM","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/18944"],"priority ":"Low","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"remove simple map usage for multistore roothash/proof creation"},{"assignees":["tac0turtle","testinginprod"],"content":{"body":"","number":17576,"repository":"cosmos/cosmos-sdk","title":"Move Relevant Types to Core","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/17576"},"id":"PVTI_lADOAAN9684ABqEwzgKo1aQ","labels":["C:Store"],"need":"Required","priority ":"High","project":"Store","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"Move Relevant Types to Core"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  --> \r\n## Summary\r\nWe currently charge for all allocated gas, even if it was unused. This creates a tension between the amount gas simulation tells you you need, and the overhead you allow in case some state change makes you have to spend a bit more in order for your tx to remain in everyones mempool. We should refund in some capacity the allocated gas that wasn't used, as that incurred no cost to each node on the network. (Though it may have had some affect on block building -- more on that in the following)\r\n\r\n## Problem Definition\r\n### Why do we need this feature\r\nI think it is going to be unnecessary extra decision / mental overhead of figuring out how much gas to use. (Do you use exactly the minimum which simulation says, and risk it not being propagated, do you do some multiplicative adjustment and just take the cost, do you try to use whats default and not worry about the money your inadvertently burning) This sort of decision fatigue is a serious concern, and may end up driving normal people away from the network. (Or at the very least, cause them to burn extra money which I think is bad)\r\n\r\n### What Ethereum does\r\nDue to other design choices Ethereum has made, they only charge for the gas used, not gas allocated. (By refunding, but they cap refunds at 50% of provided gas limit, src: https://github.com/ethereum/wiki/wiki/Design-Rationale#gas-and-fees) I haven't been able to find a source online which indicates if they use gas allocated vs gas refunded to account for the block gas limit though. \r\n\r\nHowever this means in the current model this is mental overhead our users have that they wouldn't have on other similar cryptocurrencies.\r\n\r\n### Problems that arise \r\nThe \"Naive\" solution of refund all unused gas has problems. An adversary could just set their allocated tx gas to be a large number, preventing other txs from getting into the block at no cost. \r\n\r\n<!-- Why do we need this feature? \r\nWhat problems may be addressed by introducing this feature?\r\nWhat benefits does the SDK stand to gain by including this feature?\r\nAre there any disadvantages of including this feature? -->\r\n\r\n## Proposal\r\n<!-- Detailed description of requirements of implementation --> \r\n### Proposed solution to adversarially increasing gas allocated\r\nI think this should be resolved with 2 mitigation techniques:\r\n1) Limit the percentage refunded (what Ethereum does), this means the multiplicative factor by which a tx can overallocate gas is limited. (e.g. 1.5, or 2). `gas_charged = max(gas_used, gas_wanted / 2)`\r\n2) Have the default mempool priority function be dependent on gas. So even if you overestimate your gas, you still have to increase your fee by some extent for network propagation / block inclusion. (Ref #2275 for priority function)\r\n\r\n### Implementation details\r\nWe currently have no \"EndTx\" (AFAICT), so we can refund the gas in endblock. (We can append pointers to the gas meters in a linked list thats cached in the context, and empty this linked list / array in EndBlock)\r\n\r\nWe don't need to worry about the percentage operations taking lots of computation time, as they are on pure int64s. (We may even be able to do some stuff with SIMD as well)\r\n\r\nI think this is something we should do soon after mempool sorting postlaunch.\r\n/cc @cwgoes \r\n____\r\n#### For Admin Use\r\n - [X] Not duplicate issue\r\n - [X] Appropriate labels applied\r\n - [ ] Appropriate contributors tagged\r\n - [ ] Contributor assigned/self-assigned\r\n","number":2150,"repository":"cosmos/cosmos-sdk","title":"Refunding unused but allocated gas","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/2150"},"id":"PVTI_lADOAAN9684ABqEwzgKo2bM","labels":["S:proposed","C: gas"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/8993"],"priority ":"High","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","story Type":"‚≠êÔ∏è User story","title":"Refunding unused but allocated gas"},{"content":{"body":"## Summary\r\nPut a telemetry for every message to measure average processing time.\r\n\r\n## Problem Definition\r\nAs a developer building blockchain with cosmos-sdk, they want to know what operation makes blockchain slow.\r\n\r\nIf cosmos-sdk support `gauge telemetry` for each message in the transaction, It helps us to find out which transaction degrades the overall performance on early stage in development.","number":13981,"repository":"cosmos/cosmos-sdk","title":"Measure average time consumed per each `Message`","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/13981"},"id":"PVTI_lADOAAN9684ABqEwzgKo3dc","labels":["C:baseapp","T: Performance","C:Store"],"priority ":"Low","project":"Server","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","sprint":"true","status":"üìã Backlog","story Type":"‚≠êÔ∏è User story","title":"Measure average time consumed per each `Message`"},{"assignees":["kocubinski"],"content":{"body":"As benchmarking has been a key piece of work within the SC with the process of choosing the implementation (current IAVL, memIAVL, IAVL v1)\r\n\r\nFor more information on the benchmarking that has been currently done: \r\nhttps://github.com/kocubinski/iavl-bench\r\n\r\n```[tasklist]\r\n###\r\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/17580\r\n- [ ] Pruning impl for iavl v1\r\n- [ ] RMS that ties in SC SS for benchmarking\r\n```\r\n","number":17578,"repository":"cosmos/cosmos-sdk","title":"Benchmarking for SC","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/17578"},"id":"PVTI_lADOAAN9684ABqEwzgKo5ME","labels":["C:Store"],"priority ":"Medium","project":"Store","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"Benchmarking for SC"},{"assignees":["alexanderbez"],"content":{"body":"","number":18462,"repository":"cosmos/cosmos-sdk","title":"Implement PebbleDB Pruning and Fixes","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18462"},"id":"PVTI_lADOAAN9684ABqEwzgKo5nM","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/18459"],"priority ":"High","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","size":"Medium (2-3 Weeks)","status":"ü•≥ Done","story Type":"üëë Epic","title":"Implement PebbleDB Pruning and Fixes"},{"assignees":["alexanderbez"],"content":{"body":"","number":18463,"repository":"cosmos/cosmos-sdk","title":"Store: Export Metrics","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18463"},"id":"PVTI_lADOAAN9684ABqEwzgKo_tU","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/18529"],"priority ":"Medium","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"Store: Export Metrics"},{"content":{"body":"","number":18464,"repository":"cosmos/cosmos-sdk","title":"Commit SS and SC Async","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18464"},"id":"PVTI_lADOAAN9684ABqEwzgKo_u4","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19313"],"need":"Nice To Have","priority ":"High","project":"Store","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"Commit SS and SC Async"},{"assignees":["alexanderbez"],"content":{"body":"","number":18465,"repository":"cosmos/cosmos-sdk","title":"Reevaluate Storage v2 ADR","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18465"},"id":"PVTI_lADOAAN9684ABqEwzgKo_wQ","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/18862"],"priority ":"Low","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"Reevaluate Storage v2 ADR"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Please also ensure that this is not a duplicate issue :)  \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n<!--\r\nIMPORTANT: Prior to opening a bug report, check if it affects one of the core modules\r\nand if its elegible for a bug bounty on `SECURITY.md`. Bugs that are not submitted\r\nthrough the appropriate channels won't receive any bounty.\r\n -->\r\n\r\n## Summary of Bug\r\n\r\nThe checking logic in ValidateUnbondAmount is strange. It requires `sharesTruncated <= delShares <= shares`. At some corner cases, this requirement prevents me from unbonding all my shares.\r\n\r\n## Version\r\n\r\nf1fdde5d1b18b995afb3b2802b43593ae6b8c2b3\r\n\r\n## Steps to Reproduce\r\n\r\nUse the following Unit Test file:\r\n```Go\r\npackage staking_test\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"testing\"\r\n\r\n\tsdk \"github.com/cosmos/cosmos-sdk/types\"\r\n\t\"github.com/cosmos/cosmos-sdk/x/staking/types\"\r\n)\r\n\r\nfunc TestTokenAndShareCalc(t *testing.T) {\r\n\tvalidator := types.NewValidator(nil, PKs[0], types.Description{})\r\n\t// Due to slashing, this validator's DelegatorShares is 10000 but has only 5000 Tokens remained\r\n\tvalidator.DelegatorShares = sdk.NewDec(10000)\r\n\tvalidator.Tokens = sdk.NewInt(5000)\r\n\r\n\t//Suppose a delegator's share is 7 and she wants to unbond all of her share\r\n\tdel := types.Delegation{Shares: sdk.NewDec(7)}\r\n\r\n\t//But no matter she sets the unbonding amount to 3 or 4, she has no way to successfully unbonds 7:\r\n\tshares, err := calcShares(validator, del, sdk.NewInt(3))\r\n\tfmt.Printf(\"%#v %#v\\n\", shares, err)\r\n\t//6.000000000000000000 <nil>\r\n\tshares, err = calcShares(validator, del, sdk.NewInt(4))\r\n\tfmt.Printf(\"%#v %#v\\n\", shares, err)\r\n\t//8.000000000000000000 &errors.Error{codespace:\"staking\", code:0x1e, desc:\"invalid shares amount\"}\r\n}\r\n\r\n// following lines are copied from ValidateUnbondAmount\r\nfunc calcShares(validator types.Validator, del types.Delegation, amt sdk.Int) (shares sdk.Dec, err error) {\r\n\tshares, err = validator.SharesFromTokens(amt)\r\n\tif err != nil {\r\n\t\treturn shares, err\r\n\t}\r\n\r\n\tsharesTruncated, err := validator.SharesFromTokensTruncated(amt)\r\n\tif err != nil {\r\n\t\treturn shares, err\r\n\t}\r\n\r\n\tdelShares := del.GetShares()\r\n\tif sharesTruncated.GT(delShares) {\r\n\t\treturn shares, types.ErrBadSharesAmount\r\n\t}\r\n\r\n\t// Cap the shares at the delegation's shares. Shares being greater could occur\r\n\t// due to rounding, however we don't want to truncate the shares or take the\r\n\t// minimum because we want to allow for the full withdraw of shares from a\r\n\t// delegation.\r\n\tif shares.GT(delShares) {\r\n\t\tshares = delShares\r\n\t}\r\n\r\n\treturn shares, nil\r\n}\r\n```\r\n\r\n____\r\n\r\n## For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":6063,"repository":"cosmos/cosmos-sdk","title":"Share checking of ValidateUnbondAmount has bug","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/6063"},"id":"PVTI_lADOAAN9684ABqEwzgKpCMo","labels":["T:Bug","C:x/staking"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","size":"Medium (2-3 Weeks)","status":"üìã Backlog","story Type":"üêû Bug","title":"Share checking of ValidateUnbondAmount has bug"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\nIt might be good to make a recommendation somewhere for chain-id best practices to ensure future compatibility with the emerging chain id standards:\r\nhttps://github.com/ChainAgnostic/CAIPs/issues/5\r\n\r\nI'm not sure where this rec should live, is there something like https://github.com/cosmos/cosmos-sdk/blob/v0.37.3/docs/modules/SPEC.md but for general app design? Should it live in the docs? In the glossary?\r\n\r\n## Problem Definition\r\n\r\nThe chainid registry has a prefix for cosmos chains that is followed by the chain id as a suffix. They enforce a chain id with the case-sensitive pattern `[-a-zA-Z0-9]{3,47}`. If it does not follow this pattern they hash the chain-id and include a `cosmos-hash` prefix instead of the `cosmos` prefix. Apparently out of all cosmos chains currently live none of them violate their requirements (which is great!). In order to help maintain the human readable version of their standard it would be good to recommend (or even enforce to a certain degree) chain id formats that follow their recommendations.\r\n\r\n## Proposal\r\nOne or both of the following:\r\n * List this chain id format under best practices somewhere in the documentation.\r\n * Enforce the chain id to follow this standard within the genesis file and/or within the command line. Alternatively it could simply notify the user that their id does not comply and ask if they are sure they want to use it anyway.\r\n<!-- Detailed description of requirements of implementation -->\r\n\r\n____\r\n\r\n#### For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":5363,"repository":"cosmos/cosmos-sdk","title":"chain-id best practices","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/5363"},"id":"PVTI_lADOAAN9684ABqEwzgKpCfg","labels":["T:Docs"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","size":"Small (1 Week)","status":"üìã Backlog","story Type":"‚≠êÔ∏è User story","title":"chain-id best practices"},{"assignees":["testinginprod"],"content":{"body":"This issue is to mainly track the requirements needed in order to integrate store v2 into the wider SDK framework. I.e. replace store v1 usage with store v2 usage. This will most likely require rewiring of the `sdk.Context` type and perhaps other bits of refactoring.\r\n\r\ncc @tac0turtle ","number":18466,"repository":"cosmos/cosmos-sdk","title":"Framework Integration","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18466"},"id":"PVTI_lADOAAN9684ABqEwzgKpFB0","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/18528"],"priority ":"High","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","size":"Large (3-6 weeks)","status":"ü•≥ Done","title":"Framework Integration"},{"assignees":["tac0turtle"],"content":{"body":"## Context\r\n\r\nIn the original store v2 ADR, we proposed functionality for modules to have the ability to directly write and read state that is outside of commitment, e.g. CW metadata or large blobs of data.\r\n\r\n## Proposal\r\n\r\nWe can easily support this by adding two APIs to the existing types:\r\n\r\n```go\r\ntype RootStore interface {\r\n  // ...\r\n\r\n  GetVersionedDatabase() VersionedDatabase\r\n}\r\n\r\ntype VersionedDatabase interface {\r\n  // ...\r\n\r\n  Set(storeKey string, version uint64, key, value []byte) error\r\n}\r\n```","number":18467,"repository":"cosmos/cosmos-sdk","title":"Store: Support Direct SS Writes","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18467"},"id":"PVTI_lADOAAN9684ABqEwzgKpFD0","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/18938"],"need":"Nice To Have","priority ":"High","project":"Store","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"false","sprint":"true","status":"üìã Backlog","story Type":"üÜï Feature","title":"Store: Support Direct SS Writes"},{"assignees":["cool-develope"],"content":{"body":"IAVL v1 and v0 export is based on post-order, implement post-order export for compatibility with IAVL v0 and v1 ","number":852,"repository":"cosmos/iavl","title":"Post-order snapshot","type":"Issue","url":"https://github.com/cosmos/iavl/issues/852"},"id":"PVTI_lADOAAN9684ABqEwzgKqRuM","labels":["C:state sync","T:V2"],"priority ":"Medium","project":"Store","repository":"https://github.com/cosmos/iavl","status":"ü•≥ Done","title":"Post-order snapshot"},{"assignees":["likhita-809"],"content":{"body":"### Summary\n\nIn https://github.com/cosmos/cosmos-sdk/pull/18103, we added a way for governance to payout community spends via a on chain stream system. This is a good way to avoid funds being moved out of the pool to a multisig with less oversight. \r\n\r\nNow we would like to offer a way for application developers to define funds. A fund is a pool of money that is continually added via inflation/fees prior to being included in the community pool. \r\n\r\nThis is a useful feature for things, like marketing funds, developer funds, etc..\n\n### Problem Definition\n\nThere is no way to define long lived funds for developers or other groups that will be topped up over time. \n\n### Proposed Feature\n\nAdd a way to define funds at genesis, and a way to add new funds dynamically through governance. \r\n\r\nThis would include a simple genesis transaction to add the initial fund and distribution split. \r\n\r\nthe split could be 90% community pool 10% dev fund, but always must equate to 100%. ","number":18374,"repository":"cosmos/cosmos-sdk","title":"[Feature]: protocol funds","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18374"},"id":"PVTI_lADOAAN9684ABqEwzgKsAm4","labels":["T:feature-request","C:x/protocolpool"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/18471"],"priority ":"High","project":"Protocol Pool","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"üëë Epic","title":"[Feature]: protocol funds"},{"content":{"body":"## Summary of Bug\r\nWe observed an issue when the cosmovisor ran the previous binary (SDK v0.44.3) and has an error happening during the plan executing height `H`, in our case, we had a file permission issue (it's an operating issue, not the SDK) so the block at `H` was not able to commit completely, the app/consensus state will become `H - 1`. And we see the error like:\r\n```\r\nCONSENSUS FAILURE!!!  due to unable to write upgrade info to filesystem: open /chain/.cronosd/data/upgrade-info.json: permission denied\r\n```\r\nChecked the `wal` log, the it already stores the `end of block height` at `H`\r\n\r\nLater on, the cosmovisor will tries to use the new binary (SDK v0.45.4) to replay with the block `H `after restarting the node. and the store complains it cannot load the version `H`\r\n\r\n## Version\r\nv0.44.3 and v0.45.4\r\n\r\n## Solution\r\nThe upgrade module might need to check the app/state height match with the block height, replay the block `H` with the original release binary and then proceed with the upgrade plan.\r\n\r\nAnother workaround solution will be to let the node can rollback the pending block `H` and restart the node with the original binary, but it looks like not proceed able with the current Tendermint rollback implementation.\r\n\r\n____\r\n\r\n## For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":11952,"repository":"cosmos/cosmos-sdk","title":"x/upgrade: no checks the state and app height matching with the block height ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/11952"},"id":"PVTI_lADOAAN9684ABqEwzgKsBzo","labels":["T:Bug","C:x/upgrade"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üêû Bug","title":"x/upgrade: no checks the state and app height matching with the block height "},{"content":{"body":"## Summary of Bug\r\nAfter an automatic upgrade, if you stop the chain at height X and re-start it the following error is returned:\r\n\r\n`failed to load latest version: failed to load store: initial version set to X (upgradeHeight +1), but found earlier version 1`\r\n\r\n## Version\r\n[Cosmos SDK v0.45.4](https://github.com/cosmos/cosmos-sdk/releases/tag/v0.45.4)\r\n\r\n## Steps to Reproduce\r\nI discovered this while exploring automatic upgrades and how it works in Cosmos SDK,\r\nand also to test if the upgrade works in particular situations/conditions.\r\n\r\n**Note: Please correct me if I'm missing anything here, I'm just exploring stuff and learning.** \r\n\r\n\r\n[Previous Issue #8265](https://github.com/cosmos/cosmos-sdk/issues/8265)\r\n\r\n1.  Initialize the dummy (foo) module in the chain.\r\n\t- action - Chain started\r\n\t- result - success\r\n\t- reason - initialized a new module, assuming this is what needed to be on-chain with some basic features and states\r\n\r\n2.  Raise a software upgrade proposal; this proposal includes deletion of the (foo) module from the chain.\r\n\t- action - Chain restarted with upgraded binary, and without foo module\r\n\t- result - success\r\n\t-  reason -\r\n\t\ta. This module wasn't properly written.\r\n\t\tb. Removal of all the states which are useless (or not needed anymore)\r\n\t\tc. The module has never been used\r\n\t\td. The features provided by modules are not great.\r\n\r\n\t- eg. \r\n```go\r\nstoreUpgrades = &storetypes.StoreUpgrades{\r\n\tDeleted: []string{\"foo\"}\r\n}\r\napp.SetStoreLoader(upgradetypes.UpgradeStoreLoader(upgradeInfo.Height, storeUpgrades))\r\n```\r\n\r\n3. Raise a software upgrade proposal; this proposal includes re-adding (foo) module on-chain.\r\n\t- action - Rebuild the binary, and start the chain\r\n\t- result - error -`failed to load latest version: failed to load store: initial version set to 40, but found earlier version 1`\r\n\t- reason -\r\n\t\ta. Built from scratch again.\r\n\t\tb. New states, msgs, and queries.\r\n\t\tc. New features added.\r\n\t- eg.\r\n```go\r\nstoreUpgrades = &storetypes.StoreUpgrades{\r\n\tAdded: []string{\"foo\"}\r\n}\r\napp.SetStoreLoader(upgradetypes.UpgradeStoreLoader(upgradeInfo.Height, storeUpgrades))\r\n```\r\n\r\n## For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":12157,"repository":"cosmos/cosmos-sdk","title":"Restart after automatic upgrade not working ( Module Add-Delete-Add )","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/12157"},"id":"PVTI_lADOAAN9684ABqEwzgKsBzw","labels":["T:Bug","T:Docs","C:x/upgrade"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üêû Bug","title":"Restart after automatic upgrade not working ( Module Add-Delete-Add )"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Please also ensure that this is not a duplicate issue :)  \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n<!--\r\nIMPORTANT: Prior to opening a bug report, check if it affects one of the core modules\r\nand if its elegible for a bug bounty on `SECURITY.md`. Bugs that are not submitted\r\nthrough the appropriate channels won't receive any bounty.\r\n -->\r\n\r\n## Summary of Bug\r\n\r\n<!-- Concisely describe the issue -->\r\nAfter lowering the slashing window from 35000 to 18000 on the Kujira blockchain some validators are stuck with a missed block count that won't clear even if they don't miss any more blocks. Querying all blocks in the signing window for some validators (e.g. kujiravaloper1pshqems6hdka48gc56r2ykshyaarkt40hl0rlh) shows no misses while `kujirad query slashing signing-info` reports a positive count.\r\n\r\nI believe the issue is here: https://github.com/cosmos/cosmos-sdk/blob/23576d3d49de3be415bf8c55fbf4c67ea690875b/x/slashing/keeper/infractions.go#L23-L49\r\n\r\nThis code updates the missed block count by checking the current value against the previous value at that index. The problem is any blocks missed at indexes above 18000 in the bit array are \"lost\" when the window changes because they'll contribute to the count but never be checked again. That explains the behavior we're seeing where multiple validators have miss counts that won't go below where they were on 7/3 when the parameter change took effect.\r\n\r\n## Version\r\n\r\n<!-- git commit hash or release version -->\r\nv0.45.4\r\n\r\n## Steps to Reproduce\r\n\r\n<!-- What commands in order should someone run to reproduce your problem? -->\r\nCause a validator to miss blocks distributed throughout the slashing window and then lower the slashing window parameter for the chain. Compare manual missed block counts from checking signatures against what's reported by `query slashing signing-info`. \r\n____\r\n\r\n## For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":12541,"repository":"cosmos/cosmos-sdk","title":"Validator missed blocks count is incorrect after decreasing slashing window","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/12541"},"id":"PVTI_lADOAAN9684ABqEwzgKsB0I","labels":["T:Bug","C:x/slashing"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","story Type":"üêû Bug","title":"Validator missed blocks count is incorrect after decreasing slashing window"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Please also ensure that this is not a duplicate issue :)  \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n<!--\r\nIMPORTANT: Prior to opening a bug report, check if it affects one of the core modules\r\nand if its elegible for a bug bounty on `SECURITY.md`. Bugs that are not submitted\r\nthrough the appropriate channels won't receive any bounty.\r\n -->\r\n\r\n## Summary of Bug\r\n`gaskv`'s iterator [consume gas](https://github.com/cosmos/cosmos-sdk/blob/main/store/gaskv/store.go#L103-L104) for first key, value when it's initiated(internally `Next()` in iavl). But after that when it looks for the next key, value using `Next()`, I don't understand why it consumes gas with the length of the current key and value rather than the length of the next key and value. In this structure, gas is consumed twice for the data length of the first key and value, and gas is not consumed for the data length of the last key and value.\r\n\r\n## Version\r\n0931193521596dc801207ddf3c26124b401a7072\r\n<!-- git commit hash or release version -->\r\n\r\n## Steps to Reproduce\r\n\r\n<!-- What commands in order should someone run to reproduce your problem? -->\r\n","number":15854,"repository":"cosmos/cosmos-sdk","title":"[Bug]: gas consumption inaccuracy of `gaskv`'s iterator","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/15854"},"id":"PVTI_lADOAAN9684ABqEwzgKsB0c","labels":["T:Bug","C:Store"],"priority ":"Low","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üêû Bug","title":"[Bug]: gas consumption inaccuracy of `gaskv`'s iterator"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Please also ensure that this is not a duplicate issue :)  \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n<!--\r\nIMPORTANT: Prior to opening a bug report, check if it affects one of the core modules\r\nand if its elegible for a bug bounty on `SECURITY.md`. Bugs that are not submitted\r\nthrough the appropriate channels won't receive any bounty.\r\n -->\r\n\r\n## Summary of Bug\r\nFor certain seeds it happens that simulations panic because validator set is empty in the genesis before chain init.\r\nThis happens because `initially_bonded_validators` sometimes is 0 and this scenario should not be possible.\r\nLogs example:\r\n```\r\nSelected randomly generated parameters for simulated genesis:\r\n{\r\n  stake_per_account: \"{824639709536}\",\r\n  initially_bonded_validators: \"0\"\r\n}\r\n```\r\n<!-- Concisely describe the issue -->\r\n\r\n## Version\r\n0.47.3\r\n<!-- git commit hash or release version -->\r\n\r\n## Steps to Reproduce\r\nIn wasmd module it can be reproduced by running:\r\n`go test ./app -run TestAppStateDeterminism -Enabled=true -NumBlocks=1 -Genesis= -Verbose=true -Commit=true -Seed=4003615766033486007 -Period=1 -ExportParamsPath /tmp/sim-logs-548063760/sim_params-4003615766033486007.json -ExportStatePath /tmp/sim-logs-548063760/sim_state-4003615766033486007.json -v -timeout 24h`\r\n<!-- What commands in order should someone run to reproduce your problem? -->\r\n","number":16525,"repository":"cosmos/cosmos-sdk","title":"[Bug]: Simulations fail because validator set is empty in the genesis before chain init","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/16525"},"id":"PVTI_lADOAAN9684ABqEwzgKsB1w","labels":["T:Bug","C:Simulations"],"priority ":"Medium","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üêû Bug","title":"[Bug]: Simulations fail because validator set is empty in the genesis before chain init"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Please also ensure that this is not a duplicate issue :)  \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n<!--\r\nIMPORTANT: Prior to opening a bug report, check if it affects one of the core modules\r\nand if its elegible for a bug bounty on `SECURITY.md`. Bugs that are not submitted\r\nthrough the appropriate channels won't receive any bounty.\r\n -->\r\n\r\n## Summary of Bug\r\n\r\nOn logic:\r\n- ~State in FinalizeBlock is being reset every time (we must ALWAYS get a ready-to-use state in FinalizeBlock, otherwise something went wrong and we didn't call InitChain or ProcessProposal).~ Necessary because ProcessProposal isn't called on replay.\r\n- If we receive a `RequestInitChain` with height 0, we should then store 1 as `app.InitialHeight`; otherwise we'll get the wrong context in `ProcessProposal` (which must never get height 0). In other words: getContextForProposal, doesn‚Äôt return the correct context when height == 0. Also this causes an undesired re-set of state in `ProcessProposal`\r\n\r\n\r\nOn tests:\r\n- On many tests ProcessProposal is not being called, we call FinalizeBlock directly which is not compatible with ABCI++. Tests are not failing because we are setting state if it's nil, we must remove this.\r\n- Commit during simulations is optional, why? This makes the height check fail for FinalizeBlock height (`validateFinalizeBlockHeight`) if no commit occurred\r\n- Operations in the simulator don't run inside a block (in FinalizeBlock) they run after it.\r\n- `WithAutomaticFinalizeBlock` shouldn't exist as any msg MUST run inside it instead of after it (integration tests: `RunMsg` should turn the msg into txbytes somehow ???)\r\n\r\nTrying to solve some of these here: https://github.com/cosmos/cosmos-sdk/pull/16794\r\n\r\nRunning `TestAppStateDeterminism` will fail when we remove the (supposedly unnecessary) initialization of finalizeBlockState \r\n\r\nI think this happens because `SimulateFromSeed` calls `FinalizeBlock` without calling `ProcessProposal` first.","number":16796,"repository":"cosmos/cosmos-sdk","title":"Issues with current implementation of ABCI++","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/16796"},"id":"PVTI_lADOAAN9684ABqEwzgKsB5o","labels":["T: Tests","C:ABCI"],"priority ":"High","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Issues with current implementation of ABCI++"},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nI was just auditing orm/encodeutil as I noticed I hadn't audited it and saw its code tries to check if an interface value is a protoreflect.ProtoMessage and if so tries to get an equivalent of that value that'll be passed into protoreflect.ValueOf. However, it doesn't handle the case that the message is not a protoreflect.ProtoMessage hence can panic and this is a repro\r\n\r\n```go\r\npackage encodeutil\r\n\r\nimport \"testing\"\r\n\r\ntype it struct {\r\n\t_    func()\r\n\tName string\r\n}\r\n\r\nfunc TestValuesOf(t *testing.T) {\r\n\t_ = ValuesOf(new(it))\r\n}\r\n```\r\n\r\nwhich produces\r\n\r\n```shell\r\n go test\r\n--- FAIL: TestValuesOf (0.00s)\r\npanic: invalid type: *encodeutil.it [recovered]\r\n\tpanic: invalid type: *encodeutil.it\r\n\r\ngoroutine 18 [running]:\r\ntesting.tRunner.func1.2({0x1109b20, 0xc00008e210})\r\n\t/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/testing/testing.go:1545 +0x238\r\ntesting.tRunner.func1()\r\n\t/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/testing/testing.go:1548 +0x397\r\npanic({0x1109b20?, 0xc00008e210?})\r\n\t/Users/emmanuelodeke/go/src/go.googlesource.com/go/src/runtime/panic.go:914 +0x21f\r\n...\r\n```\n\n### Cosmos SDK Version\n\nmain eb853117a97cb07ec1b6d487ad24f7a14488a23e\n\n### How to reproduce?\n\n```go\r\npackage encodeutil\r\n\r\nimport \"testing\"\r\n\r\ntype it struct {\r\n\t_    func()\r\n\tName string\r\n}\r\n\r\nfunc TestValuesOf(t *testing.T) {\r\n\t_ = ValuesOf(new(it))\r\n}\r\n```","number":17612,"repository":"cosmos/cosmos-sdk","title":"orm/encodeutil: ValuesOf can panic if a value doesn't confirm to the protoreflect.Value union: need to figure out if just to zero it out as a nil?","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/17612"},"id":"PVTI_lADOAAN9684ABqEwzgKsB_Y","labels":["T:Bug"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üêû Bug","title":"orm/encodeutil: ValuesOf can panic if a value doesn't confirm to the protoreflect.Value union: need to figure out if just to zero it out as a nil?"},{"content":{"body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### What happened?\r\n\r\nRollback will not re-execute the transaction.\r\n\r\nI found a problem with the rollback command.\r\nThe documentation about the rollback says that \"the transactions in block n will be re-executed against the\r\napplication.\" but this does not happen. \r\nTransactions with non-deterministic data are not re-executed and the blockchain does not produce new blocks. \r\n\r\nMaybe I'm doing something wrong, please tell me how it should be, this question is very important to me \r\n\r\nI want to know how such a problem can be solved.\r\nWhat to do if it happens on prod?\r\n\r\n### Cosmos SDK Version\r\n\r\nv0.47.2, v0.47.3\r\n\r\n### How to reproduce?\r\n\r\nSteps to reproduction:\r\n1 versions:\r\n$ ignite version\r\nIgnite CLI version:\t\tv0.27.1-dev\r\nIgnite CLI build date:\t\t2023-06-02T20:29:26Z\r\nIgnite CLI source hash:\t\t15cf9a60b8dfbed6d9ddb0cad7e890d2a5b60979\r\nIgnite CLI config version:\tv1\r\nCosmos SDK version:\t\tv0.47.2\r\nYour OS:\t\t\tlinux\r\nYour arch:\t\t\tamd64\r\nYour Node.js version:\t\tv18.15.0\r\nYour go version:\t\tgo version go1.20.7 linux/amd64\r\nYour uname -a:\t\t\tLinux archlinux 6.4.12-arch1-1 #1 SMP PREEMPT_DYNAMIC Thu, 24 Aug 2023 00:38:14 +0000 x86_64 GNU/Linux\r\nYour cwd:\t\t\t/home/user\r\nIs on Gitpod:\t\t\tfalse\r\n\r\n\r\n2 Scaffold a new blockchain using ignite cli (https://docs.ignite.com/guide/blog/express)\r\n3. Add non-determenistic data to message \r\n```\r\nfunc (k msgServer) CreatePost(goCtx context.Context, msg *types.MsgCreatePost) (*types.MsgCreatePostResponse, error) {\r\n\tctx := sdk.UnwrapSDKContext(goCtx)\r\n\r\n\tvar post = types.Post{\r\n\t\tCreator: msg.Creator,\r\n\t\tTitle:   fmt.Sprintf(\"%d-%s\", rand.Int(), msg.Title), #  <--add this random data\r\n\t\tBody:    msg.Body,\r\n\t}\r\n```\r\n5. Launch a blockchain on 3 nodes ()\r\n$ blogd testnet start                                     \r\nacquiring test network lock\r\npreparing test network with chain-id \"blog\"\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n++     THIS MNEMONIC IS FOR TESTING PURPOSES ONLY      ++\r\n++              DO NOT USE IN PRODUCTION               ++\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\nstarting test network...\r\nstarted validator 0\r\nstarted validator 1\r\nstarted validator 2\r\nstarted test network at height: 1\r\npress the Enter Key to terminate\r\n\r\n6. Broadcast the transaction. The message must contain random data.\r\n$  blogd tx blog create-post 'Hello, World!' 'This is a blog post' --from node0 --keyring-backend test --keyring-dir ./.testnets/blog/node0/simcli\r\n\r\nThe non-deterministic transaction stops the generation of new blocks.\r\n\r\n7. Stop the blockchain and execute the rollback command\r\n$ blogd rollback --hard --home ./.testnets/blog/node0/simd\r\n$ blogd rollback --hard --home ./.testnets/blog/node1/simd\r\n$ blogd rollback --hard --home ./.testnets/blog/node2/simd\r\nEvery time the command gives an error:\r\nError: failed to rollback to version: no versions found while trying to load 6\r\n\r\n8. Fix the message, removing random from the message.\r\n```\r\nfunc (k msgServer) CreatePost(goCtx context.Context, msg *types.MsgCreatePost) (*types.MsgCreatePostResponse, error) {\r\n\tctx := sdk.UnwrapSDKContext(goCtx)\r\n\r\n\tvar post = types.Post{\r\n\t\tCreator: msg.Creator,\r\n\t\tTitle:   msg.Title, # <- fix message\r\n\t\tBody:    msg.Body,\r\n\t}\r\n```\r\n9. Rebuild the blockchain.\r\n$  ignite c build \r\n10. Launch a blockchain on 3 nodes\r\nThe blockchain changes the current height to n -1, but the transaction is not re-execute!\r\n\r\n","number":17739,"repository":"cosmos/cosmos-sdk","title":"[Bug]: Rollback will not re-execute the transaction.","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/17739"},"id":"PVTI_lADOAAN9684ABqEwzgKsCBw","labels":["T:Bug","S:needs more info"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üêû Bug","title":"[Bug]: Rollback will not re-execute the transaction."},{"assignees":["akhilkumarpilli"],"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nWhen querying for inflation using GRPC client:\r\n\r\n```console\r\n$ cored query mint inflation --grpc-addr 127.0.0.1:9090 --grpc-insecure\r\n```\r\n\r\nit panics:\r\n\r\n```\r\npanic: invalid Go type math.LegacyDec for field cosmos.mint.v1beta1.QueryInflationResponse.inflation\r\n```\r\n\r\nCall stack:\r\n\r\n```\r\ngoroutine 1 [running]:\r\ngoogle.golang.org/protobuf/internal/impl.newSingularConverter({0x33c00d0?, 0x2714860}, {0x33c1508, 0xc000cf0870})\r\n\tgoogle.golang.org/protobuf@v1.31.0/internal/impl/convert.go:142 +0xaa8\r\ngoogle.golang.org/protobuf/internal/impl.NewConverter({0x33c00d0, 0x2714860}, {0x33c1508?, 0xc000cf0870?})\r\n\tgoogle.golang.org/protobuf@v1.31.0/internal/impl/convert.go:60 +0x9d\r\ngoogle.golang.org/protobuf/internal/impl.fieldInfoForScalar({0x33c1508, 0xc000cf0870}, {{0x242e3c2, 0x9}, {0x0, 0x0}, {0x33c00d0, 0x2714860}, {0x242e3cc, 0x6f}, ...}, ...)\r\n\tgoogle.golang.org/protobuf@v1.31.0/internal/impl/message_reflect_field.go:270 +0x17c\r\ngoogle.golang.org/protobuf/internal/impl.(*MessageInfo).makeKnownFieldsFunc(0xc0001c62c0, {0xffffffffffffffff, {0x0, 0x0}, 0xffffffffffffffff, {0x0, 0x0}, 0xffffffffffffffff, {0x0, 0x0}, ...})\r\n\tgoogle.golang.org/protobuf@v1.31.0/internal/impl/message_reflect.go:80 +0x78a\r\ngoogle.golang.org/protobuf/internal/impl.(*MessageInfo).makeReflectFuncs(0xc0001c62c0, {0x33c00d0, 0x2400020}, {0xffffffffffffffff, {0x0, 0x0}, 0xffffffffffffffff, {0x0, 0x0}, 0xffffffffffffffff, ...})\r\n\tgoogle.golang.org/protobuf@v1.31.0/internal/impl/message_reflect.go:42 +0x58\r\ngoogle.golang.org/protobuf/internal/impl.(*MessageInfo).initOnce(0xc0001c62c0)\r\n\tgoogle.golang.org/protobuf@v1.31.0/internal/impl/message.go:90 +0x1b0\r\ngoogle.golang.org/protobuf/internal/impl.(*MessageInfo).init(...)\r\n\tgoogle.golang.org/protobuf@v1.31.0/internal/impl/message.go:72\r\ngoogle.golang.org/protobuf/internal/impl.(*messageReflectWrapper).ProtoMethods(0xc0014963d0)\r\n\tgoogle.golang.org/protobuf@v1.31.0/internal/impl/message_reflect_gen.go:150 +0x28\r\ngoogle.golang.org/protobuf/proto.protoMethods(...)\r\n\tgoogle.golang.org/protobuf@v1.31.0/proto/proto_methods.go:19\r\ngoogle.golang.org/protobuf/proto.UnmarshalOptions.unmarshal({{}, 0x1, 0x1, 0x0, {0x3378ec0, 0xc0000ebd40}, 0x2710}, {0xc000058af8, 0x14, 0x14}, ...)\r\n\tgoogle.golang.org/protobuf@v1.31.0/proto/decode.go:93 +0xe8\r\ngoogle.golang.org/protobuf/proto.UnmarshalOptions.UnmarshalState({{}, 0x1, 0x1, 0x0, {0x0, 0x0}, 0x2710}, {{}, {0x33b6e78, 0xc0014963d0}, ...})\r\n\tgoogle.golang.org/protobuf@v1.31.0/proto/decode.go:77 +0xa8\r\ngithub.com/golang/protobuf/proto.UnmarshalMerge({0xc000058af8, 0x14, 0x14}, {0x3385070?, 0xc000206888?})\r\n\tgithub.com/golang/protobuf@v1.5.3/proto/wire.go:67 +0x12b\r\ngithub.com/golang/protobuf/proto.Unmarshal({0xc000058af8, 0x14, 0x14}, {0x3385070, 0xc000206888?})\r\n\tgithub.com/golang/protobuf@v1.5.3/proto/wire.go:58 +0x53\r\ngoogle.golang.org/grpc/encoding/proto.codec.Unmarshal({}, {0xc000058af8, 0x14, 0x14}, {0x25ff2a0, 0xc000206888})\r\n\tgoogle.golang.org/grpc@v1.59.0/encoding/proto/proto.go:53 +0x5f\r\ngoogle.golang.org/grpc.recv(0xc00148c1b0, {0x7ff1bc6c8168, 0x4a03dc0}, 0xc0000ac048?, {0x0, 0x0}, {0x25ff2a0, 0xc000206888}, 0x25ff520?, 0x0, ...)\r\n\tgoogle.golang.org/grpc@v1.59.0/rpc_util.go:800 +0x10a\r\ngoogle.golang.org/grpc.(*csAttempt).recvMsg(0xc0015908f0, {0x25ff2a0?, 0xc000206888}, 0x4a03dc0?)\r\n\tgoogle.golang.org/grpc@v1.59.0/stream.go:1084 +0x27d\r\ngoogle.golang.org/grpc.(*clientStream).RecvMsg.func1(0x0?)\r\n\tgoogle.golang.org/grpc@v1.59.0/stream.go:927 +0x1f\r\ngoogle.golang.org/grpc.(*clientStream).withRetry(0xc00162b320, 0xc00119e6d8, 0xc00119e6c8)\r\n\tgoogle.golang.org/grpc@v1.59.0/stream.go:776 +0x13a\r\ngoogle.golang.org/grpc.(*clientStream).RecvMsg(0xc00162b320, {0x25ff2a0?, 0xc000206888?})\r\n\tgoogle.golang.org/grpc@v1.59.0/stream.go:926 +0x113\r\ngoogle.golang.org/grpc.invoke({0x33972e0?, 0xc001434090?}, {0x2788fcb?, 0x3396da0?}, {0x25ff520, 0x4a03dc0}, {0x25ff2a0, 0xc000206888}, 0x0?, {0x0, ...})\r\n\tgoogle.golang.org/grpc@v1.59.0/call.go:73 +0xcb\r\ngoogle.golang.org/grpc.(*ClientConn).Invoke(0xc001626c00, {0x33972e0?, 0xc001434090?}, {0x2788fcb?, 0x33acfa0?}, {0x25ff520?, 0x4a03dc0?}, {0x25ff2a0?, 0xc000206888?}, {0x0, ...})\r\n\tgoogle.golang.org/grpc@v1.59.0/call.go:37 +0x23f\r\ngithub.com/cosmos/cosmos-sdk/client.Context.Invoke({{0x0, 0x0, 0x0}, {0x33acfa0, 0xc0015886c0}, 0xc001626c00, {0x274255b, 0x10}, {0x33b73d0, 0xc001087bd0}, ...}, ...)\r\n\tgithub.com/cosmos/cosmos-sdk@v0.47.5/client/grpc_query.go:63 +0x7e5\r\ngithub.com/cosmos/cosmos-sdk/x/mint/types.(*queryClient).Inflation(0xc00119f610, {0x33972e0, 0xc001434090}, 0x33acfa0?, {0x0, 0x0, 0x0})\r\n\tgithub.com/cosmos/cosmos-sdk@v0.47.5/x/mint/types/query.pb.go:356 +0xcb\r\ngithub.com/cosmos/cosmos-sdk/x/mint/client/cli.GetCmdQueryInflation.func1(0xc000fbcc00, {0xc001436300?, 0x0?, 0x4?})\r\n\tgithub.com/cosmos/cosmos-sdk@v0.47.5/x/mint/client/cli/query.go:76 +0x10f\r\ngithub.com/spf13/cobra.(*Command).execute(0xc000fbcc00, {0xc0014362c0, 0x4, 0x4})\r\n\tgithub.com/spf13/cobra@v1.7.0/command.go:940 +0x87c\r\ngithub.com/spf13/cobra.(*Command).ExecuteC(0xc000bc5200)\r\n\tgithub.com/spf13/cobra@v1.7.0/command.go:1068 +0x3a5\r\ngithub.com/spf13/cobra.(*Command).Execute(...)\r\n\tgithub.com/spf13/cobra@v1.7.0/command.go:992\r\ngithub.com/spf13/cobra.(*Command).ExecuteContext(...)\r\n\tgithub.com/spf13/cobra@v1.7.0/command.go:985\r\ngithub.com/cosmos/cosmos-sdk/server/cmd.Execute(0x339a880?, {0x272f3da, 0x5}, {0xc001045dd0, 0x14})\r\n\tgithub.com/cosmos/cosmos-sdk@v0.47.5/server/cmd/execute.go:32 +0x11b\r\nmain.main()\r\n\tgithub.com/CoreumFoundation/coreum/v3/cmd/cored/main.go:30 +0x1d0\r\n```\r\n\r\nI guess all the types using `math.LegacyDec` are affected everywhere.\n\n### Cosmos SDK Version\n\n0.47.5\n\n### How to reproduce?\n\n_No response_","number":18430,"repository":"cosmos/cosmos-sdk","title":"[Bug]: `math.LegacyDec` type is not deserialized  in GRPC queries","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18430"},"id":"PVTI_lADOAAN9684ABqEwzgKsCGI","labels":["T:Bug"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20912"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"false","sprint":"true","status":"ü•≥ Done","story Type":"üêû Bug","title":"[Bug]: `math.LegacyDec` type is not deserialized  in GRPC queries"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Please also ensure that this is not a duplicate issue :)  \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n<!--\r\nIMPORTANT: Prior to opening a bug report, check if it affects one of the core modules\r\nand if its elegible for a bug bounty on `SECURITY.md`. Bugs that are not submitted\r\nthrough the appropriate channels won't receive any bounty.\r\n -->\r\n\r\n## Summary of Bug\r\n\r\n<!-- Concisely describe the issue -->\r\n\r\nMarshaling of an empty `sdk.Int` always populates the `big.Int` value to zero. This is unexpected from applications as the encoding of a `nil` value for `big.Int` should be `\"<nil>\"`.\r\n\r\n```go\r\n// MarshalText implements the encoding.TextMarshaler interface.\r\nfunc (x *Int) MarshalText() (text []byte, err error) {\r\n\tif x == nil {\r\n\t\treturn []byte(\"<nil>\"), nil\r\n\t}\r\n\treturn x.abs.itoa(x.neg, 10), nil\r\n}\r\n```\r\n\r\n## Version\r\n\r\n<!-- git commit hash or release version -->\r\n\r\nv0.43.0-rc0\r\n\r\n## Steps to Reproduce\r\n\r\n<!-- What commands in order should someone run to reproduce your problem? -->\r\n\r\n- create an empty `sdk.Int` instance and call `Marshal`\r\n\r\n____\r\n\r\n## For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":9629,"repository":"cosmos/cosmos-sdk","title":"`sdk.Int` marshaling of empty instance is always 0 instead of `\"<nil>\"`","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/9629"},"id":"PVTI_lADOAAN9684ABqEwzgKsFp0","labels":["T:Bug","C:Types"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/9813"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üêû Bug","title":"`sdk.Int` marshaling of empty instance is always 0 instead of `\"<nil>\"`"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Please also ensure that this is not a duplicate issue :)  \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n<!--\r\nIMPORTANT: Prior to opening a bug report, check if it affects one of the core modules\r\nand if its elegible for a bug bounty on `SECURITY.md`. Bugs that are not submitted\r\nthrough the appropriate channels won't receive any bounty.\r\n -->\r\n\r\n## Summary of Bug\r\n\r\nThere are numerous (12+) validators on the Umee betanet that have been jailed and subsequently slashed via, what I presume to be, the gravity bridge module. I presume they got jailed and slashed due to not acting in accordance with the liveness expectations of the bridge, i.e. signing validator set updates, etc...\r\n\r\nIn any case, when the validator attempts to successfully unjail and then attempts a delegation or redelegation to themselves, they receive the following error:\r\n\r\nExample:\r\n```\r\nError: rpc error: code = InvalidArgument desc = recovered: calculated final stake for delegator <REDACTED> greater than current stake\r\n        final stake:    9905000000.000000000000000000\r\n        current stake:  9895095000.000000000000000000\r\n```\r\n\r\nWhich comes from this block: https://github.com/cosmos/cosmos-sdk/blob/9fd866e3820b3510010ae172b682d71594cd8c14/x/distribution/keeper/delegation.go#L96-L132\r\n\r\nI recall when working on this long ago with @rigelrozanski, that we knew there could be certain cases where there might be \"off by one\" issues, but very very unlikely. This is unfortunate as we've seen this issue for several validators and essentially make delegating to them impossible after they're unjailed.\r\n\r\n## Version\r\n\r\nv0.43.0 (also applicable on v0.44)\r\n\r\n____\r\n\r\n## For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":10091,"repository":"cosmos/cosmos-sdk","title":"Failure to (re)delegate after validator jailed & slashed","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/10091"},"id":"PVTI_lADOAAN9684ABqEwzgKsFqk","labels":["T:Bug","C:x/staking","C:x/slashing"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üêû Bug","title":"Failure to (re)delegate after validator jailed & slashed"},{"assignees":["lucaslopezf"],"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Please also ensure that this is not a duplicate issue :)  \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n<!--\r\nIMPORTANT: Prior to opening a bug report, check if it affects one of the core modules\r\nand if its elegible for a bug bounty on `SECURITY.md`. Bugs that are not submitted\r\nthrough the appropriate channels won't receive any bounty.\r\n -->\r\n\r\n## Summary of Bug\r\nIf you unbond or redelegate all your tokens from a validator, it might happen that a delegation entry is persisted on chain with amount equals to zero. \r\n\r\n## Version\r\n`v0.44`\r\n\r\n## Steps to Reproduce\r\n1. Delegate some tokens to a validator\r\n2. Unbond/redelegate those tokens to another validator. \r\n\r\nSometimes, it might happen that the chain stores a delegation entry with `amount` equals to `0` but with a non-empty `shares` amount. This results in the following happening: \r\n\r\n\r\n```\r\n{\r\n  \"delegation_responses\": [\r\n    {\r\n      \"delegation\": {\r\n        \"delegator_address\": \"emoney1952nru9aj2z8cpgew29z7e0q634d7288qyzq7l\",\r\n        \"validator_address\": \"emoneyvaloper1zxxd24h25phc744tjgtatafh05vtw6rve4xmwe\",\r\n        \"shares\": \"0.754709466067545576\"\r\n      },\r\n      \"balance\": {\r\n        \"denom\": \"ungm\",\r\n        \"amount\": \"0\"\r\n      }\r\n    },\r\n    {\r\n      \"delegation\": {\r\n        \"delegator_address\": \"emoney1952nru9aj2z8cpgew29z7e0q634d7288qyzq7l\",\r\n        \"validator_address\": \"emoneyvaloper1yfydycc36gm9eftl5krcj5lfjy3w2kzlaqer98\",\r\n        \"shares\": \"0.001230708159860757\"\r\n      },\r\n      \"balance\": {\r\n        \"denom\": \"ungm\",\r\n        \"amount\": \"0\"\r\n      }\r\n    },\r\n    {\r\n      \"delegation\": {\r\n        \"delegator_address\": \"emoney1952nru9aj2z8cpgew29z7e0q634d7288qyzq7l\",\r\n        \"validator_address\": \"emoneyvaloper17e8y0np4gtdhn7mv2uut3v2a06d99f4gajvrrt\",\r\n        \"shares\": \"0.820613871096172588\"\r\n      },\r\n      \"balance\": {\r\n        \"denom\": \"ungm\",\r\n        \"amount\": \"0\"\r\n      }\r\n    }\r\n  ],\r\n  \"pagination\": {\r\n    \"next_key\": null,\r\n    \"total\": \"0\"\r\n  }\r\n}\r\n```\r\n\r\n____\r\n\r\n## For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":10216,"repository":"cosmos/cosmos-sdk","title":"Empty amount delegation stored after unbonding/redelegation","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/10216"},"id":"PVTI_lADOAAN9684ABqEwzgKsF14","labels":["T:Bug","C:x/staking","S:zondax"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/10254"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"üëÄ Waiting / In review","story Type":"üêû Bug","title":"Empty amount delegation stored after unbonding/redelegation"},{"assignees":["aaronc"],"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgEjFoM","title":"Crosslang","type":"DraftIssue"},"id":"PVTI_lADOAAN9684ABqEwzgKsUSg","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"üëë Epic","title":"Crosslang"},{"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgEjFwA","title":"Cryptogrpahy","type":"DraftIssue"},"id":"PVTI_lADOAAN9684ABqEwzgKsUlE","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"üëë Epic","title":"Cryptogrpahy"},{"assignees":["samricotta"],"content":{"body":"```[tasklist]\r\n### Tutorials Page\r\n- [ ] https://github.com/cosmos/cosmos-sdk-docs/issues/88\r\n- [ ] https://github.com/cosmos/cosmos-sdk-docs/issues/90\r\n- [ ] https://github.com/cosmos/cosmos-sdk-docs/issues/92\r\n- [x] Clear https://github.com/cosmos/sdk-tutorials\r\n- [x] Add the workshop code for oracle to the tutorial repo ^^\r\n- [x] Add the workshop code for Mitigating front running to the tutorial repo ^^\r\n- [x] Add tutorial into link at bottom of the page\r\n```\r\n\r\n```[tasklist]\r\n### Home page for each topic\r\n- [ ] https://github.com/cosmos/cosmos-sdk-docs/issues/95\r\n- [ ] https://github.com/cosmos/cosmos-sdk-docs/issues/96\r\n- [ ] https://github.com/cosmos/cosmos-sdk-docs/issues/97\r\n```\r\n\r\n```[tasklist]\r\n### ABCI++ Page\r\n- [ ] https://github.com/cosmos/cosmos-sdk-docs/issues/87\r\n- [x] Add documentation for vote extensions\r\n- [x] Add documentation for prepare and process proposal\r\n```\r\n\r\n```[tasklist]\r\n### 0.50 documentation to update\r\n- [ ] https://github.com/cosmos/cosmos-sdk-docs/issues/104\r\n```\r\n\r\n\r\n```[tasklist]\r\n### Misc\r\n- [ ] https://github.com/cosmos/cosmos-sdk-docs/issues/112\r\n```","number":84,"repository":"cosmos/cosmos-sdk-docs","title":"[Epic]: Phase 2 Documentation","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk-docs/issues/84"},"id":"PVTI_lADOAAN9684ABqEwzgKsbUk","repository":"https://github.com/cosmos/cosmos-sdk-docs","status":"ü•≥ Done","story Type":"üëë Epic","title":"[Epic]: Phase 2 Documentation"},{"content":{"body":"### Summary\r\n\r\nThis improvement allows the Circuit module to specify a maximum amount of time that a circuit remains tripped for instead of the current implementation, which trips a circuit in perpetuity until the circuit is manually untripped.\r\n\r\nIt also included the extension of having authorization levels by timespan e.g., authority B can only trip IBC messages for a certain period of time such 6 hours.\r\n\r\n### Problem Definition\r\n\r\nThe current authorization levels (`LEVEL_SUPER_ADMIN,` `LEVEL_ALL_MSGS,` `LEVEL_SOME_MSGS`) introduce some granularity on the circuit breaker authorities. However, for certain actors such as security service providers or active validators, granting unlimited time tripping may be too powerful, raising concerns in the community.\r\n\r\nIntroducing expirations introduces another lever that will make the Circuit module more effective and decentralized. For most incident situations, a security provider could trip specific message types for a limited amount of time, which would give enough time for parties with \"more authority,\" such as the core team or an expedited gov proposal, to review the situation and potentially trip the message for a longer time.\r\n\r\nThere is no disadvantage to adding this feature beyond the added complexity to the permissions system.\r\n\r\n### Proposed Feature\r\n\r\nTo handle the expired untripping of a circuit, the most efficient option would be to execute the business logic to untrip a circuit upon evaluation if the timespan has passed. The other option would be to handle circuit untripping in the `BeforeBlock` and `EndBlock` stages of IBC modules.\r\n\r\nThere are two approaches for handling the amount of time a circuit is tripped, detailed below.\r\n\r\n****************************************1: No Expiration****************************************\r\n\r\nThis would extend the current implementation, allowing one to optionally specify the amount of time that the circuit should be tripped for. If no time is specified, then the circuit remains tripped in perpetuity.\r\n\r\n******************************************************2: Default Expiration Times******************************************************\r\n\r\nThis approach would automatically assign a sensible amount of time to tripped circuits (i.e., 24 hours), requiring one to override the time explicitly.\r\n\r\n### Improved Permission Levels\r\n\r\nAn additional improvement would be to expand the permission levels to allow for specifying an upper bound to the timespan a circuit can be tripped for certain permission levels (ie, super admin can specify any timespan, other permissions capped at 24 hours).\r\n\r\n## Implementation Examples\r\n\r\nTo accommodate this feature, the `DisabledList` field will need to be changed to a `[collections.Map]` type or a new field introduced, which allows for mapping values to a key (message url).\r\n\r\nEach key (message url) should map to an object that allows specifying expiration time and a list of addresses that are allowed to bypass the tripped circuit. An example of this is included below:\r\n\r\nAn implementation of the ‚Äúdeny by default‚Äù multi-address blocklist is given below, which would allow any signer included in the `BypassSet` to send a message regardless of whether or not the circuit is tripped.\r\n\r\n```go\r\ntype FilteredUrl struct {\r\n   BypassSet collections.KeySet[string]\r\n\t ExpiresAt i64\r\n}\r\n```\r\n\r\nAn updated `AnteHandle` method of the circuit breaker is listed below, with comments indicating the changed behavior.\r\n\r\n```go\r\nfunc (cbd CircuitBreakerDecorator) AnteHandle(ctx sdk.Context, tx sdk.Tx, simulate bool, next sdk.AnteHandler) (sdk.Context, error) {\r\n  //  pseudocode, need to actually parse the transaction object to retrieve the signer\r\n  signer := tx.GetSigners()\r\n\t// loop through all the messages and check if the message type is allowed\r\n\tfor _, msg := range tx.GetMsgs() {\r\n\r\n\t\t// lookup message url in circuit breaker to see if it is tripped\r\n\r\n\t\t// if circuit is tripped, check to see if an expiration time is associated with the circuit\r\n\r\n\t\t// if there is an expiration time and it has passed untrip the circuit, and break out of loop\r\n\r\n\t\t// if there is an expiration time and it has not passed, or there is no expiration time\r\n\t\t// check to see if the signer is allowed to bypass the tripped circuit\r\n\r\n\t\t// circuit is tripped, signer can't bypass, return error\r\n\t}\r\n\r\n\treturn next(ctx, tx, simulate)\r\n}\r\n```\r\n\r\nAuthor: @bonedaddy Co-author: @aesmonty","number":18402,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Trip Circuit with Expiration","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18402"},"id":"PVTI_lADOAAN9684ABqEwzgKt4RA","labels":["T:feature-request"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: Trip Circuit with Expiration"},{"content":{"body":"Some enhancements should happen in Hubl before the official release.\r\n\r\n- [ ] First, the keyring story works but could be more intuitive. This issue should be fixed first on AutoCLI as well: https://github.com/cosmos/cosmos-sdk/issues/18122\r\n- [ ] Automatically detect if connection is insecure and ask confirmation of the user to proceed (instead of passing a flag)\r\n- [ ] Improve the bech32 codec assumptions on v0.50 chains (query auth and staking endpoints)\r\n- [ ] Add disclaimer that hubl works best on v0.50+ chains when adding a < v0.50 chain","number":18417,"repository":"cosmos/cosmos-sdk","title":"Hubl enhancements","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18417"},"id":"PVTI_lADOAAN9684ABqEwzgKt4SQ","labels":["T: UX","T: Client UX"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Hubl enhancements"},{"content":{"body":"### Summary\n\nIn Q3 the sdk team rewrote tx decoding into x/tx. It is used in many places throughout the code base, but there is still usage of auth/tx used throughout the codebase. \n\n### Problem Definition\n\nDeprecate auth/tx in favor of using x/tx everywhere \n\n### Work Breakdown\n\n- [ ] identify usage of auth/tx throughout the codebase\r\n- [ ] Remove usage of auth/tx, add new features to x/tx in order to achieve this. \r\n- [ ] mark auth/tx as deprecated. \r\n\r\nOther issues to be resolved with this work \r\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/15888\r\n- [x] https://github.com/cosmos/cosmos-sdk/issues/17828\r\n- [x] https://github.com/cosmos/cosmos-sdk/issues/17530\r\n\r\n","number":18446,"repository":"cosmos/cosmos-sdk","title":"[Epic]: auth/tx migration","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18446"},"id":"PVTI_lADOAAN9684ABqEwzgKt4UQ","labels":["T:Epic"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","story Type":"üëë Epic","title":"[Epic]: auth/tx migration"},{"assignees":["JulianToledano"],"content":{"body":"### Summary\n\nAdd a readme to x/tx explaining the module ","number":17828,"repository":"cosmos/cosmos-sdk","title":"[Documentation]: Add readme to x/tx","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/17828"},"id":"PVTI_lADOAAN9684ABqEwzgKt4Y0","labels":["T:Docs"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20913"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"false","sprint":"true","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Documentation]: Add readme to x/tx"},{"content":{"body":"### Summary\n\ntx signature verification is heavy and can be optimized.\n\n### Problem Definition\n\nsignature verification is a heavy part of the tx execution, especially for simple txs, in our benchmark, it takes around 1/3 time for an typical erc20 transfer on ethermint chains.\n\n### Proposed Feature\n\n1. first of all, verify signatures in `PreprareProposal` and `ProcessProposal`, so we don't have to do that in `FinalizeBlock`, sync faster.\r\n2. Tx signatures within a block can be verified in parallel, since it's a stateless operation.","number":17850,"repository":"cosmos/cosmos-sdk","title":"[Feature]: verify tx signatures in `ProcessProposal` (and in parallel)","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/17850"},"id":"PVTI_lADOAAN9684ABqEwzgKt4Zw","labels":["T:feature-request"],"priority ":"High","project":"Server","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üÜï Feature","title":"[Feature]: verify tx signatures in `ProcessProposal` (and in parallel)"},{"content":{"body":"The code that determines whether a simulated validator signs a block,\r\n\r\nhttps://github.com/cosmos/cosmos-sdk/blob/337b3fed7953f49dfd3ee642085f54d091022d4e/x/simulation/mock_cometbft.go#L140-L170\r\n\r\nno longer has any effect on the simulation, but merely collects statistics through the `event` function pointer.\r\n\r\nAs pointed out by @alexanderbez, v0.47 does propagate the signing parameter to the simulation:\r\n\r\nhttps://github.com/cosmos/cosmos-sdk/blob/9acdbb94da5a4687495466f88d66265c732dcdd5/x/simulation/mock_tendermint.go#L161\r\n\r\nThis change was made as part of the Comet v0.38 integration, 6cee22df52eb0cbb30e351fbb41f66d26c1f8300.","number":17912,"repository":"cosmos/cosmos-sdk","title":"x/simulation: the liveness matrix no longer affects simulation","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/17912"},"id":"PVTI_lADOAAN9684ABqEwzgKt4aY","labels":["C:Simulations"],"priority ":"Low","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üêû Bug","title":"x/simulation: the liveness matrix no longer affects simulation"},{"assignees":["sontrinh16"],"content":{"body":"Right now the `Building Modules > Recommended Module Structure` advocates to put all type definitions into root module folder, while this is almost never possible due to circular references between module package and keeper package (`module.go` in root package needs reference to keeper, and keeper needs references to almost all module types defined in root package).\r\nBesides that, never seen any module that follows these pattern, I suppose exactly due to this reason. All modules keep using separate `types` package instead of placing type definitions inside root folder.","number":17919,"repository":"cosmos/cosmos-sdk","title":"Fix Recommended Folder Structure section","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/17919"},"id":"PVTI_lADOAAN9684ABqEwzgKt4aw","labels":["T:Docs"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20907"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"true","sprint":"true","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"Fix Recommended Folder Structure section"},{"content":{"body":"We need to decide an address creation scheme for accounts created using x/accounts.\r\n\r\nCurrently the `address` package (not core.address) cannot be imported by x/accounts or it would leak the sdk dependency. ","number":17516,"repository":"cosmos/cosmos-sdk","title":"feat(accounts): Decide on address creation scheme","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/17516"},"id":"PVTI_lADOAAN9684ABqEwzgKt4io","labels":["C:x/accounts"],"project":"x/accounts","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","story Type":"‚≠êÔ∏è User story","title":"feat(accounts): Decide on address creation scheme"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nExtend proto compiler to generate proper `String()` methods for messages.\r\n\r\n## Problem Definition\r\n\r\nCurrent default `String()` method, generated by gogo proto compiler uses [`TextMarshaler`](https://github.com/cosmos/gogoproto/blob/main/proto/text.go#L913) which is based on reflection and doesn't take into account `String()` methods implemented by message fields.\r\n\r\nIt works very well when none of the message fields has custom `String()` method implementation. \r\n* for some fields it can show an odd value. For example for `sdk.Dec` it will format `1.23` as `123000000000000000` (1.23e18), while default `sdk.Dec.String()` will show `1.23000000000000000`\r\n* gov v1 and v1beta1 `MsgSubmitProposal` are also not compatible. Even worse... since `v1` is using gogoproto `TextMarshaler` it doesn't show coin in a standard way:\r\n\r\n```go\r\nmsgGov := v1beta1.MsgSubmitProposal{\r\n\tProposer:       msg.Authority,\r\n\tInitialDeposit: sdk.Coins{sdk.NewInt64Coin(\"uumee\", 12345)},\r\n}\r\nfmt.Println(msgGov.String())\r\n/* output:\r\ninitial_deposit:\r\n- amount: \"12345\"\r\n  denom: uumee\r\nproposer: umee10d07y265gmmuvt4z0w9aw880jnsr700jg5w6jp\r\n*/\r\n\r\nmsgGov2 := v1.MsgSubmitProposal{\r\n\tProposer:       msg.Authority,\r\n\tInitialDeposit: sdk.Coins{sdk.NewInt64Coin(\"uumee\", 12345)},\r\n\tMetadata:       \"metadata content\",\r\n}\r\nfmt.Println(msgGov2.String())\r\n/* output\r\ninitial_deposit:<denom:\"uumee\" amount:\"12345\" > proposer:\"umee10d07y265gmmuvt4z0w9aw880jnsr700jg5w6jp\" metadata:\"metadata content\" \r\n*/\r\n```\r\n\r\n\r\nIt's also a custom format which is not compatible with any standard formats.\r\n\r\n## Proposal\r\n\r\nTake advantage of the fact that proto compiler knows all the fields, and generate message `String()` method, which will:\r\n* be compatible with `yaml`\r\n* leverage custom `String()` of sub-fields. \r\n","number":16178,"repository":"cosmos/cosmos-sdk","title":"[Feature]: proper proto String() Generator","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/16178"},"id":"PVTI_lADOAAN9684ABqEwzgKt4ms","labels":["T:feature-request"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"[Feature]: proper proto String() Generator"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\n`CheckTx`, and as a result `runTx`, should be \"context-aware\", or have the option to be so.\r\n\r\n## Problem Definition\r\n\r\nSince inception, Tendermint's mempool was FIFO. Thus, the order in which txs were verified on ingress was the exact same order when they were proposed.\r\n\r\n`CheckTx`, and as a result `runTx`, currently executes _sequentially_ incoming txs on a `stateCheckTx`, which accumulates state changes over successive txs, 1-by-1. This is totally OK and makes sense under the FIFO model.\r\n\r\nHowever, with the advent of ABCI++, the order of which txs are ingressed and verified _can and most likely will be_ different than the order they're proposed in `PrepareProposal`!\r\n\r\nE.g. top-of-block auctions select the highest bid tx and apply that state against the latest block state, which is different than how those txs were ingressed, which introduces additional burden on app devs to account for this.\r\n\r\n## Proposal\r\n\r\nFortunately, the proposal is very simple!\r\n\r\n1. Modify `runTx` to take a new context argument, when this context is non-empty use it instead of calling `getContextForTx` \r\n2. Make `runTx` public\r\n\r\nThis way apps can override `CheckTx` and call `RunTx` with whatever state they want.\r\n\r\n","number":16251,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Context-Aware CheckTx","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/16251"},"id":"PVTI_lADOAAN9684ABqEwzgKt4nI","labels":["T:feature-request"],"priority ":"High","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","story Type":"‚≠êÔ∏è User story","title":"[Feature]: Context-Aware CheckTx"},{"assignees":["julienrbrt"],"content":{"body":"Currently in gov we use three different state objects to track the status of a proposal, which are: `VotingPeriodProposals`, `ActiveProposalsQueue`, `InactiveProposalsQueue`.\r\n\r\n I think this could be replaced by replacing the current Proposals `collections.Map` with a `collections.IndexedMap`, the two indexes to be added would be:\r\n\r\n```\r\nStatusDepositEndTime: Index(proposal.Status, proposal.DepositEndTime)\r\nStatusVotingEndTime: Index(proposal.Status, proposal.VotingEndTime)\r\n```\r\n\r\nThis would allow us to effectively iterate over deposits by their status joined alongside deposit and voting end time.\r\nIt would require a migration, but it would also simplify the code greatly because we wouldn't need to keep custom logic with respect to the relationship between status and deposit/voting end time.\r\n\r\nEG: \r\n- want to get active proposals, prefix over any of `StatusDepositEndTime`or `StatusVotingEndTime`, with `v1.StatusVotingPeriod`.\r\n- want to get proposals in deposit period: prefix over any of `StatusDepositEndTime`or `StatusVotingEndTime`, with `v1.StatusDepositPeriod`\r\n- want to get proposals active proposals by their voting end time: prefix over `StatusVotingEndTime` with `join(v1.StatusVotingPeriod, ctx.BlockTime()`.","number":16270,"repository":"cosmos/cosmos-sdk","title":"refactor(gov): simplify state management around Proposals in voting period and deposit period.","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/16270"},"id":"PVTI_lADOAAN9684ABqEwzgKt4ns","labels":["C:x/gov"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19349"],"priority ":"Low","project":"Gov","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"refactor(gov): simplify state management around Proposals in voting period and deposit period."},{"content":{"body":"Currently the PostHandler is only given the tx and a boolean indicating whether the tx was successful or not. I think it'd be much more useful if it's also provided with the response of each message in the tx.\r\n\r\nFor example, if the tx contains\r\n\r\n```plain\r\n[ MsgSend, MsgDelegate, MsgVote ]\r\n```\r\n\r\nThe PostHandler will then receive\r\n\r\n```plain\r\n[ MsgSendResponse, MsgDelegateResponse, MsgVoteResponse ]\r\n```\r\n\r\nOf course, if the tx fails, then the responses array will be empty (since all state changes effected by the message are discarded).\r\n\r\nThe new `PostHandle` function signature would be:\r\n\r\n```diff\r\n type PostDecorator interface {\r\n   PostHandle(\r\n     ctx Context,\r\n     tx Tx,\r\n     simulate bool,\r\n     success bool,\r\n+    responses []proto.Any,\r\n     next PostHandler,\r\n   ) (newCtx Context, err error)\r\n }\r\n```\r\n\r\nThoughts?","number":16278,"repository":"cosmos/cosmos-sdk","title":"[Feature]: PostHandler should be provided the msg responses","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/16278"},"id":"PVTI_lADOAAN9684ABqEwzgKt4oI","labels":["T:feature-request"],"priority ":"Low","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Feature]: PostHandler should be provided the msg responses"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary & Problem Definition\r\n\r\nGiven the solution at #16621, an parallel solution is for depinject to support default provider and supplier bindings which can be easily over ridden by the user.  This avoids the additional layer of indirection (factory function) required in the current version of depinject.\r\n\r\nDefault bindings would also remove the need to carry the log supply everywhere in tests and app chains\r\n\r\n```\r\n\t\t\tdepinject.Supply(log.NewNopLogger()),\r\n```\r\n\r\n\r\n<!-- Detailed description of requirements of implementation -->\r\n","number":16727,"repository":"cosmos/cosmos-sdk","title":"[Feature]: depinject should support default, overridable bindings","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/16727"},"id":"PVTI_lADOAAN9684ABqEwzgKt4rc","labels":["good first issue","T:feature-request","C:depinject"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/17046"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: depinject should support default, overridable bindings"},{"content":{"body":"## Context\r\nThe main SDK module has a pseudo version formed as `v0.46.0-beta2-XXXX`.\r\nWe use the dependency review action from GitHub (https://github.com/actions/dependency-review-action), as a required job to alert us when we introduce a dependency with a vulnerability or if there is a vulnerable dependency in the repo.\r\n\r\n## Problem\r\nThe SDK had recently (low and medium severity) vulnerabilities affecting the v0.46.x versions, and advisories have been submitted.\r\nThis means the dependency action from GitHub can now catch it, and because the job is required this blocks any merge of PR including these dependencies, even tough the pseudo version from main is not vulnerable.\r\nThe current workaround is to simply skip failing the job for low and medium severity: https://github.com/cosmos/cosmos-sdk/blob/dba2123ce39403e13ae0bdea2ac53d8bcc740696/.github/workflows/dependencies-review.yml#L24\r\nHowever, this is not optimal.\r\n\r\n## Solution\r\n\r\n* We should submit a PR to https://github.com/actions/dependency-review-action for skipping certain dependency (we can then skip the cosmos/cosmos-sdk package in our repository)\r\n* Or, we need to figure out how to change the base version of our pseudo version from main (however, this may simply push the problem further).","number":16788,"repository":"cosmos/cosmos-sdk","title":"Improve dependency review action or bump pseudo version on main","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/16788"},"id":"PVTI_lADOAAN9684ABqEwzgKt4ss","labels":["T: CI","T:feature-request"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Improve dependency review action or bump pseudo version on main"},{"content":{"body":"Hello,\r\nIn GenesisL1 we have largest state, exported state is ~10GB. Snappy compression lib can't handle anything above ~4GB and throwing \r\n\"panic: snappy: decoded block is too large\" on importing genesis.json to new chain during upgrade. \r\n4gb state might meet Cosmos and other chains, so maybe its a good idea to move to other compression lib.\r\nThank you","number":16915,"repository":"cosmos/cosmos-sdk","title":"Can't import/work with genesis.json larger 4GB","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/16915"},"id":"PVTI_lADOAAN9684ABqEwzgKt4tQ","labels":["T:feature-request"],"priority ":"High","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"Can't import/work with genesis.json larger 4GB"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\nIn ref. to: https://github.com/cosmos/cosmos-sdk/pull/16956 @julienrbrt \r\n\r\n<!-- Short, concise description of the proposed feature -->\r\nCurrently, there is no defined place to put the release version tag and/or commit hash for Upgrade plans.\r\n\r\nAdding this information is beneficial in a few ways.\r\n- Provides an unequivocal field for the version tag and commit hash, eliminating any confusion or issues when using git to fetch the update\r\n- Will provide a back history for later reference\r\n- Will allow admins to create tools to verify upgrade versions, as well as automatically fetching them.\r\n\r\nIf approved to modify and add the additional keys, backporting to versions, 0.45.x, 0.46.x, etc.. so all current running chains can benefit from it.\r\n## Problem Definition\r\n\r\n<!-- Why do we need this feature? \r\nWhat problems may be addressed by introducing this feature?\r\nWhat benefits does the SDK stand to gain by including this feature?\r\nAre there any disadvantages of including this feature? -->\r\n\r\nI have been working on an upgrade script that I plan on releasing for all to use. One of the issues I am currently running into is parsing the information found in Upgrade Gov Props/Plans. There is really no standard for listing the version/commit has to upgrade to. For example, Stargaze's recent upgrade listed the upgrade version as v11 but the tag is really v11.0.0. Another issue that can arise is, when multiple versions are listed in the description, like what else the upgrade is updating to, determining the proper version tag for GitHub is not reliable.\r\n\r\nI believe this will help many with upgrades.  There will be no question what the release tag and commit hash should be when verifying your version.  Especially for those who compile their own binaries.\r\n\r\n## Proposal\r\n\r\nUpdating `proto/cosmos/upgrade/v1beta1/upgrade.proto` to include keys to define the proper github release tag and corresponding commit hash.\r\n\r\nExample:\r\n```\r\n  string github_release_tag = 2;\r\n\r\n  string github_release_commit_hash = 3;\r\n```\r\n\r\n<!-- Detailed description of requirements of implementation -->","number":16960,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Adding additional keys to upgrade.proto","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/16960"},"id":"PVTI_lADOAAN9684ABqEwzgKt4to","labels":["T:feature-request","C:x/upgrade"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"[Feature]: Adding additional keys to upgrade.proto"},{"assignees":["kocubinski","sontrinh16","cool-develope"],"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \nv    Before smashing the submit button please review the template.\nv    Word of caution: poorly thought-out proposals may be rejected \nv                     without deliberation \n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\n\n## Summary\n\nIn Q1 of 2023 we worked on agreement of a trajectory for storage. We came to a consensus on the separation of storage and commitment. This epic is meant to be the follow up on this ADR. \n\n## Work Breakdown\n\n### Phase 1\n**Completion Estimate**: 2-3 weeks (23rd August)\n\n```[tasklist]\n### Tasks for SS\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/17223\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/17224\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/17225\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/17278\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/17322\n```\n\n```[tasklist]\n### Tasks for SC\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/17226\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/17578\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/17227\n```\n\n### Phase 2\n**Completion Estimate**: TBD\n\n```[tasklist]\n### Tasks\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/17341\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/17279\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/17314\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/18225\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/18226\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/18462\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/18329\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/17576\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/18180\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/18178\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/18463\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/18464\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/18738\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/18466\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/18467\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/18527\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/18603\n```\n\n### Phase 3\n**Completion Estimate**: TBD\n\n```[tasklist]\n### Tasks\n- [ ] Test on existing mainnets (if possible)\n- [ ] Write READMEs for SS and SC\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/18465\n- [ ] Release Store & Core Package\n- [ ] Write Blog post\n- [ ] Update Documentation\n```\n","number":17041,"repository":"cosmos/cosmos-sdk","title":"[Epic]: Storage/v2","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/17041"},"iCF Roadmap":"true","id":"PVTI_lADOAAN9684ABqEwzgKt4u4","labels":["C:Store","T:Epic"],"need":"Nice To Have","priority ":"High","project":"2024 üÜô & ‚û°  üìà","quarter":"Q3","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","sprint":"true","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"üëë Epic","title":"[Epic]: Storage/v2"},{"assignees":["julienrbrt"],"content":{"body":"When trying to do something like `cat mnemonic.txt | cosmovisor run keys add test --recover` it results in `Error: EOF` being returned from the binary, presumably because it does not pipe anything to the child process. It would be beneficial to at least pipe stdin of cosmovisor to the binary, or maybe inherit both stdin and stdout to allow fully interactive prompts.","number":17053,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Make `cosmovisor run` pass piped input to the binary","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/17053"},"id":"PVTI_lADOAAN9684ABqEwzgKt4wY","labels":["T:feature-request","C:Cosmovisor"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: Make `cosmovisor run` pass piped input to the binary"},{"assignees":["julienrbrt"],"content":{"body":"The `draft-proposal` command introduced a `Prompt` (https://github.com/cosmos/cosmos-sdk/blob/701aaa8/x/gov/client/cli/prompt.go) helper, that prompts the user of each field.\r\n\r\nWe should move `Prompt` to client/v2 and use the scalar annotation instead of simple field matching for validating the fields.\r\nAdditionally, the `Prompt` should work recursively on the whole message.\r\n\r\nref: https://github.com/cosmos/cosmos-sdk/issues/15982#issuecomment-1527595020","number":17222,"repository":"cosmos/cosmos-sdk","title":"Move prompt to client/v2","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/17222"},"id":"PVTI_lADOAAN9684ABqEwzgKt410","labels":["T: Client UX"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/18555"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Move prompt to client/v2"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nWe are in the process of improving further our tests (https://github.com/cosmos/cosmos-sdk/issues/14145).\r\nThe SDK is overly using testify suite, even when the suite only has one test (e.g. https://github.com/cosmos/cosmos-sdk/pull/14545).\r\n\r\nMoreover, many tests have been duplicated during the creation of e2e tests. We should verify what tests are equivalent and keep only the necessary (this should lead to no coverage decrease)\r\n\r\n## Work Breakdown\r\n\r\n- Remove testify suite when it simplifies a test. The removal should happen package per package.\r\n- Verify test duplication. We have duplicated many tests when using mocks, integration and e2e. Per package, we should ensure we do not duplicate tests.\r\n- Verify the flakiness of the migrated packages with [act](https://github.com/nektos/act) or directly in CI.\r\n\r\n## Tasks\r\n\r\nBasically, all packages in the Cosmos SDK that have e2e tests should be checked.\r\n\r\n- [ ] auth\r\n- [ ] authz\r\n- [ ] bank\r\n- [ ] client\r\n- [x] crisis\r\n- [ ] distribution\r\n- [ ] evidence\r\n- [ ] feegrant\r\n- [ ] genutil\r\n- [ ] gov\r\n- [ ] group\r\n- [ ] mint\r\n- [ ] nft\r\n- [ ] params\r\n- [ ] server\r\n- [ ] slashing\r\n- [ ] staking\r\n- [ ] tx\r\n- [ ] upgrade","number":14561,"repository":"cosmos/cosmos-sdk","title":"Remove testify suite when necessary and reduce test duplication","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/14561"},"id":"PVTI_lADOAAN9684ABqEwzgKt7LE","labels":["T: Tests","T:Epic"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Remove testify suite when necessary and reduce test duplication"},{"assignees":["julienrbrt"],"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\n<!-- Short, concise description of the proposed feature -->\r\nCurrent `Tally` query iterates over all the votings in the governance proposals causing latency issues to nodes or services that provide API endpoints to the public. Currently, the Tally query in the cosmos hub has an average response time of     ~35.14 seconds, for an individual query, causing additional problems when such query has been made. This problem could be possibly solved by using the state machine to record the state of delegations of voting powers (possibly with the additional usage of staking hooks and other hooks) instead of iterating over all votings each time Tally query has been made.\r\n\r\n\r\n## Problem Definition\r\n\r\n<!-- Why do we need this feature? \r\nWhat problems may be addressed by introducing this feature?\r\nWhat benefits does the SDK stand to gain by including this feature?\r\nAre there any disadvantages of including this feature? -->\r\nLatency issues for services running LCD nodes can be improved.\r\n\r\n## Proposal\r\n\r\n<!-- Detailed description of requirements of implementation -->\r\n- Use state machine to record the state of Voting power\r\n\r\n____\r\n\r\n#### For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":10353,"repository":"cosmos/cosmos-sdk","title":"Change Tally query to be state machine based","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/10353"},"id":"PVTI_lADOAAN9684ABqEwzgKt7UA","labels":["C:x/gov","T:feature-request"],"priority ":"Low","project":"Gov","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Change Tally query to be state machine based"},{"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgEjuqU","title":"Offchain Workers","type":"DraftIssue"},"id":"PVTI_lADOAAN9684ABqEwzgKt86w","project":"idea ü§î","title":"Offchain Workers"},{"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgEjutY","title":"Private Voting","type":"DraftIssue"},"id":"PVTI_lADOAAN9684ABqEwzgKt9DA","project":"idea ü§î","title":"Private Voting"},{"content":{"body":"I propose that gov proposals can query on-chain data at the time they execute. That would allow:\n\n- a gov proposal that empties a wallet\n- a gov proposal that claims staking rewards and re-stakes them\n\n\nI imagine gov proposals looking pretty much like code:\n\n```\nbalances = bank.QueryAllBalances(address)\nbank.Send(balances, dest)\n```\n\nSomething like this could be used: https://github.com/traefik/yaegi","id":"DI_lADOAAN9684ABqEwzgEj1Fs","title":"Programmable gov proposals","type":"DraftIssue"},"id":"PVTI_lADOAAN9684ABqEwzgKuNUU","project":"idea ü§î","title":"Programmable gov proposals"},{"content":{"body":"This is an automatic backport of pull request #18472 done by [Mergify](https://mergify.com).\nCherry-pick of 80e0c631ccc6917ede49f47d07069eda0aa9aa5a has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-18472\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 80e0c631c.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   client/tx/factory.go\n\tmodified:   client/tx/legacy_test.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   client/tx/aux_builder_test.go\n\tboth modified:   client/tx/factory_test.go\n\tboth modified:   client/tx/tx_test.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":18503,"repository":"cosmos/cosmos-sdk","title":"fix(client/tx): simulate with correct pk (backport #18472)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18503"},"id":"PVTI_lADOAAN9684ABqEwzgKuyao","labels":["C:CLI"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"fix(client/tx): simulate with correct pk (backport #18472)"},{"content":{"body":"This is an automatic backport of pull request #18478 done by [Mergify](https://mergify.com).\nCherry-pick of 8c7e6941171c8b847f38e36ceca4ba4185c4183a has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-18478\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 8c7e69411.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   client/flags/flags.go\n\tboth modified:   server/cmd/execute.go\n\tboth modified:   server/util.go\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":18508,"repository":"cosmos/cosmos-sdk","title":"feat(server): cmd flag to disable colored logs (backport #18478)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18508"},"id":"PVTI_lADOAAN9684ABqEwzgKvuH8","labels":["C:CLI"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"feat(server): cmd flag to disable colored logs (backport #18478)"},{"content":{"body":"<!--\r\nThe default pull request template is for types feat, fix, or refactor.\r\nFor other templates, add one of the following parameters to the url:\r\n- template=docs.md\r\n- template=other.md\r\n-->\r\n\r\n## Description\r\n\r\nFollow-up of: https://github.com/cosmos/cosmos-sdk/pull/18515\r\nWe are somewhat forced to bump our Go minimum version.\r\n\r\n---\r\n\r\n### Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] added `!` to the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] followed the guidelines for [building modules](https://github.com/cosmos/cosmos-sdk/blob/main/docs/docs/build/building-modules/01-intro.md)\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] included comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] updated the relevant documentation or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] run `make lint` and `make test`\r\n* [ ] confirmed all CI checks have passed\r\n\r\n### Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] confirmed all author checklist items have been addressed \r\n* [ ] reviewed state machine logic\r\n* [ ] reviewed API design and naming\r\n* [ ] reviewed documentation is accurate\r\n* [ ] reviewed tests and test coverage\r\n* [ ] manually tested (if applicable)\r\n","number":18518,"repository":"cosmos/cosmos-sdk","title":"build: add cometbft v0.37.3 changelog + bump Go","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18518"},"id":"PVTI_lADOAAN9684ABqEwzgKwp40","labels":["C:Cosmovisor","C:Rosetta","Type: Build","Type: CI"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"build: add cometbft v0.37.3 changelog + bump Go"},{"content":{"body":"Reverts cosmos/cosmos-sdk#18515","number":18520,"repository":"cosmos/cosmos-sdk","title":"Revert \"build(deps): Bump github.com/cometbft/cometbft from 0.37.2 to 0.37.3\"","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18520"},"id":"PVTI_lADOAAN9684ABqEwzgKwtIY","labels":["C:Cosmovisor","C:Rosetta","C:orm"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"Revert \"build(deps): Bump github.com/cometbft/cometbft from 0.37.2 to 0.37.3\""},{"content":{"body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### What happened?\r\n\r\nThe `upgrade` module's `BeginBlocker` function increments `gasMeter` non-deterministially across validators.\r\n\r\n_The issue is similar to https://github.com/cosmos/cosmos-sdk/issues/15015_\r\n\r\nOn a first block after a start a validator's `k.DowngradeVerified()` equals to false, so we fall down into a [condition](https://github.com/cosmos/cosmos-sdk/blob/03d578b9de5136ffc658f2b0c07434373b07b7da/x/upgrade/abci.go#L28), where `k.DowngradeVerified()` becomes equal to `true` and \r\n`lastAppliedPlan` [is being read](https://github.com/cosmos/cosmos-sdk/blob/03d578b9de5136ffc658f2b0c07434373b07b7da/x/upgrade/abci.go#L36) from the storage.\r\n\r\nIn further blocks `k.DowngradeVerified()` will always be equal to `true` and `lastAppliedPlan` will never be read again.\r\n\r\nThe issue happens if a validator has been restarted on a working chain.\r\nWhen a validator is restarted, it tries to read `lastAppliedPlan` since `k.DowngradeVerified()` is not set yet.\r\n\r\nSo long as SetGasMeter is always called as part of the AnteHandler chain (which is the current behavior of the default AnteHandler chain [here](https://github.com/cosmos/cosmos-sdk/blob/03d578b9de5136ffc658f2b0c07434373b07b7da/x/auth/ante/setup.go#L40)), then this is not an issue as the GasMeter will be reset between BeginBlock and the first DeliverTx call.\r\n\r\nHowever, if the application uses a custom AnteHandler chain that omits this behavior, the GasUsed within each transaction will vary, as the GasMeter will be the initial meter set during BeginBlock [here](https://github.com/cosmos/cosmos-sdk/blob/03d578b9de5136ffc658f2b0c07434373b07b7da/baseapp/abci.go#L173) which increments gas differently if the upgrade module's `k.DowngradeVerified()` has not yet been set.\r\n\r\nAs a solution, should we consider moving ctx initialization from [L83](https://github.com/cosmos/cosmos-sdk/blob/03d578b9de5136ffc658f2b0c07434373b07b7da/x/upgrade/abci.go#L83C3-L83C57) to L25 and also reset a usual `GasMeter`?\r\nLike this:\r\n```go\r\nctx = ctx.WithBlockGasMeter(storetypes.NewInfiniteGasMeter()).WithGasMeter(storetypes.NewInfiniteGasMeter())\r\n```\r\n\r\n### Cosmos SDK Version\r\n\r\n0.47.x, 0.50.x","number":18521,"repository":"cosmos/cosmos-sdk","title":"[Bug]: `upgrade` module increments GasMeter non-deterministically across validators","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18521"},"id":"PVTI_lADOAAN9684ABqEwzgKw5Wc","labels":["T:Bug"],"priority ":"Medium","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"false","sprint":"true","status":"üìã Backlog","story Type":"üêû Bug","title":"[Bug]: `upgrade` module increments GasMeter non-deterministically across validators"},{"content":{"body":"### Summary\n\nThe Cosmos SDK upgrade process has been that validators either need to use cosmovisor, be present at the time of the upgrade or have a third party tool in order to start the new binary while shutting down the old one. Much of the ecosystem has become accustom to this method, but it has caused a growth in maintenance from application developers.\r\n\r\nSecondly, if you would like to sync from genesis then it is a mess to get all the right versions lined up in cosmovisor, even then its its unclear if the binaries will work as intended, barring there was no emergency binary issued by the team. This leads to many people not being able to sync from genesis on newer chains. \r\n\r\n_Note: If the node operators have archives nodes, then it is not possible to allow querying of old versions through the running binary. Secondary or third binaries need to be provided in order to query the old state._ \r\n\r\nFor the reasons listed above and those not listed, we would like to explore rolling upgrades. \r\n\r\nA rolling upgrade is when node operators can upgrade binaries ahead of time allowing the chain to upgrade on its own without intervention by the developers or node operators. This will simplify the operation of a node, allow node operators to sync from genesis and will allow historical versions to be run without needing to operate many different binaries. \r\n\r\n### Goals\r\n\r\nThe goals of this work are:\r\n\r\n- Minimal Downtime: Networks should be upgradable with minimal or no downtime sustained to its users\r\n- Backwards Compatibility: Allow node operators the option to query historical state and process historical transactions. If holding onto older versions of the app proves to have a performance overhead we should allow operators to only compile the latest version of the app. \n\n### Problem Definition\n\nUpgrades are cumbersome for node operators, from being awake at all hours of the day for an upgrade to making sure you upgrade at the correct time. Application developers have a larger burden to maintain historical binaries and hope that the block protocol will not change from version to version. \r\n\n\n### Work Breakdown\n\nAs we have adopted protobuf in the Cosmos SDK there are some gotchas with how this can be done. \r\n\r\nWe should work on a few demos in different directions for how to achieve many different app versions. This will help influence the final design. \r\n\r\n\r\nThis is meant as a tracking issue and will be updated once we are ready to begin this work.","number":18523,"repository":"cosmos/cosmos-sdk","title":"[Epic]: Rolling Upgrades","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18523"},"id":"PVTI_lADOAAN9684ABqEwzgKxMDw","labels":["C:x/upgrade","T:Epic"],"repository":"https://github.com/cosmos/cosmos-sdk","size":"X-Large (6+ weeks)","status":"‚òÉÔ∏è Icebox","story Type":"üëë Epic","title":"[Epic]: Rolling Upgrades"},{"assignees":["samricotta"],"content":{"body":"Setting up a preliminary tutorials tab to link to individual tutorials to be able to insert new tutorials in easily\r\n\r\nPart of #84 ","number":89,"repository":"cosmos/cosmos-sdk-docs","title":"refactor: Update tutorials","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk-docs/pull/89"},"id":"PVTI_lADOAAN9684ABqEwzgKzHW4","repository":"https://github.com/cosmos/cosmos-sdk-docs","reviewers":["tac0turtle","julienrbrt"],"status":"ü•≥ Done","title":"refactor: Update tutorials"},{"assignees":["testinginprod"],"content":{"body":"Currently unknown proto implementation relies on gogo generator types, this is not required since we could simply be using the official descriptorpb package. Ref: https://github.com/cosmos/cosmos-sdk/blob/main/codec/unknownproto/unknown_fields.go#L15","number":18540,"repository":"cosmos/cosmos-sdk","title":"refactor(codec/unknownproto): Do not rely on gogo descriptor internals","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18540"},"id":"PVTI_lADOAAN9684ABqEwzgK1QHA","labels":["C: Proto"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/18541"],"priority ":"High","project":"x/accounts","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"refactor(codec/unknownproto): Do not rely on gogo descriptor internals"},{"assignees":["julienrbrt"],"content":{"body":"This is an automatic backport of pull request #18537 done by [Mergify](https://mergify.com).\nCherry-pick of 875a71cc6f7c0c981f7d7a75ea4f33d93e45185d has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-18537\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 875a71cc6.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   CHANGELOG.md\n\tmodified:   server/README.md\n\tmodified:   server/config/config.go\n\tmodified:   server/config/config_test.go\n\tmodified:   server/config/toml.go\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tdeleted by us:   simapp/simd/cmd/commands.go\n\tdeleted by us:   tools/confix/data/v0.47-app.toml\n\tdeleted by us:   tools/confix/data/v0.50-app.toml\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":18544,"repository":"cosmos/cosmos-sdk","title":"fix(server): properly parse multiple gas config (backport #18537)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18544"},"id":"PVTI_lADOAAN9684ABqEwzgK1YS8","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"fix(server): properly parse multiple gas config (backport #18537)"},{"content":{"body":"When testing CosmJS against a Cosmos SDK simapp 0.50.1 chain, I see a few messages that cannot be signed anmore (e.g. Error sdk/4 _signature verification failed; please verify account number (31), sequence (0) and chain-id (simd-testing): unauthorized_ during CheckTx). All of the cases above work with 0.46 and 0.47 chains:\r\n\r\n| message | Sign mode direct | Sign mode Amino JSON |\r\n| --------- | ----------------- | ----------------------- |\r\n| /cosmos.bank.v1beta1.MsgSend                                 | ‚úÖ  | ‚úÖ  |\r\n| /cosmos.staking.v1beta1.MsgDelegate                       | ‚úÖ  | ‚úÖ  |\r\n| /cosmos.vesting.v1beta1.MsgCreateVestingAccount | ‚úÖ  | ‚úÖ  |\r\n| /cosmos.staking.v1beta1.MsgCreateValidator            | ‚úÖ  | ‚ùå   |\r\n| /cosmos.staking.v1beta1.MsgEditValidator[^1]          | ‚ùî  | ‚ùî  |\r\n| /cosmos.gov.v1beta1.MsgSubmitProposal                 | ‚úÖ  | ‚úÖ  |\r\n| /cosmos.gov.v1beta1.MsgVote                                    | ‚úÖ  | ‚úÖ  |\r\n| /cosmos.gov.v1beta1.MsgVoteWeighted                    | ‚úÖ  | ‚ùå   |\r\n\r\nPing @julienrbrt \r\n\r\n[^1]: I thought this is broken but actually I don't know because the test fails due to MsgCreateValidator","number":18546,"repository":"cosmos/cosmos-sdk","title":"0.47 -> 0.50 regression: Amino JSON signing not working for MsgVoteWeighted, MsgCreateValidator","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18546"},"id":"PVTI_lADOAAN9684ABqEwzgK1eKY","priority ":"Critical","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"false","sprint":"true","status":"üìã Backlog","story Type":"üêû Bug","title":"0.47 -> 0.50 regression: Amino JSON signing not working for MsgVoteWeighted, MsgCreateValidator"},{"content":{"body":"Tutorial for implementation of Vote Extensions. Uses https://github.com/fatal-fruit/abci-workshop. This will be moved across to the `sdk-tutorials` repo next week but for now will point to the original repo that was used for the workshop\r\n\r\nCloses: https://github.com/cosmos/cosmos-sdk-docs/issues/90","number":91,"repository":"cosmos/cosmos-sdk-docs","title":"chore: Mitigate auction front-running (VE)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk-docs/pull/91"},"id":"PVTI_lADOAAN9684ABqEwzgK6044","repository":"https://github.com/cosmos/cosmos-sdk-docs","reviewers":["julienrbrt"],"status":"ü•≥ Done","title":"chore: Mitigate auction front-running (VE)"},{"content":{"body":"### Summary\n\nCurrently a user can only grant a single authorisation at a time with authz, the feature request is to enable more than one authorisation at a time. \n\n### Problem Definition\n\nIf an authorisation already exists for a user and they want to create another, then the authorisation is overwritten so there currently can't be multiple authorisations at a given time. \r\n\r\nIn IBC, we have authz enabled ICS-20 transfers, so a user can grant privilege to transfer tokens on their behalf. Yieldmos outlined a user flow they wanted to explore which would require multiple transfer authorisations, so that small balances of different tokens accumulated on a given chain, say the hub, could then be transferred to Osmosis, swapped to ATOM and returned to the Hub to stake. \n\n### Proposed Feature\n\nTo enable more than one authorisation to be granted at a time rather than automatically overwriting the authorisation upon a new authorisation, there could be flexibility to overwrite or at to the existing authorisation(s)","number":18567,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Allow more than one authorisation with authz at any given time","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18567"},"id":"PVTI_lADOAAN9684ABqEwzgK7PiM","labels":["T:feature-request","C:x/authz"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"[Feature]: Allow more than one authorisation with authz at any given time"},{"assignees":["JulianToledano","raynaudoe"],"content":{"body":"### Summary\r\n\r\nWithin the Cosmos SDK we have a large client package. This package is useful for commands and for interacting with state machine from Go. The issue has become that there is no separation between state machine and client code. This has caused issues when users try to import the client package, they get the whole sdk with it too, and client has bled into the state machine. This is evident with things like `client.Context` being using in the server package because it was available. \r\n\r\nThis Epic is focused on the package client/v2. We have started writing autocli in this package for it to work it without importing the Cosmos SDK it has needed to reimplement things like keyring and other parts that exist in the Cosmos SDK. \r\n\r\n\r\nThis issue will be long lived and updated multiple times in order to best identify the path forward. \r\n\r\n### Problem Definition\r\n\r\nClient code is being in non client code paths. We should separate client to its own package (client/v2) and move all things needed to create a client or interact with the state machine into here. This will allow teams to have a dependable location for all things client related. \r\n\r\n### Work Breakdown\r\n\r\nClient/v2 should only focus on transaction building, broadcasting and decoding.\r\nAll the other packages present in client should not be added to client/v2.\r\nThe main goal is to remove the usage of `client/tx` from client/v2 \r\n\r\n- [ ] Introduce tx factory\r\n- [ ] Create custom tx builder (not depending on the SDK)\r\nExtract client/tx to client/v2/internal/tx. Note this is not a simple package moving, we should re-create a notion of a simple tx factory and have a tx encoder and decoder.\r\n- [ ] Abstract from `client.Context` to remove dependency on client (pass directly address codecs and interface registry)","number":18580,"repository":"cosmos/cosmos-sdk","title":"[Epic]: Client v2","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18580"},"id":"PVTI_lADOAAN9684ABqEwzgK8ucg","labels":["T:Epic"],"priority ":"Medium","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","size":"Large (3-6 weeks)","split":"true","sprint":"true","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"üëë Epic","title":"[Epic]: Client v2"},{"assignees":["cool-develope"],"content":{"body":"Implement the same tree diff logic with iavl v1 to get orphaned nodes for pruning on iavl v2.","number":855,"repository":"cosmos/iavl","title":"Tree diff (IAVL v1 design)","type":"Issue","url":"https://github.com/cosmos/iavl/issues/855"},"id":"PVTI_lADOAAN9684ABqEwzgK8zeE","project":"Store","repository":"https://github.com/cosmos/iavl","status":"ü•≥ Done","title":"Tree diff (IAVL v1 design)"},{"content":{"body":"This issue aims to summary the current status and lay out what would be needed for reducing the amount of sign modes the SDK handles by default.\r\n\r\n## Current status\r\n\r\nThe SDK currently has 4 sign modes:\r\n\r\n- Direct\r\n- Direct Aux\r\n- Textual\r\n- Amino JSON\r\n\r\nAlso `SignModeEIP191` is available but not implemented by default.\r\n\r\n### Direct and Direct Aux\r\n\r\nProposed in [ADR-020](https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-020-protobuf-transaction-encoding.md).\r\n\r\nDirect is meant to make sign docs easier/more standard by using protobuf, so clients can easily generate and sign transactions without needing extra dependencies.\r\n\r\nDirect Aux allows just enough malleability to easily create a multisig transaction without knowing the signers from the start (by not including AuthInfo in the sign bytes).\r\n\r\nPros: Easy to use in clients that can make use of protobuf\r\nCons: No support on hardware wallets; not human friendly\r\n\r\n\r\n### Amino JSON\r\n\r\nNow considered legacy but kept for backwards compatibility (mainly for multisigs).\r\n\r\n### Textual\r\n\r\nProposed in [ADR-050](https://docs.cosmos.network/main/build/architecture/adr-050-sign-mode-textual).\r\n\r\nProvides a better UX making the sign bytes human readable, specially for hardware wallets like Ledger.\r\n\r\nPros: human readable, supported by hardware wallets\r\nCons: requires on-chain info (denom metadata); doesn't allow multisgs as is.\r\n\r\nSimilarly to Direct, \"Textual Aux\" would be possible to develop in order to support multisigs.\r\n\r\n## Proposal\r\n\r\nRemove Direct and Direct Aux, keeping only Amino JSON and Textual.\r\n\r\n### Issues to solve on Textual before making it the default\r\n\r\n#### Allow offline signing\r\n\r\nThis can be done in 2 ways:\r\n\r\n- Allow passing in a local denom metadata store (like a JSON).\r\n- Modify Textual and renderers to allow an \"offline\" mode which ignores on-chain data\r\n\r\n#### Add multisig support\r\n\r\nLeaving this out of the scope, but it should be solved outside of sign modes.\r\n\r\n#### Good client support\r\n\r\nBefore making Textual the standard signing mode, we must have at least an implementation in Javascript. This implementation must also accept custom renderers like the Go implementation.\r\n\r\nThis is a very important point given that Direct is better at this.\r\n\r\n### Could AminoJSON be removed?\r\n\r\nAfter a migration path is available, yes, Amino JSON can be removed.","number":18591,"repository":"cosmos/cosmos-sdk","title":"[EPIC]: Sign modes reduction","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18591"},"id":"PVTI_lADOAAN9684ABqEwzgK-b3M","labels":["T:Epic"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üëë Epic","title":"[EPIC]: Sign modes reduction"},{"assignees":["julienrbrt"],"content":{"body":"### Summary\n\n**User Need:** A way to adjust governance-controlled risk parameters in a timely way, mirroring the capabilities of centralized venues.\r\n\r\n**Proposed Solution:** If we were to allow governance to set specific types of messages that are treated differently by governance votes we could have strictly risk-reducing changes like increasing margin requirements require very low quorum and have a very low minimum voting period.\n\n### Problem Definition\n\nFor centralized trading venues, it's extremely common to adjust various risk and product parameters in a discretionary way. This is a very helpful tool for the risk team of the venue to have. \r\n\r\nGiven that parameter changes on DEXes typically require an extended voting period, this isn't possible. In some cases DEXes have tried to work around this by whitelisting a centralized operator who can adjust these risk parameters in real time. This isn't an ideal solution in all cases, unfortunately.\r\n\r\nApart from chains built around trading, I could see a desire for strictly risk-reducing votes to be treated differently than generic votes. For example, I could imagine that all chains might benefit from allowing a message to halt withdrawals to proceed fast in the event of a hack.\n\n### Proposed Feature\n\nThe components that I see for this might be:\r\n\r\n1) A taxonomy of messages or vote actions. Chains would be able to specify that a vote to _increase_ parameter `x` is in the `safe` group but a vote to _decrease_ `x` is in the `default` group, for example.\r\n\r\n2) A way to specify the rules for each group of actions. `safe` actions might require only 20% quorum, have no minimum vote period and require a different deposit whereas `default` actions would have whatever the default requirements are.","number":18595,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Message-Dependent Governance Vote Parameters","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18595"},"id":"PVTI_lADOAAN9684ABqEwzgK_W60","labels":["C:x/gov","T:feature-request"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19101"],"need":"Required","project":"Gov","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","size":"Large (3-6 weeks)","status":"ü•≥ Done","title":"[Feature]: Message-Dependent Governance Vote Parameters"},{"assignees":["cool-develope"],"content":{"body":"We need to support an `SetInitialVersion(v uint64)` on the `Tree` (SC) interface.","number":18597,"repository":"cosmos/cosmos-sdk","title":"Support SetInitialVersion in SC","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18597"},"id":"PVTI_lADOAAN9684ABqEwzgK_fcc","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/18665"],"priority ":"Medium","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"Support SetInitialVersion in SC"},{"assignees":["cool-develope"],"content":{"body":"## Context\r\n\r\nThe `GetProof` is not fully reflected the proof of multi store structure. For it, we need the `CommitInfo` for the given height. Previously, the rootStore has their own storage to save the CommitInfos (including some metadata), but it can be re-structable through the individual store hash, it will require more i/o access.\r\n","number":18598,"repository":"cosmos/cosmos-sdk","title":"Implement the `GetProof` considering the multi store keys","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18598"},"id":"PVTI_lADOAAN9684ABqEwzgK_gRM","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/18736"],"priority ":"High","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"Implement the `GetProof` considering the multi store keys"},{"content":{"body":"When a block is proposed and has many transactions, having everyone in the network do the same signature verification is an expensive and duplicated step. Instead we should explore the proposer verifies all signatures and produces a zk proof of all the signatures so other nodes in the network dont need to verify signatures all over again\n","id":"DI_lADOAAN9684ABqEwzgEwkGA","title":"zk signature aggregation","type":"DraftIssue"},"id":"PVTI_lADOAAN9684ABqEwzgLNEIQ","project":"idea ü§î","title":"zk signature aggregation"},{"assignees":["raynaudoe"],"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nSignmode textual must be able to sign offline.\r\n\r\n## Problem Definition\r\n\r\nSign mode textual requires a GRPC connection or a bank keeper to query a denom's metadata in order to display it correctly; none of which will/should be available if `--offline` is being passed.\r\n\r\n## Proposal\r\n\r\nGiven that denoms metadata is something that doesn't change often, we can allow the signer to provide the denom metadata when doing an offline signature. This can be done by storing the response of x/bank's `DenomsMetadata` in a json and then passing that to the CLI through a flag.\r\n\r\n\r\n","number":15864,"repository":"cosmos/cosmos-sdk","title":"[textual]: Allow offline signing","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/15864"},"id":"PVTI_lADOAAN9684ABqEwzgLNen4","labels":["T:feature-request","S:zondax"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üëÄ Waiting / In review","title":"[textual]: Allow offline signing"},{"content":{"body":"### Summary\n\nThe default JSON encoding library is not the most performant.\r\n\r\nIn Osmosis, we've run into this issue where JSON serialization would be one of the biggest bottlenecks in one of the off-chain services.\r\n\r\n\n\n### Problem Definition\n\nSee PR for more context: https://github.com/osmosis-labs/osmosis/pull/7065\n\n### Proposed Feature\n\nReplacing to https://github.com/json-iterator/go showed some improvement.\r\n\r\nAs a result, I'm proposing to evaluate a replacement JSON library in cosmos SDK to see if we can save on serialization in import/export genesis.","number":18704,"repository":"cosmos/cosmos-sdk","title":"[Feature]: replace \"encoding/json\" with a more performant option","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18704"},"id":"PVTI_lADOAAN9684ABqEwzgLRZNU","labels":["T:feature-request"],"priority ":"Low","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","size":"Large (3-6 weeks)","status":"üìã Backlog","story Type":"üÜï Feature","title":"[Feature]: replace \"encoding/json\" with a more performant option"},{"content":{"body":"This is an automatic backport of pull request #18707 done by [Mergify](https://mergify.com).\nCherry-pick of 570ab64762abe9bdf0260ac2850686178a6863a4 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-18707\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 570ab6476.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   x/gov/types/v1/genesis.go\n\tmodified:   x/gov/types/v1/genesis_test.go\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tdeleted by us:   x/gov/go.mod\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":18712,"repository":"cosmos/cosmos-sdk","title":"feat(x/gov): better gov genesis validation (backport #18707)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18712"},"id":"PVTI_lADOAAN9684ABqEwzgLS4MY","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"feat(x/gov): better gov genesis validation (backport #18707)"},{"content":{"body":"This is an automatic backport of pull request #18709 done by [Mergify](https://mergify.com).\nCherry-pick of 49825ea40c609b3484c5cfd521848323516d5e74 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-18709\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 49825ea40.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   docs/docs/basics/01-tx-lifecycle.md\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tdeleted by us:   x/circuit/README.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":18730,"repository":"cosmos/cosmos-sdk","title":"docs: add ante precision (backport #18709)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18730"},"id":"PVTI_lADOAAN9684ABqEwzgLTaCU","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"docs: add ante precision (backport #18709)"},{"content":{"body":"# Context\r\n\r\nIn order to make the SDK provable, the assumptions we need to make around storage or the underlying commitment structure need to be smaller.\r\n\r\nCurrently all the modules assume that the underlying KV can:\r\n- Get\r\n- Set\r\n- Remove\r\n- Iterate\r\n\r\nBut it should not always be a given that the underlying storage can iterate. And it should not be a given that when iteration happens the underlying commitment structure can prove the iteration range (`RangeProofs`).\r\n\r\nAlso not all modules need iterations by default. Iteration is always needed for genesis, but it is not always required for the module to execute its own state transitions.\r\n\r\nIn order to reduce the assumption around state storage to be:\r\n- Get\r\n- Set\r\n- Remove\r\n\r\nAnd in order to reduce the assumptions around commitment structure to be:\r\n- ProveExistence\r\n- ProveNonExistence\r\n\r\nWe propose to introduce two new collections types:\r\n\r\n## LookupMap\r\n\r\nLookupMap is like a `Map[K, V]` but is not iterable. \r\n\r\nIn order to implement this, it should be sufficient to take (literal copy paste) the collections.Map code and remove the following methods:\r\n- Iterate\r\n- Walk\r\n- Clear\r\n\r\n## TreeMap\r\n\r\nTreeMap is like a `LookupMap`¬† but provides ordered iteration. It builds an iterable (ordered) tree on top of the KV.\r\n\r\nWe can find an example here: https://docs.rs/near-sdk/latest/src/near_sdk/collections/tree_map.rs.html#42\r\n\r\n\r\n\r\n ","number":18732,"repository":"cosmos/cosmos-sdk","title":"feat(collections): implement LookupMap and TreeMap","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18732"},"id":"PVTI_lADOAAN9684ABqEwzgLTxyc","labels":["C:collections"],"priority ":"High","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"feat(collections): implement LookupMap and TreeMap"},{"assignees":["cool-develope"],"content":{"body":"## Context\r\n\r\nWe'd like to avoid the `cometbft/protof/tendermint/crypto` imports in the `store` module for loose coupling (without specifying the `proof` format). Also, there was a discussion of the wrong format with the `ProofFromMap` which is used in the multi store proof.\r\n\r\n## Decision\r\n\r\nWe will implement the own proof format without the `store/internal` module. \r\n\r\n## Reference\r\n\r\n- #18598\r\n- https://github.com/cosmos/cosmos-sdk/issues/13534\r\n","number":18738,"repository":"cosmos/cosmos-sdk","title":"Remove the `internal` module from `store`","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18738"},"id":"PVTI_lADOAAN9684ABqEwzgLUkTQ","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/18944"],"priority ":"Medium","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"Remove the `internal` module from `store`"},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nWe have the following flow in our integration tests:\r\n\r\n1. Generate a new account\r\n2. Fund it using another `faucet` account\r\n3. Wait for tx to be executed & included in block (we use our polling mechanism where we periodically fetch tx to verify that it is included in a block)\r\n4. Query account using `auth.QueryAccountRequest` and verify that it exists\r\n5. Query account using `banktypes.QueryBalanceRequest` and verify that balance is credited\r\n6. Send tx using funded account\r\n\r\nAnd we have our integration-tests **randomly** failing on step **6**. However steps 3-5 pass successfully.\r\nAn example of error tests fail with:\r\n ```\r\nfee payer address: devcore12kv9j6fmnzfrx5gc5w06h8c3mgnt9vvg8xr434 does not exist: unknown address: unknown address transaction '0DDDD2F6B3B148A0E7E146A3CC89E50B8DDBC16882A49F205C1FD48F2BCC2A5C' failed\r\n```\r\n\r\nTo summirize the issue is: Queries returns state different from the state used in ante decorator\r\n\r\nAlso It is important to mention that this happens **only in CI environment** where we run 3 nodes and have limited resources.\r\nI was also able to reproduce this locally by reducing available resources for Docker (we use docker to run nodes).\r\n\r\nWe also checked cometbft code and it seems that issue might be related to this: https://github.com/cometbft/cometbft/blob/96f4ab8fd88b750c23d3da27ff33911513d9b361/state/txindex/indexer_service.go#L65\r\n\r\nThe code is complicated to understand fully but it seems that changes are written in batches using separate go routine\r\n\r\nIn general we are wondering if this is expected/known behaviour of cosmos SDK ?\r\n\r\n\n\n### Cosmos SDK Version\n\nv0.47.5\n\n### How to reproduce?\n\nDescribed how to reproduce it in general in previous section but if needed I can prepare code.","number":18761,"repository":"cosmos/cosmos-sdk","title":"[Bug]: Queries returns state different from the state used in ante decorator","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18761"},"id":"PVTI_lADOAAN9684ABqEwzgLX70w","labels":["T:Bug"],"priority ":"High","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üêû Bug","title":"[Bug]: Queries returns state different from the state used in ante decorator"},{"content":{"body":"# Description\r\n\r\nCloses: #XXXX\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":18765,"repository":"cosmos/cosmos-sdk","title":"chore: prepare v0.47.7","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18765"},"id":"PVTI_lADOAAN9684ABqEwzgLYQu4","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"chore: prepare v0.47.7"},{"content":{"body":"This is an automatic backport of pull request #18772 done by [Mergify](https://mergify.com).\nCherry-pick of e0b1675f2cbe2f89bd4b62d35d135c14f02dd7d7 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-18772\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit e0b1675f2.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   x/auth/tx/service.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":18776,"repository":"cosmos/cosmos-sdk","title":"fix(x/auth): remove misleading gas wanted value from tx simulation failure response (backport #18772)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18776"},"id":"PVTI_lADOAAN9684ABqEwzgLZ2SU","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"fix(x/auth): remove misleading gas wanted value from tx simulation failure response (backport #18772)"},{"assignees":["samricotta"],"content":{"body":"This is an automatic backport of pull request #18777 done by [Mergify](https://mergify.com).\nCherry-pick of 1a496057ac2cef7f29654fbe5b0e2e7d002a5d64 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-18777\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 1a496057a.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   docs/docs/intro/_category_.json\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   docs/docs/basics/_category_.json\n\tboth modified:   docs/docs/core/_category_.json\n\tadded by them:   docs/docs/learn.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":18779,"repository":"cosmos/cosmos-sdk","title":"docs: add index page for learn section (backport #18777)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18779"},"id":"PVTI_lADOAAN9684ABqEwzgLaPq8","labels":["conflicts"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"docs: add index page for learn section (backport #18777)"},{"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgE2adE","title":"Modules: Staking","type":"DraftIssue"},"iCF Roadmap":"true","id":"PVTI_lADOAAN9684ABqEwzgLbPAg","priority ":"Medium","project":"2024 üÜô & ‚û°  üìà","quarter":"Q3","status":"‚òÉÔ∏è Icebox","story Type":"üëë Epic","title":"Modules: Staking"},{"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgE2adQ","title":"Modules: Distribution","type":"DraftIssue"},"iCF Roadmap":"true","id":"PVTI_lADOAAN9684ABqEwzgLbPA8","priority ":"Low","project":"2024 üÜô & ‚û°  üìà","quarter":"Q3","status":"‚òÉÔ∏è Icebox","story Type":"üëë Epic","title":"Modules: Distribution"},{"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgE2adw","title":"Modules: Upgrades","type":"DraftIssue"},"iCF Roadmap":"true","id":"PVTI_lADOAAN9684ABqEwzgLbPDo","priority ":"Medium","project":"2024 üÜô & ‚û°  üìà","quarter":"Q3","status":"‚òÉÔ∏è Icebox","story Type":"üëë Epic","title":"Modules: Upgrades"},{"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgE2ad8","title":"Modules: slashing","type":"DraftIssue"},"iCF Roadmap":"true","id":"PVTI_lADOAAN9684ABqEwzgLbPD8","priority ":"High","project":"2024 üÜô & ‚û°  üìà","quarter":"Q3","status":"‚òÉÔ∏è Icebox","story Type":"üëë Epic","title":"Modules: slashing"},{"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgE2aeA","title":"Modules: Evidence","type":"DraftIssue"},"iCF Roadmap":"true","id":"PVTI_lADOAAN9684ABqEwzgLbPEI","priority ":"High","project":"2024 üÜô & ‚û°  üìà","quarter":"Q3","status":"‚òÉÔ∏è Icebox","story Type":"üëë Epic","title":"Modules: Evidence"},{"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgE2af0","title":"Core: Cross Language Support","type":"DraftIssue"},"iCF Roadmap":"true","id":"PVTI_lADOAAN9684ABqEwzgLbPI8","priority ":"Medium","project":"2024 üÜô & ‚û°  üìà","quarter":"Q3","status":"üìã Backlog","story Type":"üëë Epic","title":"Core: Cross Language Support"},{"content":{"body":"This is an automatic backport of pull request #18816 done by [Mergify](https://mergify.com).\nCherry-pick of a06b3a3f66943ca9003e52928ffe883d1609732b has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-18816\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit a06b3a3f6.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tdeleted by us:   docs/learn/learn.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":18819,"repository":"cosmos/cosmos-sdk","title":"docs: fix for links (backport #18816)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18819"},"id":"PVTI_lADOAAN9684ABqEwzgLcF6E","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"docs: fix for links (backport #18816)"},{"assignees":["julienrbrt","samricotta"],"content":{"body":"### Summary\r\n\r\nThe current bank module is heavily overloaded with jobs it needs to maintain. To name a few jobs it has: handle sends, handle account restrictions, handle delegation counting, minting and burning of coins. \r\n\r\nSome the jobs are fine and are part of a bank and some are not. We should write a new bank module that is extendable via hooks and reduce the size of the bank module significantly. \r\n\r\nSecondly, we should strive to make bank sends as fast as possible with minimal amount of gas needed. Through this we can easily define the execution model of bank within other VMs for provability. If we can write bank in a way that compiles simply to vms this would make it even better\r\n\r\n### Problem Definition\r\n\r\nBank is too verbose and handles too many things, we should strive to reduce the scope of the module, make it efficient and performant.  \r\n\r\n### Work Breakdown\r\n\r\nWork breakdown needs to be discussed, this is meant to be an issue to track the conversation and create a workscope in the future \r\n\r\n\r\nref related issues:\r\n\r\nhttps://github.com/cosmos/cosmos-sdk/issues/14453\r\nhttps://github.com/cosmos/cosmos-sdk/issues/14701\r\nhttps://github.com/cosmos/cosmos-sdk/issues/13212\r\nhttps://github.com/cosmos/cosmos-sdk/issues/12026\r\nhttps://github.com/cosmos/cosmos-sdk/issues/11388\r\nhttps://github.com/cosmos/cosmos-sdk/issues/9619\r\nhttps://github.com/cosmos/cosmos-sdk/issues/7113\r\nhttps://github.com/cosmos/cosmos-sdk/issues/3689\r\nhttps://github.com/cosmos/cosmos-sdk/issues/12404","number":17579,"repository":"cosmos/cosmos-sdk","title":"[Epic]: Bank/v2","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/17579"},"iCF Roadmap":"true","id":"PVTI_lADOAAN9684ABqEwzgLcfu8","labels":["C:x/bank","T:Epic"],"priority ":"Medium","project":"2024 üÜô & ‚û°  üìà","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"üëë Epic","title":"[Epic]: Bank/v2"},{"content":{"body":"### Summary\n\nTransaction simulation is an important part of the state machine. It allows users to predict the gas consumption of a transaction and the fees that will be needed. Due to the fact that we dont refund gas/fees by default getting closer to exact gas estimation is very important. \r\n\r\nThis is an area that has always been an area of issue in the Cosmos SDK. \n\n### Problem Definition\n\nTransaction simulation has always been off, recently it has become more unpredictable causing client side issue. \r\n\r\nThere has also been reports that if a chain has high throughput and lots of simulations that it has caused a different last result hash to be produced, but after countless tries to reproduce this without luck I gave up. The team injective has also spent many hours attempting to reproduce this without luck. \n\n### Work Breakdown\n\nwe should refactor or redesign the transaction simulation system to be more stable and predictable. \r\n\r\nThis issue is not well defined as we must first try to identify the issues in the current code. If we are able to refactor the code to be stable and we are happy with the current design, we should fix the issue. If we are not happy with the current design we should design and implement a new design. \r\n\r\n","number":18834,"repository":"cosmos/cosmos-sdk","title":"[Epic]: Transaction Simulator ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18834"},"id":"PVTI_lADOAAN9684ABqEwzgLdF9k","labels":["T: Client UX","T:Epic"],"priority ":"High","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Epic]: Transaction Simulator "},{"content":{"body":"This is an automatic backport of pull request #18852 done by [Mergify](https://mergify.com).\nCherry-pick of 64dbee647087c66634b37b2bdb97e914bf3b77cd has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-18852\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 64dbee647.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   client/tx/factory.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":18854,"repository":"cosmos/cosmos-sdk","title":"feat(client): add `WithFromName` to tx factory (backport #18852)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18854"},"id":"PVTI_lADOAAN9684ABqEwzgLfNXU","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"feat(client): add `WithFromName` to tx factory (backport #18852)"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nCurrently in x/authz, you can't give someone permission to delegate to all validators using the delegate permission. You have to include an AllowList or a DenyList. But if you want to give permission to delegate to all validators, you have to do the generic authorization for the message type. (Or you make your DenyList be some inactive validator)\r\n\r\n## Problem Definition\r\n\r\nRight now you have to use DenyList={inactive validator} or generic permissions to allow someone to delegate to all validators.\r\n\r\n## Proposal\r\n\r\nAllow empty DenyLists, or make it more explicit in the spec that the authz delegate permission is explicitly for if you want to limit what validators can be delegated to.\r\n\r\n____\r\n\r\n#### For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":11126,"repository":"cosmos/cosmos-sdk","title":"Authz allow delegate permissions to all validators","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/11126"},"id":"PVTI_lADOAAN9684ABqEwzgLfndI","labels":["T:feature-request","C:x/authz"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","size":"Small (1 Week)","status":"üìã Backlog","title":"Authz allow delegate permissions to all validators"},{"assignees":["facundomedica"],"content":{"body":"### Summary\r\n\r\nMultisigs in cosmos have been offchain natively. The coordination around off chain signing & coordination has only recently gotten better. With the advent of x/accounts we have a simple way for users to create on-chain multisigs. We should create a default one. \r\n\r\nShould we do create a multisig migration message to migrate existing ones? \r\n\r\n\r\n### Problem Definition\r\n\r\n_No response_\r\n\r\n### Proposed Feature\r\n\r\na multisig account using x/accounts which allows for on chain coordination of signing and execution. The last signer should be the one paying the fees to execute the tx as well. \r\n\r\n- migrate existing multisig to this new one\r\n- allow the multisig to be upgraded to add or remove participants ","number":18859,"repository":"cosmos/cosmos-sdk","title":"[Feature]: onchain multisig","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18859"},"id":"PVTI_lADOAAN9684ABqEwzgLfz70","labels":["T:feature-request","T: Client UX","C:x/accounts"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19988"],"need":"Nice To Have","priority ":"High","project":"x/accounts","quarter":"Q2","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Feature]: onchain multisig"},{"content":{"body":"### Summary\n\nWe have been discussing with the community on removing multiple signers (https://github.com/cosmos/cosmos-sdk/issues/18759). A ask from a few users was to provide an example/standard way of using multiple signers. This is a good show case of what is possible with x/accounts. \r\n\r\nThe goal of create an account that accepts multiple signers is to enable the existing use case in a transaction can have multiple signers. \r\n\r\nIf accepted as a adequate solution for multiple signers, we would remove/disable multsisigner support at the tx level.  \n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nAn account needs to be written that takes in many messages each with their own signer and a single message with many signers. \r\n\r\nfor better ux we should look into doing both of these functionalities in a single account to avoid needing to switch accounts to use the other functionality. I could be convinced otherwise, i.e. two accounts one with many signers per message and one with many signers per tx","number":18860,"repository":"cosmos/cosmos-sdk","title":"[Feature]: multiple signer account","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18860"},"id":"PVTI_lADOAAN9684ABqEwzgLf1cM","labels":["T:feature-request","C:x/tx","C:x/accounts"],"priority ":"Medium","project":"x/accounts","repository":"https://github.com/cosmos/cosmos-sdk","size":"Medium (2-3 Weeks)","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Feature]: multiple signer account"},{"content":{"body":"This is an automatic backport of pull request #18875 done by [Mergify](https://mergify.com).\nCherry-pick of bd04173012d282a0ad1f4b0d891b698a67265c48 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-18875\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit bd0417301.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   types/coin.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":18878,"repository":"cosmos/cosmos-sdk","title":"perf: Speedup coins.Sort() when coins is of length 1 (backport #18875)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18878"},"id":"PVTI_lADOAAN9684ABqEwzgLhl5g","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"perf: Speedup coins.Sort() when coins is of length 1 (backport #18875)"},{"content":{"body":"## Context\r\n\r\nhttps://github.com/cosmos/cosmos-sdk/blob/bd04173012d282a0ad1f4b0d891b698a67265c48/client/tx_config.go#L48-L51\r\n\r\n## Problem\r\n\r\nIn a test file I'd like to construct a transaction that uses the feegrant module. I want account B to pay the fee for a transaction submitted by account A. I'm using TxBuilder but I'm not sure if I should invoke `SetFeePayer` or `SetFeeGranter`.\r\n\r\n## Proposal\r\n\r\nIt would help me if this interface contained a Godoc that explained which one should be invoked for my use case.","number":18886,"repository":"cosmos/cosmos-sdk","title":"Clarification on SetFeePayer vs SetFeeGranter","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18886"},"id":"PVTI_lADOAAN9684ABqEwzgLix8s","labels":["T:Docs"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Clarification on SetFeePayer vs SetFeeGranter"},{"assignees":["tac0turtle"],"content":{"body":"This is an automatic backport of pull request #18888 done by [Mergify](https://mergify.com).\nCherry-pick of de4c9e743f51b12f60f27113f1f1948d78d0dd04 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-18888\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit de4c9e743.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   types/dec_coin.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":18890,"repository":"cosmos/cosmos-sdk","title":"perf: Speedup DecCoin.Sort() when coins is of length 1 (backport #18888)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18890"},"id":"PVTI_lADOAAN9684ABqEwzgLjQ8E","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"perf: Speedup DecCoin.Sort() when coins is of length 1 (backport #18888)"},{"content":{"body":"### Summary\r\n\r\nchanges required to make a seamless staked asset > delegation share > liquid staked asset flow\r\n\r\n\r\n\r\n### Problem Definition\r\n\r\nif you go to stride and try to convert staked assets into liquid staked tokens you have to click several times. There are a few related problems here.\r\n1. Every time a new delegation voucher is created the LSM module increments a sequence number, resulting in a new asset. In order to send an asset over IBC you need to know the sequence number in advance. So in order to combine the creation of a delegation voucher and an IBC send this means a client needs to be smart and check what the current counter number is and increment by one. If someone happens to create a delegation voucher the moment before you did your transaction will fail. So there needs to be a reliable way to issue the delegation voucher and send together. One way this could be solved is allowing someone to \"IBC send all delegation vouchers of any kind\"\r\n2. This solution would also solve a second problem which is today one must know the exact amount of tokens you are sending  to form an IBC transaction. If you could just \"send all tokens\" you wouldn't need to worry about how many tokens your delegation shares convert to, you can simply send everything you have.\r\n\r\nFinally, there is also a related problem where transactions will fail if users assets are currently vesting. If a user could \"convert all vested shares\" into delegation vouchers and combine this with the IBC send all functionality described above then we could have a very clean 1 click experience with no edge cases.\r\n\r\n### Proposed Feature\r\n\r\nThe shape of a complete solution would satisfy the following function:\r\n> Convert all vested tokens into delegation shares, send all delegation shares of any kind to this IBC address\r\n\r\ncc @zmanian ","number":18892,"repository":"cosmos/cosmos-sdk","title":"[Feature]: liquid staking UX requests","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18892"},"id":"PVTI_lADOAAN9684ABqEwzgLjbyA","labels":["T:feature-request"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"[Feature]: liquid staking UX requests"},{"assignees":["sontrinh16"],"content":{"body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### What happened?\r\n\r\nIn trying to use the `NewIntegrationApp` helper to test a module I noticed that the state written by `InitChain` sourced from `DefaultGenesis` is not written to state.\r\n\r\n\r\n\r\n### Cosmos SDK Version\r\n\r\nmain\r\n\r\n### How to reproduce?\r\n\r\nTo reproduce, run a modified `Example_oneModule` from https://github.com/cosmos/cosmos-sdk/blob/main/tests/integration/example/example_test.go#L119\r\n\r\nSee this PR/commit for a minimal repro:\r\n\r\nhttps://github.com/silasdavis/cosmos-sdk/pull/1\r\n\r\nIn that commit I have removed the part of the test that calls `RunMsg` to set the the params with `MaxMemoCharacters` changed to 1000.\r\n\r\nI would expect to see the params take their default values.\r\n\r\nInstead of observing params that take on the values set by `DefaultGenesis` you see that the params take on the zero value of the `Params` struct, indicating that the `InitChain` is not writing the initial genesis state to the underlying IAVL tree.","number":18910,"repository":"cosmos/cosmos-sdk","title":"[Bug]: NewIntegrationApp does not write default genesis to state","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18910"},"id":"PVTI_lADOAAN9684ABqEwzgLlVE8","labels":["T:Bug"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/21006"],"priority ":"Medium","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"false","sprint":"true","status":"ü•≥ Done","story Type":"üêû Bug","title":"[Bug]: NewIntegrationApp does not write default genesis to state"},{"assignees":["facundomedica","julienrbrt","atheeshp"],"content":{"body":"# Description\r\n\r\nCloses: #18781\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":18920,"repository":"cosmos/cosmos-sdk","title":"fix(server): consensus failure while restart node with wrong `chainId` in genesis","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18920"},"id":"PVTI_lADOAAN9684ABqEwzgLmOLE","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev","likhita-809","levisyin"],"status":"ü•≥ Done","title":"fix(server): consensus failure while restart node with wrong `chainId` in genesis"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Please also ensure that this is not a duplicate issue :)  \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\nIn the adding new modules docs for an upgrade https://github.com/cosmos/cosmos-sdk/blob/994219a4d2f467a0bd628d60d8670c1102edbe88/docs/core/upgrade.md#adding-new-modules-during-upgrades, the code snippet is:\r\n```\r\nupgradeInfo, err := app.UpgradeKeeper.ReadUpgradeInfoFromDisk()\r\nif err != nil {\r\n\tpanic(err)\r\n}\r\n\r\nif upgradeInfo.Name == \"my-plan\" && !app.UpgradeKeeper.IsSkipHeight(upgradeInfo.Height) {\r\n\tstoreUpgrades := storetypes.StoreUpgrades{\r\n\t\t// add store upgrades for new modules\r\n\t\t// Example:\r\n\t\t//    Added: []string{\"foo\", \"bar\"},\r\n\t\t// ...\r\n\t}\r\n\r\n\t// configure store loader that checks if version == upgradeHeight and applies store upgrades\r\n\tapp.SetStoreLoader(upgradetypes.UpgradeStoreLoader(upgradeInfo.Height, &storeUpgrades))\r\n}\r\n```\r\n\r\nWhy is the state machine reading from a file on disk though? This should be considered a bug imo, since that file is in a spot users are pretty liable to edit. State machine upgrades should be fully handled, internal to the state machine / block height triggers, right?\r\n\r\nAlso why do only new modules read from disk, whereas everything has upgrade handlers? (I'm on the whole pretty confused by the upgrade process)\r\n\r\n____\r\n\r\n## For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":10585,"repository":"cosmos/cosmos-sdk","title":"Upgrades for new modules: Why do you need to read from disk","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/10585"},"id":"PVTI_lADOAAN9684ABqEwzgLpoho","labels":["C:x/upgrade","T:question"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Upgrades for new modules: Why do you need to read from disk"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nreading through https://docs.cosmos.network/v0.44/modules/authz/05_client.html there's not enough information to understand how to use the feature. The client section only gives one example which has custom flags that are not listed. Do other message types have custom flags? Where can I find a list of messages? There's too much variation within this command to have such sparse docs.\r\n\r\n<!-- Short, concise description of the proposed feature -->\r\n\r\n## Problem Definition\r\n\r\n<!-- Why do we need this feature? \r\nWhat problems may be addressed by introducing this feature?\r\nWhat benefits does the SDK stand to gain by including this feature?\r\nAre there any disadvantages of including this feature? -->\r\n\r\n## Proposal\r\n\r\n<!-- Detailed description of requirements of implementation -->\r\n\r\n____\r\n\r\n#### For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":11122,"repository":"cosmos/cosmos-sdk","title":"authz docs are incomplete","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/11122"},"id":"PVTI_lADOAAN9684ABqEwzgLpotY","labels":["T:Docs"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"authz docs are incomplete"},{"assignees":["cool-develope"],"content":{"body":"We have a essentially a random value for `defaultBatchBufferSize` in `storage/store`. We need to investigate a value that is sufficient.\r\n\r\ncc @cool-develope \r\n","number":18937,"repository":"cosmos/cosmos-sdk","title":"Determine appropriate value for defaultBatchBufferSize","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18937"},"id":"PVTI_lADOAAN9684ABqEwzgLq4fw","labels":["C:Store"],"need":"Required","priority ":"Low","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","title":"Determine appropriate value for defaultBatchBufferSize"},{"content":{"body":"### Summary\r\n\r\nCache Context has some slow-ness to it, which is used in IBC + every deliver TX call + every cosmwasm entry + all over Osmosis. \r\n\r\nThis is from a 100 block pprof, where 20 seconds were spent in state machine execution. (So time here is 3% of state machine exec time!)\r\n![image](https://github.com/cosmos/cosmos-sdk/assets/6440154/01ab8e75-21aa-4fe5-b4b6-e16fa7465ca9)\r\n\r\nI don't see the relevant code in main, so I'm not sure whether this is worth doing things for in the mainline SDK seeing as store v2/etc, branch store remove this design and therefore costs. Raising the issue just because I'm not sure on the timeline. Will likely do small fixes in Osmosis fork, happy to put upstream if I can be pointed to where the canonical store v1 line is. Linking code links in Osmosis.\r\n\r\n### Problem Definition\r\n\r\n_No response_\r\n\r\n### Proposed Feature\r\n\r\nSuggestions:\r\n- Notice that we make a cache KV store for every store, even the ones that are likely entirely unused: https://github.com/osmosis-labs/cosmos-sdk/blob/734f99fba785cc04bfd369baf6123a5a6e182b9a/store/cachemulti/store.go#L78-L82\r\n- (Simple fix) we don't set the capacity. We should do that. (20% speed reduction)\r\n- We only make the btree inside CacheKV if we need it. Its always made here:  https://github.com/osmosis-labs/cosmos-sdk/blob/osmo/v0.47.5/store/cachekv/store.go#L40-L42 (and/or only make the map's if we need them) I suspect 75% or more of the btree's are unused. So if we did this for just btree's (easy) its a 18% saving. If we do it for every cacheKV map, its 36% savings.","number":18972,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Speedup CacheCtx","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18972"},"id":"PVTI_lADOAAN9684ABqEwzgLvFms","labels":["T:feature-request"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: Speedup CacheCtx"},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nWe were investigating patch [#18714](https://github.com/cosmos/cosmos-sdk/pull/18714).\r\n\r\nSome comments:\r\n1. The goal is to reset `GasMeter` instead of `BlockGasMeter`. So shouldn't we be using `withGasMeter` instead of `withBlockGasMeter` [here](https://github.com/cosmos/cosmos-sdk/blob/main/baseapp/abci.go#L757)?\r\n2. It‚Äôs probably better to move the reset code into the for loop [here](https://github.com/cosmos/cosmos-sdk/blob/main/baseapp/abci.go#L797). This helps guarantee that `GasMeter` for each tx are independent and don't affect each other. The same goes for `CheckTx`, the `GasMeter` could be reset [here](https://github.com/cosmos/cosmos-sdk/blob/main/baseapp/abci.go#L361C1-L361C1).\r\n\r\nApart from the recommendations above. Given that the bug is found on v0.47.6, I think it makes sense to backport the fix to v0.47.x? Or are those branches no longer maintained?\r\n\r\nAdditionally, the main branch was never affected by non-decodable transactions, since the check [here](https://github.com/cosmos/cosmos-sdk/blob/main/baseapp/abci.go#L798) catches the error early and returns a result with `GasUsed` set to 0. Nonetheless, resetting still helps guard against other future errors within `runTx` from contaminating gas usage for subsequent txs.\n\n### Cosmos SDK Version\n\n0.47\n\n### How to reproduce?\n\n_No response_","number":18978,"repository":"cosmos/cosmos-sdk","title":"[Bug]: Incomplete Patch #18714","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18978"},"id":"PVTI_lADOAAN9684ABqEwzgLwrOU","labels":["T:Bug"],"priority ":"Critical","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üêû Bug","title":"[Bug]: Incomplete Patch #18714"},{"content":{"body":"ServerV2 needs less from storage compared to what BaseApp needed to do. \r\n\r\nIn fact ServerV2, opposed to BaseApp, shoulders the responsibility of:\r\n- Handling branching: branching is not SS or SC dependent, branching simply needs to be the fastest version of an in memory DB KV changes transaction. \r\n- Handling gas: gas is also SS or SC independent, which means that it simply needs to deal with metering storage tx costs.\r\n\r\nTaking these examples into consideration, the Storage API needed by AppManager is the one defined [here](https://github.com/cosmos/cosmos-sdk/blob/fe8dd8ca749759d709aac148048f9120ab4e4921/server/v2/core/store/types.go#L12:L25), specifically:\r\n\r\n```go\r\n// Store defines the underlying storage engine of an app.\r\ntype Store interface {\r\n\t// StateLatest returns a readonly view over the latest\r\n\t// committed state of the store. Alongside the version\r\n\t// associated with it.\r\n\tStateLatest() (uint64, ReadonlyState, error)\r\n\r\n\t// StateAt returns a readonly view over the provided\r\n\t// state. Must error when the version does not exist.\r\n\tStateAt(version uint64) (ReadonlyState, error)\r\n\r\n\t// StateCommit commits the provided changeset and returns\r\n\t// the new state root of the state.\r\n\tStateCommit(changes []ChangeSet) (Hash, error)\r\n}\r\n\r\n// ChangeSet represents a change in a key and value of state.\r\n// Remove being true signals the key must be removed from state.\r\ntype ChangeSet struct {\r\n\t// Key defines the key being updated.\r\n\tKey []byte\r\n\t// Value defines the value associated with the updated key.\r\n\tValue []byte\r\n\t// Remove is true when the key must be removed from state.\r\n\tRemove bool\r\n}\r\n\r\n// ReadonlyState defines a sub-set of the methods exposed by store.KVStore.\r\n// The methods defined work only at read level.\r\ntype ReadonlyState interface {\r\n\tHas(key []byte) (bool, error)\r\n\tGet([]byte) ([]byte, error)\r\n\tIterator(start, end []byte) (store.Iterator, error)        // consider removing iterate?\r\n\tReverseIterator(start, end []byte) (store.Iterator, error) // consider removing reverse iterate\r\n}\r\n```\r\n\r\nNOTE: the `ChangeSet`¬†API does not have a notion of `store_key`¬†this is a concept that goes beyond the understanding of `ServerV2`¬† (at this point in time), but storev2 can split the Key to fetch the module and the key the module has written, examples (THIS IS STILL TBD):\r\n\r\n1. `[]byte{'b','a','n','k','\\n',0,'c','o','s','m','o','s'}`, `bytes.Index(key, \"\\n\")` could be used to identify when store_key ends and when the real key starts. (NOTE: the key is composed as `bank` (module name), `0` (balances state object prefix), `\r\n2. `[]byte{0,0, 'c','o','s','m','o','s'}`, `key[0]` could be used to identify the module name, this would be more efficient than using bytes.Index surely. RootStore would only need to keep a mapping between store key ID and store key: `map[uint8]string`, defined at App instantiation.\r\n\r\n","number":18981,"repository":"cosmos/cosmos-sdk","title":"refactor(storev2): Implement serverv2 required methods","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18981"},"id":"PVTI_lADOAAN9684ABqEwzgLxBMM","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19012"],"priority ":"High","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","size":"Medium (2-3 Weeks)","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"refactor(storev2): Implement serverv2 required methods"},{"content":{"body":"### Summary\n\nCosmos-SDK based nodes use the concept of the home directory, which defaults to a `.<daemon>` directory in the home folder of whichever user owns the node software. The config and data directories are then children of that home directory. This goes against the [XDG base directory specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-0.6.html), which puts config and data directories in `$XDG_CONFIG_HOME` a `$XDG_DATA_HOME` respectively.\r\n\r\nThis specific feature proposal would be to allow a user to specify different config and data directories instead of being hardcoded to sub directories of the daemon home so they can adhere to those standards while the software would maintain backwards compatibility.\r\n\r\nI would be happy to implement this feature myself should I receive indication that such a pull request could be merged.\n\n### Problem Definition\n\n> Why do we need this feature?\r\n> What problems may be addressed by introducing this feature?\r\n\r\nBlockchain nodes should follow the same standards that virtually all other software daemons designed for UNIX-like systems follow.\r\n\r\n> What benefits does the SDK stand to gain by including this feature?\r\n\r\nThis would greatly increase the discoverability of the software to administrators who are familiar with Linux server administration, but not the quirks of blockchain node software specifically. Most Linux users know that they can find configuration files in `/etc/my_daemon` and data in `/var/lib/my_daemon`, where the latter is also the home directory for the daemon user.\r\n\r\n> Are there any disadvantages of including this feature?\r\n\r\nIf done in a non-backwards compatible way then users would have to update their node software configuration. This proposal takes compatibility into consideration for that reason.\n\n### Proposed Feature\n\nI propose that the daemon have two additional flags:\r\n\r\n```\r\n--config-home    The directory to load configuration files from (default: <daemon_home>/config)\r\n--data-home    The directory to store node data in (default: <daemon_home>/data)\r\n```\r\n\r\nThis would allow users who wish to operate their daemons more in line with the well-established Linux directory conventions to opt into such a layout without disturbing any existing setups.\r\n\r\nCosmovisor would also have to be updated with an environment variable that allows the user to specify where it should discover upgrade binaries and manifests instead of a path based on the daemon home directory. Like the daemon itself, the default behavior would be backwards compatible.","number":18983,"repository":"cosmos/cosmos-sdk","title":"[Feature]: respect the XDG directory layout for configuration and data directories","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18983"},"id":"PVTI_lADOAAN9684ABqEwzgLxOOk","labels":["T:feature-request"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: respect the XDG directory layout for configuration and data directories"},{"content":{"body":"This is an automatic backport of pull request #18930 done by [Mergify](https://mergify.com).\nCherry-pick of 24a8123c2267e777e78db2cb959ee9a9484d5baf has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-18930\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 24a8123c2.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   testutil/network/network.go\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":18988,"repository":"cosmos/cosmos-sdk","title":"test: add NodeURI for clientCtx (backport #18930)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18988"},"id":"PVTI_lADOAAN9684ABqEwzgLyC9I","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"test: add NodeURI for clientCtx (backport #18930)"},{"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgE_1fg","title":"p2p for mempool","type":"DraftIssue"},"id":"PVTI_lADOAAN9684ABqEwzgLyGzE","project":"idea ü§î","title":"p2p for mempool"},{"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgE_1f0","title":"multi dimensional fees","type":"DraftIssue"},"id":"PVTI_lADOAAN9684ABqEwzgLyG0I","project":"idea ü§î","title":"multi dimensional fees"},{"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgE_1h0","title":"access pattern for parallelized state","type":"DraftIssue"},"id":"PVTI_lADOAAN9684ABqEwzgLyG7M","project":"idea ü§î","title":"access pattern for parallelized state"},{"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgE_2Hc","title":"staking unbonding queues","type":"DraftIssue"},"id":"PVTI_lADOAAN9684ABqEwzgLyIX0","project":"idea ü§î","title":"staking unbonding queues"},{"assignees":["tac0turtle"],"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nCurrently we have two service.reflection apis. \r\n\r\nThis is somewhat confusing and could be consolidated to one. \r\n\r\n## Proposal\r\n\r\nmerge both reflection apis into one and add file descriptors, mark it as v1. \r\n","number":13601,"repository":"cosmos/cosmos-sdk","title":"grpc service reflection. ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/13601"},"id":"PVTI_lADOAAN9684ABqEwzgLyeag","labels":["T: UX","T: Dev UX","T: Client UX","C: gRPC"],"priority ":"Medium","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"grpc service reflection. "},{"content":{"body":"This is an automatic backport of pull request #18993 done by [Mergify](https://mergify.com).\n\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":18998,"repository":"cosmos/cosmos-sdk","title":"chore: clean-up buf workspace (backport #18993)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/18998"},"id":"PVTI_lADOAAN9684ABqEwzgLzkq0","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"chore: clean-up buf workspace (backport #18993)"},{"assignees":["cool-develope"],"content":{"body":"### Summary\r\n\r\nWe will archive the `cosmos-db` repo in the near future. \r\n\r\n### Problem Definition\r\n\r\n`iavl v1` is currently using the `cosmos-db` backend, how to interact it on iavl?\r\n\r\n### Proposed Feature\r\n\r\n- [ ] Implement the own `RawDatabase` for key-value store\r\n- [ ] Implement the simple MemDB for testing purposes","number":19005,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Get rid of `cosmos-db` from store module","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19005"},"id":"PVTI_lADOAAN9684ABqEwzgL0Hjc","labels":["T:feature-request","C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19229"],"priority ":"High","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"[Feature]: Get rid of `cosmos-db` from store module"},{"content":{"body":"# Description\r\n\r\nFix computations in the `TokenizeShares` operations making the staking-simulation tests pass again. \r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":19056,"repository":"cosmos/cosmos-sdk","title":"fix: update `TokenizeShares` operation in staking simulation","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/19056"},"id":"PVTI_lADOAAN9684ABqEwzgL6Vhw","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev","mpoke"],"status":"ü•≥ Done","title":"fix: update `TokenizeShares` operation in staking simulation"},{"assignees":["julienrbrt"],"content":{"body":"### Summary\r\n\r\nAllow the governance module to execute messages in behalf of other modules, for example MsgDelegate from distribution module to delegate the community pool.\r\n\r\n### Problem Definition\r\n\r\nAs of today is possible to execute any message with governance proposals, but only if the governance module account is the only signer. \r\n\r\nThis is a test I made on sdk-47 but looking at the code we have the same issue also on sdk 50\r\n\r\ndraft_proposal.json\r\n```json\r\n{\r\n \"messages\": [\r\n  {\r\n   \"@type\": \"/cosmos.staking.v1beta1.MsgDelegate\",\r\n   \"delegator_address\": \"juno1jv65s3grqf6v6jl3dp4t6c9t9rk99cd83d88wr\",\r\n   \"validator_address\": \"junovaloper1zmtm0xax0xvak3mxejl5z9mmj0tzmgftslckeq\",\r\n   \"amount\": {\r\n    \"denom\": \"ujunox\",\r\n    \"amount\": \"990000653\"\r\n   }\r\n  }\r\n ],\r\n \"metadata\": \"ipfs://CID\",\r\n \"deposit\": \"10000000ujunox\",\r\n \"title\": \"Test delegate\",\r\n \"summary\": \"dimi\"\r\n}\r\n```\r\n\r\nerror while submitting\r\n```\r\nfailed to execute message; message index: 0: juno1jv65s3grqf6v6jl3dp4t6c9t9rk99cd83d88wr:\r\n  expected gov account as only signer for proposal message\"\r\n```\r\n\r\n\r\n`juno1jv65s3grqf6v6jl3dp4t6c9t9rk99cd83d88wr` is juno distributon module account address\r\n\r\n\r\ncommenting out signature verification make the governance proposal pass and the delegation message works correctly\r\n\r\nhttps://github.com/dimiandre/cosmos-sdk/commit/7805b69c8924a5d137b7e164f3f5e720ad78139f\r\n\r\n### Proposed Feature\r\n\r\nIt would be useful to allow governance module to sudo-execute messages in behalf of other modules too, for example to delegate part of the community pool to a specific set of validators, or authorizing a subgroup to do so using authz module grants. \r\n\r\nAn implementation to allow this can be adding a Sudo Execute message to the governance module that will proxy other module messages.\r\n\r\n\r\nThis feature might increase the attack surface trough proposals and it might require some additional checks like an allow list of messages to be set in genesis or via parameters.","number":19073,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Allow governance module to sudo execute other module messages","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19073"},"id":"PVTI_lADOAAN9684ABqEwzgL8gjo","labels":["C:x/gov","T:feature-request"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19304"],"need":"Required","priority ":"Medium","project":"Gov","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Feature]: Allow governance module to sudo execute other module messages"},{"content":{"body":"# Description\r\n\r\n~In `RedeemTokensForShares()`, [this line](https://github.com/cosmos/cosmos-sdk/blob/feature%2Fv0.47.x-ics-lsm/x/staking/keeper/msg_server.go#L858) establishes a 1:1  mapping between the redeemed token amount and shares.\r\nHowever, this mapping is accurate only when a validator hasn't received any rewards and hasn't been slashed.~\r\n\r\n~This PR changes the mapping by calculating shares as a fraction of the redeemed tokens\r\nand the total share token supply, akin to the approach taken [here](https://github.com/cosmos/cosmos-sdk/blob/feature%2Fv0.47.x-ics-lsm/x/staking/simulation/operations.go#L925-L927).~\r\n\r\nEdit:  This PR updates  [RedeemTokensForShares](https://github.com/cosmos/cosmos-sdk/blob/feature%2Fv0.47.x-ics-lsm/x/staking/keeper/msg_server.go#L821) to return an error when the redemption amount is too small and truncates to   0 shares. That prevents a panic in [SendCoins](https://github.com/cosmos/cosmos-sdk/blob/feature%2Fv0.47.x-ics-lsm/x/staking/keeper/msg_server.go#L912).\r\n\r\ncc @sampocs\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":19076,"repository":"cosmos/cosmos-sdk","title":"fix: prevent panic in `RedeemTokensForShares` when too few tokens are redeemed","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/19076"},"id":"PVTI_lADOAAN9684ABqEwzgL9daI","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev","mpoke"],"status":"ü•≥ Done","title":"fix: prevent panic in `RedeemTokensForShares` when too few tokens are redeemed"},{"content":{"body":"Add the following methods to the `VersionedDatabase` interface:\n\n* `VersionExists(v uint64) (bool, err)`\n* `LatestVersion() (uint64, error)`","number":19091,"repository":"cosmos/cosmos-sdk","title":"store/v2: Support VersionExists() in State Storage (SS)","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19091"},"id":"PVTI_lADOAAN9684ABqEwzgL_oZ4","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19299"],"need":"Required","priority ":"Low","project":"Store","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"store/v2: Support VersionExists() in State Storage (SS)"},{"content":{"body":"This is an automatic backport of pull request #19106 done by [Mergify](https://mergify.com).\nCherry-pick of e621eb6b1b9462af437e30929820aca2ea7958b8 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-19106\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit e621eb6b1.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   x/auth/tx/builder_test.go\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tdeleted by us:   x/auth/CHANGELOG.md\n\tboth modified:   x/auth/tx/builder.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":19108,"repository":"cosmos/cosmos-sdk","title":"fix: allow empty public keys when setting signatures (backport #19106)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/19108"},"id":"PVTI_lADOAAN9684ABqEwzgMB1Rs","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev","testinginprod"],"status":"ü•≥ Done","title":"fix: allow empty public keys when setting signatures (backport #19106)"},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nPer https://pkg.go.dev/github.com/spf13/cobra#Command and https://github.com/spf13/cobra/blob/v1.8.0/site/content/user_guide.md#example , only optional arguments should be wrapped in square brackets and alternatives should be wrapped in curly braces.\r\n\r\nSo the widespread use of square brackets around command arguments should be dropped in favor of e.g. angle brackets or nothing at all. For example, [`debug pubkey-raw`](https://github.com/cosmos/cosmos-sdk/blob/main/client/debug/main.go#L184):\r\n```diff\r\n-\t\tUse:   \"pubkey-raw [pubkey] -t [{ed25519, secp256k1}]\",\r\n+\t\tUse:   \"pubkey-raw <pubkey> [-t {ed25519, secp256k1}]\",\r\n```\n\n### Cosmos SDK Version\n\nmain\n\n### How to reproduce?\n\n_No response_","number":19149,"repository":"cosmos/cosmos-sdk","title":"[Bug]: CLI argument documentation uses incorrect syntax","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19149"},"id":"PVTI_lADOAAN9684ABqEwzgMDYD0","labels":["T:Docs","T: Client UX"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Bug]: CLI argument documentation uses incorrect syntax"},{"content":{"body":"# Description\r\n\r\nTested on:\r\n\r\n- Juno\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":19162,"repository":"cosmos/cosmos-sdk","title":"chore: prepare v0.47.8","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/19162"},"id":"PVTI_lADOAAN9684ABqEwzgMGfGo","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"chore: prepare v0.47.8"},{"content":{"body":"# Description\r\n\r\nCloses: NA\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":19190,"repository":"cosmos/cosmos-sdk","title":"chore: merge v0.47.8 into v0.47.x-ics-lsm branch ","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/19190"},"id":"PVTI_lADOAAN9684ABqEwzgMIqXo","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"chore: merge v0.47.8 into v0.47.x-ics-lsm branch "},{"content":{"body":"This is an automatic backport of pull request #19192 done by [Mergify](https://mergify.com).\nCherry-pick of 96ecafd0ba896b6052be413afa2eaa34fb15dadd has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-19192\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 96ecafd0b.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   docs/docs/core/06-grpc_rest.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":19194,"repository":"cosmos/cosmos-sdk","title":"docs: fix typo in 06-grpc_rest.md (backport #19192)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/19194"},"id":"PVTI_lADOAAN9684ABqEwzgMIzsc","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"docs: fix typo in 06-grpc_rest.md (backport #19192)"},{"content":{"body":"This is an automatic backport of pull request #19202 done by [Mergify](https://mergify.com).\nCherry-pick of bda2d11232aae6932e735e987464656070691ed9 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-19202\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit bda2d1123.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   baseapp/abci.go\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":19218,"repository":"cosmos/cosmos-sdk","title":"fix(baseapp): ensure ABCI listeners always run in FinalizeBlock (backport #19202)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/19218"},"id":"PVTI_lADOAAN9684ABqEwzgMKEFc","labels":["conflicts"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"fix(baseapp): ensure ABCI listeners always run in FinalizeBlock (backport #19202)"},{"content":{"body":"### Summary\n\nAs we deprecate the context due to the design of server/v2 we will need modules to fetch data from the consensus module if they need the consensus params. this poises an new overhead.\r\n\r\n\n\n### Problem Definition\n\nAsking users to fetch data from other modules means there is another layer of decoding needing to happen. In the case of context params they would need to fetch it from consensus, while it may already be in the cache, it will need to be decoded each time. \n\n### Proposed Feature\n\nAdd a way object cache to be used with collections so items that are repeatedly fetched from other modules will be stored in this cache already decoded. The cache would need to be flushed upon every write. \r\n\r\nThis is somewhat similar to interblock cache except, the change is that the values will already be decoded. We should avoid doing this for all state but for values that are touched repeatedly in a block this would reduce the over head. \r\n\r\n\r\n**Future Optimisations**: If we have a way to prefetch keys from store we could decode them ahead of time there fore reducing the total time of execution by avoiding the fetch and decode in the execution path. ","number":19223,"repository":"cosmos/cosmos-sdk","title":"[Feature (collections)]: decoded object cache","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19223"},"id":"PVTI_lADOAAN9684ABqEwzgMKjsU","labels":["T:feature-request","C:collections"],"priority ":"Critical","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üÜï Feature","title":"[Feature (collections)]: decoded object cache"},{"content":{"body":"With https://github.com/cosmos/cosmos-sdk/pull/19012, we removed all `KVStore` implementations and the type itself.\r\n\r\nThere may be a need for certain KVStore `implementations`. The `KVStore` type itself may still be defined in server/v2, but some type implementations may exist in store/v2.\r\n\r\nOne that primarily comes to mind is `MemKVStore`. This issue is just to mainly track and make sure we have all KVStore implementations that clients may rely on (e.g. x/capability in IBC relies on `MemKVStore`).\r\n\r\ncc @testinginprod  ","number":19225,"repository":"cosmos/cosmos-sdk","title":"store: introduce a memkv store","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19225"},"id":"PVTI_lADOAAN9684ABqEwzgMK2Kw","labels":["C:Store"],"priority ":"Medium","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"store: introduce a memkv store"},{"assignees":["julienrbrt"],"content":{"body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### What happened?\r\n\r\nCosmovisor restarts with the new binary immediately after running `add-upgrade` with the `--upgrade-height`  flag.\r\n\r\n### Cosmos SDK Version\r\n\r\nCosmovisor v1.5.0\r\n\r\n### How to reproduce?\r\n\r\n1. Start a [Gaia v13](https://github.com/cosmos/gaia/releases/tag/v13.0.2) chain with Cosmovisor v1.5.0\r\n2. Download a [Gaia v14](https://github.com/cosmos/gaia/releases/tag/v14.0.0-rc0) binary to `gaiad`\r\n3. Run `cosmovisor add-upgrade v14 gaiad --upgrade-height 300` at any point before reaching block 300.\r\n4. The node will start right away with the downloaded binary.\r\n\r\nI used this script to run steps 2 and 3:\r\n```\r\n#!/bin/bash\r\n\r\nexport DAEMON_NAME=gaiad\r\nexport DAEMON_HOME=/home/gaia/.gaia\r\nexport DAEMON_DATA_BACKUP_DIR=/home/gaia/backup\r\nheight=$(curl -s http://localhost:26657/abci_info | jq -r '.result.response.last_block_height')\r\nversion=$(curl -s http://localhost:26657/abci_info | jq -r '.result.response.version')\r\necho \"The node is running $version at height $height.\"\r\nwget https://github.com/cosmos/gaia/releases/download/v14.0.0-rc0/gaiad-v14.0.0-rc0-linux-amd64 -q -O gaiad\r\nchmod +x gaiad\r\ncommand=\"cosmovisor add-upgrade v14 gaiad --upgrade-height 300\"\r\necho \"$command\"\r\n$command\r\necho \"Waiting ten seconds...\"\r\nsleep 10\r\nheight=$(curl -s http://localhost:26657/abci_info | jq -r '.result.response.last_block_height')\r\nversion=$(curl -s http://localhost:26657/abci_info | jq -r '.result.response.version')\r\necho \"The node is running $version at height $height.\"\r\n```\r\n\r\nUpgrade info:\r\n```\r\ncat ~/.gaia/cosmovisor/upgrades/v14/upgrade-info.json \r\n{\"name\":\"v14\",\"time\":\"0001-01-01T00:00:00Z\",\"height\":300}\r\n```\r\nPre-upgrade `cosmos_sdk_version: v0.45.16` (Gaia v13.0.2)\r\nPost-upgrade `cosmos_sdk_version: v0.45.16` (Gaia v14.0.0-rc0)","number":19227,"repository":"cosmos/cosmos-sdk","title":"[Bug]: [Cosmovisor] Upgrade is applied immediately when using the --upgrade-height flag","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19227"},"id":"PVTI_lADOAAN9684ABqEwzgMLEaE","labels":["T:Bug","C:Cosmovisor"],"priority ":"Medium","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","sprint":"true","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"üêû Bug","title":"[Bug]: [Cosmovisor] Upgrade is applied immediately when using the --upgrade-height flag"},{"content":{"body":"When introducing multiple choice proposal, we've aliased the voting options to keep backward compatibility: https://github.com/cosmos/cosmos-sdk/blob/41c84d6/proto/cosmos/gov/v1/gov.proto#L30-L54\r\nThe choice has been made to have the options: option 1, 2, 3,.. as default while the previous options: yes, no, abstain, ... as alias.\r\n\r\nThese option can be used interchangeably in sign mode direct, which is perfect for the use case of multiple choice proposal, however in sign mode textual it does not work.\r\n\r\nIt has been investigated to create a custom message render option (https://github.com/cosmos/cosmos-sdk/pull/18849#issuecomment-1867560107) for gov voting, however at voting we do not know the proposal type for make the choice.\r\nThe quick solution is to inverse the alias, leaving yes, no, abstain as default and option 1, 2, 3 as the alias.\r\nThe drawback is that voting for a multiple choice proposal using textual will be weird (it will display vote yes, no, abstain) while you are actually voting on an option.","number":19228,"repository":"cosmos/cosmos-sdk","title":"Textual and Voting Options","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19228"},"id":"PVTI_lADOAAN9684ABqEwzgMLMqU","labels":["T: UX","C:x/gov"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19718"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Textual and Voting Options"},{"assignees":["alexanderbez"],"content":{"body":"This is an automatic backport of pull request #19226 done by [Mergify](https://mergify.com).\nCherry-pick of a69836b3b6a92e94fd0e9a075627d3652b84a241 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-19226\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit a69836b3b.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   x/staking/keeper/validator_test.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   x/staking/keeper/validator.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":19231,"repository":"cosmos/cosmos-sdk","title":"fix(x/staking): Refactor GetLastValidators  (backport #19226)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/19231"},"id":"PVTI_lADOAAN9684ABqEwzgMLeQ4","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"fix(x/staking): Refactor GetLastValidators  (backport #19226)"},{"assignees":["facundomedica"],"content":{"body":"### Summary\n\nIn the server/v2 work we have been adding in prepare, process and vote extensions. Since these already did exist we should migrate the defaults to server/v2 to be available for use. \n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nmigrate baseapp ABCI 2.0 defaults to server/v2. \r\n\r\nBranch: server_modular ","number":19243,"repository":"cosmos/cosmos-sdk","title":"[Feature] (server/v2): Provide Defaults for Prepare, Process & vote extensions ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19243"},"id":"PVTI_lADOAAN9684ABqEwzgMMqg0","labels":["T:feature-request","C:server/v2"],"need":"Required","priority ":"High","project":"Server","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Feature] (server/v2): Provide Defaults for Prepare, Process & vote extensions "},{"content":{"body":"### Summary\r\n\r\n- [ ] Add `InitGenesis` to appmanager and stf where its needed. The design can be similar to baseapp as future changes have not been finalized. \r\n- [ ] Wire InitGenesis and ExportGenesis in runtime/v2\r\n\r\n### Problem Definition\r\n\r\n_No response_\r\n\r\n### Proposed Feature\r\n\r\nAdd initGenesis to server/v2\r\n\r\nBranch: server_modular ","number":19244,"repository":"cosmos/cosmos-sdk","title":"[Feature] (server/v2): InitGenesis ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19244"},"id":"PVTI_lADOAAN9684ABqEwzgMMq-Q","labels":["T:feature-request","C:server/v2"],"need":"Required","priority ":"Critical","project":"Server","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","size":"Large (3-6 weeks)","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Feature] (server/v2): InitGenesis "},{"content":{"body":"### Summary\n\nIn baseapp we have atomic multimessage, this needs to be added to server/v2 along with non atomic multimessage. \n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nAdd multimessage in both atomic and non atomic designs. \r\n\r\nAtomic: if one message in the tx fails, the entire tx fails\r\nNon-Atomic: if one message in the fails, the entire tx can still succeed\r\n\r\n\r\nBranch: server_modular","number":19245,"repository":"cosmos/cosmos-sdk","title":"[Feature] (server/v2): Handle nonatomic multimessage ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19245"},"id":"PVTI_lADOAAN9684ABqEwzgMMriU","labels":["T:feature-request","C:server/v2"],"need":"Required","priority ":"High","project":"Server","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","size":"Medium (2-3 Weeks)","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Feature] (server/v2): Handle nonatomic multimessage "},{"assignees":["tac0turtle"],"content":{"body":"### Summary\n\nCurrently consensus is passed to baseapp in order to check which msgs are allowed to run, in server/v2 we will add pre and post message hooks. This allows consensus to listen to all message without needing to be passed to the server. \n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nImplement premessage hook in consensus\r\n\r\n\r\nBranch: server_modular\r\n\r\n\r\n**Blocked on RFC**","number":19246,"repository":"cosmos/cosmos-sdk","title":"[Feature](consensus module): Implement consensus messages","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19246"},"id":"PVTI_lADOAAN9684ABqEwzgMMr9o","labels":["T:feature-request","C:x/consensus","C:server/v2"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19483"],"need":"Required","priority ":"Medium","project":"Server","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Feature](consensus module): Implement consensus messages"},{"assignees":["testinginprod"],"content":{"body":"### Summary\n\nWe need to plugin the gaskv store and gas config to allow people to override the default settings. The gas store should wrap the branchdb. \r\n\r\nSince we avoid panics to signify outofgas and now use errors, we need to write tests to make sure it works as expected. \n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nplug in the gas store into STF and provide an api runtime can override with custom gas configs. \r\n\r\nWe should provide a noop gas store for things that have unlimited gas in the context. This way there is no gas checking and it is optimised compared to the normal gas store. ","number":19247,"repository":"cosmos/cosmos-sdk","title":"[Feature](server/v2/stf): Plugin gas meter/config  ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19247"},"id":"PVTI_lADOAAN9684ABqEwzgMMsog","labels":["T:feature-request","C: gas","C:server/v2"],"need":"Required","priority ":"High","project":"Server","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Feature](server/v2/stf): Plugin gas meter/config  "},{"content":{"body":"This is an automatic backport of pull request #19177 done by [Mergify](https://mergify.com).\nCherry-pick of fe32bcc1d65412c9b5737672956f0638c729ab7d has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-19177\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit fe32bcc1d.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   baseapp/abci_utils.go\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tdeleted by us:   baseapp/abci_utils_test.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":19250,"repository":"cosmos/cosmos-sdk","title":"fix: skip same-sender non-sequential sequence and then add others txs new solution (backport #19177)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/19250"},"id":"PVTI_lADOAAN9684ABqEwzgMM-Ss","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev","alexanderbez","facundomedica","testinginprod"],"status":"ü•≥ Done","title":"fix: skip same-sender non-sequential sequence and then add others txs new solution (backport #19177)"},{"assignees":["tac0turtle"],"content":{"body":"### Summary\n\nWrite an rfc in which it decribes 4 things:\r\n\r\n- pre message hook & handler\r\n- message handler\r\n- post message hook & handler\r\n- consensus messages & handler\n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nWrite an rfc for the new hooks and handlers ","number":19254,"repository":"cosmos/cosmos-sdk","title":"[Feature](server/v2): write rfc on handlers","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19254"},"id":"PVTI_lADOAAN9684ABqEwzgMNKHY","labels":["T:feature-request","C:server/v2"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19263"],"need":"Required","priority ":"Critical","project":"Server","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","size":"Large (3-6 weeks)","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Feature](server/v2): write rfc on handlers"},{"content":{"body":"Currently the SS layer has zero explicit caching (the underlying DB itself may of course cache but that is opaque to us).\r\n\r\nThis issue is to mainly explore if we should add an explicit cache layer to the SS backend. The cache, if it were to exist, would be isolated and local to SS only (i.e. not a KVStore). It would also store bytes, not objects.\r\n\r\nThis should be explored post initial release as it's not critical.\r\n\r\ncc @tac0turtle @testinginprod ","number":19264,"repository":"cosmos/cosmos-sdk","title":"Explore SS Cache","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19264"},"id":"PVTI_lADOAAN9684ABqEwzgMOu7Q","labels":["C:Store"],"priority ":"Medium","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"Explore SS Cache"},{"content":{"body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### What happened?\r\n\r\nWhile auditing cometbft to evaluate how we can use an incremental JSON parser instead of always invoking cometbft/libs/json.Unmarshal(bytes...) which requires reading an entire Genesis file into RAM, I noticed this code https://github.com/cosmos/cosmos-sdk/blob/430b53236ef6fb775fe1eb753c0154b17ba419ac/x/genutil/types/genesis.go#L91-L101\r\n\r\nThe need to invoke cmtjson.Unmarshal as an alternative seems to pigeonhole the need to slurp in all the bytes\r\n\r\n### Unnecessary invocation of bufio.NewReader\r\nThis code is unnecessary to pass in `bufio.NewReader(*os.File)` yet immediately just invoking `io.ReadAll`, to read the entire file into RAM\r\n\r\n\r\n### Prognosis\r\nThese problems are from pigeon holing and over-generalizations because:\r\na) The use of AppGenesisFromFile is in server/start.go and it opens an `*os.File` which implements [io.ReadSeekCloser](https://pkg.go.dev/io#ReadSeekCloser) which can help us in the case that the encoding/json parsing would work and perhaps not having known about io.ReadSeeker might have constrained the thinking and implementation but even bytes.NewReader implements\r\n\r\n```diff\r\ndiff --git a/x/genutil/types/genesis.go b/x/genutil/types/genesis.go\r\nindex b5b335ca1..8bbbbfa9d 100644\r\n--- a/x/genutil/types/genesis.go\r\n+++ b/x/genutil/types/genesis.go\r\n@@ -89,35 +89,72 @@ func (ag *AppGenesis) SaveAs(file string) error {\r\n \r\n // AppGenesisFromReader reads the AppGenesis from the reader.\r\n func AppGenesisFromReader(reader io.Reader) (*AppGenesis, error) {\r\n+\t// If the reader already implements io.ReadSeeker, just use it.\r\n+\tif rs, ok := reader.(io.ReadSeeker); ok {\r\n+\t\treturn fAppGenesis(rs)\r\n+\t}\r\n+\r\n+\t// Otherwise compose for it the io.ReadSeeker using bytes.NewReader\r\n \tjsonBlob, err := io.ReadAll(reader)\r\n \tif err != nil {\r\n \t\treturn nil, err\r\n \t}\r\n+\treturn fAppGenesis(bytes.NewReader(jsonBlob))\r\n+}\r\n \r\n-\tvar appGenesis AppGenesis\r\n-\tif err := json.Unmarshal(jsonBlob, &appGenesis); err != nil {\r\n-\t\t// fallback to CometBFT genesis\r\n-\t\tvar ctmGenesis cmttypes.GenesisDoc\r\n-\t\tif err2 := cmtjson.Unmarshal(jsonBlob, &ctmGenesis); err2 != nil {\r\n-\t\t\treturn nil, fmt.Errorf(\"error unmarshalling AppGenesis: %w\\n failed fallback to CometBFT GenDoc: %w\", err, err2)\r\n-\t\t}\r\n+// fAppGenesis takes in an io.ReadSeeker and firstly attempts to JSON parse\r\n+// it using the Go standard library's encoding/json, and if that fails, falls\r\n+// back to using cometbft genesis parsing with cmtjson.Unmarshal.\r\n+func fAppGenesis(rs io.ReadSeeker) (*AppGenesis, error) {\r\n+\tappGenesis := new(AppGenesis)\r\n+\tdec := json.NewDecoder(rs)\r\n+\terr := dec.Decode(appGenesis)\r\n+\tif err == nil {\r\n+\t\treturn appGenesis, nil\r\n+\t}\r\n \r\n-\t\tappGenesis = AppGenesis{\r\n-\t\t\tAppName: version.AppName,\r\n-\t\t\t// AppVersion is not filled as we do not know it from a CometBFT genesis\r\n-\t\t\tGenesisTime:   ctmGenesis.GenesisTime,\r\n-\t\t\tChainID:       ctmGenesis.ChainID,\r\n-\t\t\tInitialHeight: ctmGenesis.InitialHeight,\r\n-\t\t\tAppHash:       ctmGenesis.AppHash,\r\n-\t\t\tAppState:      ctmGenesis.AppState,\r\n-\t\t\tConsensus: &ConsensusGenesis{\r\n-\t\t\t\tValidators: ctmGenesis.Validators,\r\n-\t\t\t\tParams:     ctmGenesis.ConsensusParams,\r\n-\t\t\t},\r\n-\t\t}\r\n+\t// Otherwise fallback to CometBFT genesis parsing.\r\n+\t// Rewind the reader to the front.\r\n+\tif _, serr := rs.Seek(0, io.SeekStart); serr != nil {\r\n+\t\treturn nil, fmt.Errorf(\"error seeking back to the front: %w\\n had an error before: %w\", serr, err)\r\n+\t}\r\n+\r\n+\t// TODO: Once cmtjson implements the incremental JSON parser we shall need\r\n+\t// to replace this code to avoid pigeon-holing the implementation to slurp in all the bytes.\r\n+\tjsonBlob, jerr := io.ReadAll(rs)\r\n+\tif jerr != nil {\r\n+\t\treturn nil, jerr\r\n+\t}\r\n+\r\n+\tappGenesis, err2 := appGenesisFromCometBFT(jsonBlob)\r\n+\tif err2 != nil {\r\n+\t\treturn nil, fmt.Errorf(\"error unmarshalling AppGenesis: %w\\n failed fallback to CometBFT GenDoc: %w\", err, err2)\r\n \t}\r\n \r\n-\treturn &appGenesis, nil\r\n+\treturn appGenesis, nil\r\n+}\r\n+\r\n+func appGenesisFromCometBFT(jsonBlob []byte) (*AppGenesis, error) {\r\n+\tctmGenesis := new(cmttypes.GenesisDoc)\r\n+\t// TODO: Once cmtjson implements the incremental JSON parser we shall need\r\n+\t// to replace this code to avoid pigeon-holing the implementation to slurp in all the bytes.\r\n+\tif err2 := cmtjson.Unmarshal(jsonBlob, ctmGenesis); err2 != nil {\r\n+\t\treturn nil, fmt.Errorf(\"error unmarshalling AppGenesis: %w\\n failed fallback to CometBFT GenDoc: %w\", err, err2)\r\n+\t}\r\n+\r\n+\treturn &AppGenesis{\r\n+\t\tAppName: version.AppName,\r\n+\t\t// AppVersion is not filled as we do not know it from a CometBFT genesis\r\n+\t\tGenesisTime:   ctmGenesis.GenesisTime,\r\n+\t\tChainID:       ctmGenesis.ChainID,\r\n+\t\tInitialHeight: ctmGenesis.InitialHeight,\r\n+\t\tAppHash:       ctmGenesis.AppHash,\r\n+\t\tAppState:      ctmGenesis.AppState,\r\n+\t\tConsensus: &ConsensusGenesis{\r\n+\t\t\tValidators: ctmGenesis.Validators,\r\n+\t\t\tParams:     ctmGenesis.ConsensusParams,\r\n+\t\t},\r\n+\t}, nil\r\n }\r\n \r\n // AppGenesisFromFile reads the AppGenesis from the provided file.\r\n@@ -127,13 +164,15 @@ func AppGenesisFromFile(genFile string) (*AppGenesis, error) {\r\n \t\treturn nil, err\r\n \t}\r\n \r\n-\tappGenesis, err := AppGenesisFromReader(bufio.NewReader(file))\r\n+\tappGenesis, err := AppGenesisFromReader(file)\r\n+\tferr := file.Close()\r\n+\r\n \tif err != nil {\r\n \t\treturn nil, fmt.Errorf(\"failed to read genesis from file %s: %w\", genFile, err)\r\n \t}\r\n \r\n-\tif err := file.Close(); err != nil {\r\n-\t\treturn nil, err\r\n+\tif ferr != nil {\r\n+\t\treturn nil, ferr\r\n \t}\r\n \r\n \treturn appGenesis, nil\r\n```\r\n\r\n### Cosmos SDK Version\r\n\r\nmain\r\n\r\n### How to reproduce?\r\n\r\nPlease see my detailed report.\r\n\r\n/cc @elias-orijtech @ValarDragon ","number":19269,"repository":"cosmos/cosmos-sdk","title":"perf: x/genutil/types: AppGenesisFromFile and AppGenesisFromReader are unnecessarily inefficient by fully slurping the io.Reader to RAM then invoking json.Unmarshal then attempting on error to invoke cometbft/cmtjson.Unmarshal","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19269"},"id":"PVTI_lADOAAN9684ABqEwzgMP-bs","priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"perf: x/genutil/types: AppGenesisFromFile and AppGenesisFromReader are unnecessarily inefficient by fully slurping the io.Reader to RAM then invoking json.Unmarshal then attempting on error to invoke cometbft/cmtjson.Unmarshal"},{"assignees":["facundomedica"],"content":{"body":"This is an automatic backport of pull request #19284 done by [Mergify](https://mergify.com).\nCherry-pick of a86a83f761383c1ea434925cddd199cd5a271303 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-19284\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit a86a83f76.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   baseapp/abci_utils.go\n\tboth modified:   baseapp/abci_utils_test.go\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":19288,"repository":"cosmos/cosmos-sdk","title":"test(baseapp): Refactor tx selector tests + better comments  (backport #19284)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/19288"},"id":"PVTI_lADOAAN9684ABqEwzgMTOL8","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"test(baseapp): Refactor tx selector tests + better comments  (backport #19284)"},{"assignees":["tac0turtle","samricotta","likhita-809"],"content":{"body":"### Summary\r\n\r\nWith the merge of https://github.com/cosmos/cosmos-sdk/pull/19041 we introduced a service bundler, this is meant to replace unwrapping context within modules. \r\n\r\n### Problem Definition\r\n\r\n_No response_\r\n\r\n### Proposed Feature\r\n\r\nMigrate all modules to use environment instead of unwrapping context. \r\n\r\n- [x] auth\r\n- [x] authz\r\n- [x] #19417\r\n- [x] bank\r\n- [x] #19487\r\n- [x] consensus\r\n- [x] #19444\r\n- [x] feegrant\r\n- [x] #19442\r\n- [x] groups\r\n- [x] [mint](https://github.com/cosmos/cosmos-sdk/issues/19373)\r\n- [x] [nft](https://github.com/cosmos/cosmos-sdk/issues/19364)\r\n- [x] [protocolpool](https://github.com/cosmos/cosmos-sdk/issues/19401)\r\n- [x] staking\r\n- [x] slashing\r\n- [x] upgrade","number":19290,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Migrate modules to use Environment ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19290"},"id":"PVTI_lADOAAN9684ABqEwzgMTmPQ","labels":["T:feature-request","C:server/v2"],"need":"Required","priority ":"High","project":"Server","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","size":"Large (3-6 weeks)","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Feature]: Migrate modules to use Environment "},{"assignees":["tac0turtle"],"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nDue to the limitations of amino signing we need to remove the ability to sign messages that use the new unordered field in the tx from being signed with amino. \n\n### Cosmos SDK Version\n\nmain\n\n### How to reproduce?\n\n_No response_","number":19291,"repository":"cosmos/cosmos-sdk","title":"[Bug]: remove amino support in unordered txs","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19291"},"id":"PVTI_lADOAAN9684ABqEwzgMTm4Y","labels":["T:Bug"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19700","https://github.com/cosmos/cosmos-sdk/pull/20533"],"need":"Required","priority ":"Critical","quarter":"Q3","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","size":"Small (1 Week)","sprint":"true","status":"ü•≥ Done","story Type":"üêû Bug","title":"[Bug]: remove amino support in unordered txs"},{"content":{"body":"**Overview** \r\nCurrently we have 2 advanced tutorials on how to use vote extensions. We have the tutorials that b9 created but these need updating and arent in the same location.\r\n\r\n**Solution**\r\n- Create a new tutorial in `sdk-tutorials` on how to build a module","number":116,"repository":"cosmos/cosmos-sdk-docs","title":"feat: tutorial on \"how to build a module\"","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk-docs/issues/116"},"id":"PVTI_lADOAAN9684ABqEwzgMV1lU","labels":["documentation"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk-docs","status":"üìã Backlog","story Type":"‚≠êÔ∏è User story","title":"feat: tutorial on \"how to build a module\""},{"content":{"body":"This is a tracking issue of the work left in runtime/v2:\r\n\r\n- [x] #19722\r\nCurrently runtime/v2 uses legacy concepts.\r\n- [x] Wire TxValidator in modules (https://github.com/cosmos/cosmos-sdk/pull/19949)\r\n- [x] #19404\r\n- [x] Wire Pre/Post msg handler in runtime (https://github.com/cosmos/cosmos-sdk/pull/19639)\r\n- [x] https://github.com/cosmos/cosmos-sdk/issues/19330\r\n- [x] #19436\r\n- [x] Investigate alternatives to runtime.BaseAppOptions (circuit)\r\n- [x] #19587\r\n- [x] https://github.com/cosmos/cosmos-sdk/issues/19244\r\n- [x] #19542\r\n- [x] https://github.com/cosmos/cosmos-sdk/pull/19591","number":19324,"repository":"cosmos/cosmos-sdk","title":"Runtime/v2 ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19324"},"id":"PVTI_lADOAAN9684ABqEwzgMXnoE","labels":["C:server/v2"],"priority ":"High","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"Runtime/v2 "},{"content":{"body":"# Description\r\n\r\nCloses: NA\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\nUpdate the changelog for the special branch https://github.com/cosmos/cosmos-sdk/tree/feature/v0.47.x-ics-lsm that is going to be used by Gaia v15. \r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":19325,"repository":"cosmos/cosmos-sdk","title":"docs: update changelog","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/19325"},"id":"PVTI_lADOAAN9684ABqEwzgMX2tc","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"docs: update changelog"},{"content":{"body":"","number":19326,"repository":"cosmos/cosmos-sdk","title":"Implement the process to migrate the whole state at the given height to the new store/v2 backends","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19326"},"id":"PVTI_lADOAAN9684ABqEwzgMYOYw","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19327"],"need":"Required","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"Implement the process to migrate the whole state at the given height to the new store/v2 backends"},{"content":{"body":"my node keeps crashing after a while with this errors\r\n\r\nFeb 05 12:10:44 interview-test3.us-central1-a.c.validator-379314.internal systemd[1]: cosmovisor.service: Main process exited, code=exited, status=1/FAILURE\r\nFeb 05 12:10:44 interview-test3.us-central1-a.c.validator-379314.internal systemd[1]: cosmovisor.service: Failed with result 'exit-code'.\r\n\r\nthis is my cosmovisor.service\r\n\r\n[Unit]\r\nDescription=Cosmovisor service\r\nAfter=network-online.target\r\n\r\n[Service]\r\nUser=root\r\nExecStart=/home/ubuntu/go/bin/cosmovisor run start --x-crisis-skip-assert-invariants --home /home/ubuntu/.gaia\r\nRestart=on-failure\r\nRestartSec=5s\r\nStartLimitBurst=5\r\nStartLimitInterval=10m\r\nLimitNOFILE=4096\r\nEnvironment='DAEMON_NAME=gaiad'\r\nEnvironment='DAEMON_HOME=/home/ubuntu/.gaia'\r\nEnvironment='DAEMON_ALLOW_DOWNLOAD_BINARIES=true'\r\nEnvironment='DAEMON_RESTART_AFTER_UPGRADE=true'\r\nEnvironment='DAEMON_LOG_BUFFER_SIZE=512'\r\nEnvironment='UNSAFE_SKIP_BACKUP=true'\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\n\r\n\r\n![error](https://github.com/cosmos/cosmos-sdk/assets/144474406/18bd8f6d-8502-4ac9-94a0-466458dd9f94)\r\n\r\nwhat could be the issue?\r\n","number":2928,"repository":"cosmos/gaia","title":"cosmovisor.service: Main process exited, code=exited, status=1/FAILURE","type":"Issue","url":"https://github.com/cosmos/gaia/issues/2928"},"id":"PVTI_lADOAAN9684ABqEwzgMdCN4","labels":["other: decayed"],"priority ":"Medium","repository":"https://github.com/cosmos/gaia","status":"ü•≥ Done","title":"cosmovisor.service: Main process exited, code=exited, status=1/FAILURE"},{"content":{"body":"Implements RFC-06 Msg and Query handlers\r\n```[tasklist]\r\n### Tasks\r\n- [ ] Add core APIs\r\n- [ ] Add Msg and Query impl\r\n- [ ] Add a way to register the query with an alias (gRPC query support)\r\n- [ ] Add REST API implementation\r\n```\r\n","number":19365,"repository":"cosmos/cosmos-sdk","title":"feat: implement Msg and Query handlers","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19365"},"id":"PVTI_lADOAAN9684ABqEwzgMfjxA","labels":["needs-triage"],"priority ":"Critical","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"feat: implement Msg and Query handlers"},{"content":{"body":"### Summary\n\nA very simple change we can make to get a huge win on dev-ux on Cosmos.\r\n\r\nRight now, its possible that the user does not have any tokens to claim their fee, whilst having remaining staking reward. The problem is that even though they have remaining staking reward, they would still have to get the token else where since they wouldn't be able to withdraw their staking reward as well (due to insufficient fees).\r\n\r\nA quick and simple solution could be done by adding a ante handler for this. The ante handler would need to go before the deduct fee decorator (https://github.com/cosmos/cosmos-sdk/blob/main/simapp/ante.go#L45) \r\n\r\nIf user does not have the fee to broadcast the transaction, this ante handler would check if the user has any rewards they can use, and if so, withdraw the reward and use it as fee. We can either 1) withdraw all remaining reward or 2) withdraw the exact amount needed for fee, but don't know if 2 is possible in the current code structure.\r\n\r\nTo ensure backward compatibility, this feature would only be used when tx is passed with a specific flag for this (e.g `--use-reward`).\r\n\r\nThe only concern I have is gas, as `withdrawDelegation` method costs alot of gas right now. We need to think a way to optimize this if we were to use this in ante handler\r\n\r\nHappy to make a quick implementation and submit a PR if folks agree with the general idea / direction!\n\n### Problem Definition\n\n****\n\n### Proposed Feature\n\nAs above","number":19384,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Create AnteHandler for enabling using rewards for fees","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19384"},"id":"PVTI_lADOAAN9684ABqEwzgMjDms","labels":["T:feature-request"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"[Feature]: Create AnteHandler for enabling using rewards for fees"},{"content":{"body":"### Summary\n\nFor performance reasons, it would be nice to have mutative versions of `MulDecTruncate` and alike\r\n\r\nref: https://github.com/osmosis-labs/osmosis/pull/7416#discussion_r1483563986\n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nImlement mutative version for each math method on `sdk.DecCoins`","number":19389,"repository":"cosmos/cosmos-sdk","title":"[Feature]: implement mutative methods for sdk.DecCoins","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19389"},"id":"PVTI_lADOAAN9684ABqEwzgMkxjQ","labels":["T:feature-request"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: implement mutative methods for sdk.DecCoins"},{"content":{"body":"This is an automatic backport of pull request #19280 done by [Mergify](https://mergify.com).\nCherry-pick of 89df28ceb9fc74f8b4b2128ebdff379089c518a8 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-19280\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit 89df28ceb.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   server/util.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\tboth modified:   baseapp/options.go\n\tboth modified:   server/start.go\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":19406,"repository":"cosmos/cosmos-sdk","title":"feat(server): in-place testnet creator (backport #19280)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/19406"},"id":"PVTI_lADOAAN9684ABqEwzgMoGKY","labels":["conflicts"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"feat(server): in-place testnet creator (backport #19280)"},{"assignees":["testinginprod"],"content":{"body":"Add the ability to use `sdkmath.Int` and possibly `sdkmath.LegacyDec` as a key in collections.","number":19419,"repository":"cosmos/cosmos-sdk","title":"collections: Support sdkmath.Int as a Key type","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19419"},"id":"PVTI_lADOAAN9684ABqEwzgMq8Cw","labels":["C:collections"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"collections: Support sdkmath.Int as a Key type"},{"assignees":["cool-develope"],"content":{"body":"## Context\r\n\r\nThe default prune options are set as non-pruning in https://github.com/cosmos/cosmos-sdk/pull/19411.\r\nIt needs to be updated as tuned values after full integration of iavl/v2. The original config looks like:\r\n\r\n```toml\r\n# default: the last 362880 states are kept, pruning at 10 block intervals\r\n# nothing: all historic states will be saved, nothing will be deleted (i.e. archiving node)\r\n# everything: 2 latest states will be kept; pruning at 10 block intervals.\r\n# custom: allow pruning options to be manually specified through 'pruning-keep-recent', and 'pruning-interval'\r\npruning = \"default\"\r\n\r\n# These are applied if and only if the pruning strategy is custom.\r\npruning-keep-recent = \"0\"\r\npruning-interval = \"0\"\r\n```","number":19421,"repository":"cosmos/cosmos-sdk","title":"Update the default prune options","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19421"},"id":"PVTI_lADOAAN9684ABqEwzgMrGa8","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20245","https://github.com/cosmos/cosmos-sdk/pull/20730"],"priority ":"Low","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"Update the default prune options"},{"content":{"body":"### Summary\r\n\r\nAs a follow up to: #19224","number":19433,"repository":"cosmos/cosmos-sdk","title":"(client/v2) Add aux signing","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19433"},"id":"PVTI_lADOAAN9684ABqEwzgMsIhk","priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"(client/v2) Add aux signing"},{"content":{"body":"","number":19437,"repository":"cosmos/cosmos-sdk","title":"Implement the catch-up process to catch up the processed blocks while the state syncing","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19437"},"id":"PVTI_lADOAAN9684ABqEwzgMs9Bk","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19454"],"priority ":"High","project":"Store","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","size":"Medium (2-3 Weeks)","status":"ü•≥ Done","title":"Implement the catch-up process to catch up the processed blocks while the state syncing"},{"content":{"body":"","number":19438,"repository":"cosmos/cosmos-sdk","title":"Implement Checkpointing per Module for Resumable Migration when restart","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19438"},"id":"PVTI_lADOAAN9684ABqEwzgMs9cA","labels":["C:Store"],"priority ":"Medium","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","size":"Medium (2-3 Weeks)","status":"üìã Backlog","title":"Implement Checkpointing per Module for Resumable Migration when restart"},{"assignees":["samricotta"],"content":{"body":"","number":19442,"repository":"cosmos/cosmos-sdk","title":"[Feature]Migrate x/gov to use Environment","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19442"},"id":"PVTI_lADOAAN9684ABqEwzgMuIBk","labels":["C:server/v2"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19481"],"project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Feature]Migrate x/gov to use Environment"},{"content":{"body":"","number":19444,"repository":"cosmos/cosmos-sdk","title":"[Feature]Migrate x/distribution to use Environment","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19444"},"id":"PVTI_lADOAAN9684ABqEwzgMuM-o","labels":["C:server/v2"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19445"],"priority ":"High","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Feature]Migrate x/distribution to use Environment"},{"content":{"body":"## Background\r\n\r\nCurrently, the pruning process in IAVL is synchronous and blocks the `Commit` flow, leading to performance bottlenecks, especially when pruning legacy orphaned nodes in v1.\r\n\r\n## Proposal\r\n\r\nImplement `lazy pruning` in IAVL v1 to make the process asynchronous and improve performance. Lazy pruning will separate the pruning operation from the main `SaveVersion` flow, allowing it to run independently and not block the `Commit` flow.\r\n\r\n## Plan\r\n\r\n- Run the internal pruning loop process.\r\n- Store the version in the `Prune` function to let the internal pruning process know about the up-to-date version. It allows to not break the current interface.\r\n- Setup the channel between `SaveVersion` and the internal pruning process to allow blocking the pruning process in `SaveVersion`.","number":885,"repository":"cosmos/iavl","title":"Lazy Pruning","type":"Issue","url":"https://github.com/cosmos/iavl/issues/885"},"id":"PVTI_lADOAAN9684ABqEwzgMvZtg","linked pull requests":["https://github.com/cosmos/iavl/pull/898"],"priority ":"High","project":"Store","repository":"https://github.com/cosmos/iavl","status":"ü•≥ Done","title":"Lazy Pruning"},{"content":{"body":"# Description\r\n\r\nPrepares v0.47.9\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":19451,"repository":"cosmos/cosmos-sdk","title":"chore: prepare v0.47.9","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/19451"},"id":"PVTI_lADOAAN9684ABqEwzgMwThk","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"chore: prepare v0.47.9"},{"content":{"body":"### Summary\n\nWould be really awesome to have the ability to change log-level on the running node without restarting it.\n\n### Problem Definition\n\nSometimes there's a need to get more verbose logging on a node without actually restarting it.\r\nA perfect example is a chain upgrade that has a really big migration (two examples: Neutron v2.0.0 upgrade and Gaia upcoming v15 upgrade to v0.47).\r\nImagine if you're a node operator whose node is stuck on a migration phase, and you have no way to understand where the node's at, if the migration is going okay and what's its status. To understand it and investigate it further, you as a node owner can update log level in config.toml and restart the node, but doing it mid-migration would almost 100% cause it to end up with a corrupted state.\r\nTherefore, having a way to change the log level on the existing node would be really helpful in such cases to debug.\r\n\r\n(Ideally there should be a way to reload node's config without restarting it, but this can be really tricky to implement, updating log-level should be more easy than updating other params.)\n\n### Proposed Feature\n\nHave a command in CLI or the API call or something that updates log-level on a node without having a restart it.","number":19452,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Being able to change log level on the fly","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19452"},"id":"PVTI_lADOAAN9684ABqEwzgMwrZA","labels":["T:feature-request"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: Being able to change log level on the fly"},{"content":{"body":"### Summary\r\n\r\nCurrently slashing makes two state reads per validator, always one write, sometimes two writes, every block. This causes excess time for:\r\n- Fetching this data\r\n- IAVL committing to this data\r\n\r\nIn Osmosis this is 150 to 300 state writes per block!  We see this on average being around 175 writes.\r\n\r\nWe've just started benchmarking and aiming to reduce our number of writes per block. After we changed x/distribution to only distribute staking rewards once every 50 blocks, it preliminarily looks like were at around 1000 writes per block, so this is a big contribution to database Commit time! \r\n\r\n### Problem Definition\r\n\r\n_No response_\r\n\r\n### Proposed Feature\r\n\r\nRight now I'm concerned with lowering the number of writes at hand here. (But later on would like to reduce the data fetch time too)\r\n\r\nThere are two data writes right now:\r\n- We always write SlashingInfo for every validator. What this is doing right now is just incrementing an offset, and then tracking missed blocks if you changed how many you missed.\r\n- If your missed status for the current block is different than your last block at that offset, we update the bitmap.\r\n\r\nI see 3 paths forward here:\r\n- [ ] (Low Complexity)  Remove the offset incrementing in SetInfo. It just doesn't need to happen, you can derive it from a \"start offset\", and tracking the block height pretty easily. If folks are aligned with this approach I'll happily make a PR, and this should drop the number of writes to just be roughly `2 * num_missed_validator_sigs`.\r\n- [ ] (Low-Medium Complexity) Theres a lot of data locality were just kinda missing here. We could just not update liveness tracking info every single block, and instead update it every \"10\" blocks. This would require:\r\n  - Every block writing to state the list of votes (unless stored already). (NOTE: It is stored in staking)\r\n  - Every \"interval\" run the existing vote logic.\r\n    - All the data gets will be in cache improving speed\r\n    - We will only do 1 write per validator + num validator missed blocks, but the number of missed block should be in the same validator bitmap chunk, so still likely just 2 writes.\r\n- [ ] (Medium Complexity) Change the data structure so that all validator's bitmap entry's that get processed together are in the same IAVL leaf. (This would lower the read and write cost significantly, as instead of reads and writes for 150 validators, its O(1) DB reads/writes, just each capturing 150 bits of data)\r\n\r\nI think we should do both solutions (1) and (2) personally, but I see (2) as potentially contentious. (I think its fine, but I'd understand if others disagreed) I'm happy to PR a fix for #1, if other folks agree. I believe it would be:\r\n- Simple\r\n- A notable win\r\n\r\nHowever I would not be taking on the fully burdened work scope of QA'ing the migration in the mainline SDK. I would bring it to the Osmosis fork if were aligned, but I would only include it in Osmosis if the mainline SDK folks wanted to do it.","number":19457,"repository":"cosmos/cosmos-sdk","title":"[Performance]: Restructure slashing for more performance","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19457"},"id":"PVTI_lADOAAN9684ABqEwzgMxXbo","labels":["T:feature-request"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","sprint":"true","status":"üìã Backlog","story Type":"‚≠êÔ∏è User story","title":"[Performance]: Restructure slashing for more performance"},{"content":{"body":"Bumps [github.com/cosmos/cosmos-proto](https://github.com/cosmos/cosmos-proto) from 1.0.0-beta.2 to 1.0.0-beta.4.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/cosmos/cosmos-proto/commit/c77f0ce85853e2e5405ebc67afa88953b4eccfd2\"><code>c77f0ce</code></a> chore(deps): bump google.golang.org/protobuf from 1.28.1 to 1.32.0 (<a href=\"https://redirect.github.com/cosmos/cosmos-proto/issues/130\">#130</a>)</li>\n<li><a href=\"https://github.com/cosmos/cosmos-proto/commit/a8d943a8c26059af346ab40dedb75d8e4059c7ec\"><code>a8d943a</code></a> chore(deps): bump pgregory.net/rapid from 0.6.1 to 1.1.0 (<a href=\"https://redirect.github.com/cosmos/cosmos-proto/issues/122\">#122</a>)</li>\n<li><a href=\"https://github.com/cosmos/cosmos-proto/commit/0204988043090cddaeb63a3f84cbc86971f90a1a\"><code>0204988</code></a> chore(deps): bump actions/setup-go from 4 to 5 (<a href=\"https://redirect.github.com/cosmos/cosmos-proto/issues/129\">#129</a>)</li>\n<li><a href=\"https://github.com/cosmos/cosmos-proto/commit/805ee2444beb6f38a79b402e10c782866ee862ef\"><code>805ee24</code></a> chore: alias <code>anyutil</code> to <code>any</code> (<a href=\"https://redirect.github.com/cosmos/cosmos-proto/issues/132\">#132</a>)</li>\n<li><a href=\"https://github.com/cosmos/cosmos-proto/commit/3f5f5eb19538f5ff023e88461fb7ca890807f5e1\"><code>3f5f5eb</code></a> chore(deps): bump amannn/action-semantic-pull-request from 5.3.0 to 5.4.0 (<a href=\"https://redirect.github.com/cosmos/cosmos-proto/issues/127\">#127</a>)</li>\n<li><a href=\"https://github.com/cosmos/cosmos-proto/commit/b6a88f6e0255c2fb92f5d9a7211caa38769e33d5\"><code>b6a88f6</code></a> chore(deps): bump github.com/google/go-cmp from 0.5.9 to 0.6.0 (<a href=\"https://redirect.github.com/cosmos/cosmos-proto/issues/126\">#126</a>)</li>\n<li><a href=\"https://github.com/cosmos/cosmos-proto/commit/563ad0fbf6ba04b8644513910c37a5a9e7b1a043\"><code>563ad0f</code></a> chore(deps): bump amannn/action-semantic-pull-request from 5.2.0 to 5.3.0 (<a href=\"https://redirect.github.com/cosmos/cosmos-proto/issues/125\">#125</a>)</li>\n<li><a href=\"https://github.com/cosmos/cosmos-proto/commit/d53309abc17d2238b501de5dd402952473452541\"><code>d53309a</code></a> chore(deps): bump gotest.tools/v3 from 3.4.0 to 3.5.1 (<a href=\"https://redirect.github.com/cosmos/cosmos-proto/issues/124\">#124</a>)</li>\n<li><a href=\"https://github.com/cosmos/cosmos-proto/commit/059a08a7844d886f3385d8f97d52a76558ee543c\"><code>059a08a</code></a> chore(deps): bump actions/checkout from 3 to 4 (<a href=\"https://redirect.github.com/cosmos/cosmos-proto/issues/123\">#123</a>)</li>\n<li><a href=\"https://github.com/cosmos/cosmos-proto/commit/0cef9d7dcc95c8d8a2943c0747673d8f5821f882\"><code>0cef9d7</code></a> chore(deps): bump pgregory.net/rapid from 0.6.0 to 0.6.1 (<a href=\"https://redirect.github.com/cosmos/cosmos-proto/issues/115\">#115</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/cosmos/cosmos-proto/compare/v1.0.0-beta.2...v1.0.0-beta.4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=github.com/cosmos/cosmos-proto&package-manager=go_modules&previous-version=1.0.0-beta.2&new-version=1.0.0-beta.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>","number":19472,"repository":"cosmos/cosmos-sdk","title":"build(deps): Bump github.com/cosmos/cosmos-proto from 1.0.0-beta.2 to 1.0.0-beta.4","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/19472"},"id":"PVTI_lADOAAN9684ABqEwzgMzJhg","labels":["dependencies","A:automerge","testing-required"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"build(deps): Bump github.com/cosmos/cosmos-proto from 1.0.0-beta.2 to 1.0.0-beta.4"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nThere should be a governance proposal type to slash a validator. It would specify `slash_percentage` and `validator address`.\r\n\r\n## Problem Definition\r\n\r\nThis has a number of use cases. It allows blockchain communities to codify social standards that validators have to adhere to, and in the event they are 'caught' by the community, it allows them to slash them on-chain. (Without needing a hard fork)\r\n\r\nA social slashing standard that has interest from the Osmosis community is essentially a \"No Sybilling\" condition, where they can all agree that if governance is presented with sufficiently persuasive evidence of a validator sybilling in order to game airdrops, newer staking reward designs, etc. they would be slashed for a certain factor. (With some carveout for cotenancy situations etc.). This is in part motivated by some validator-sybil-gameable decentralization ideas, cref https://commonwealth.im/osmosis/discussion/2036-proposal-per-validator-epoch-bonus-for-better-decentralization\r\n\r\nI'm generally of the view that this is important for many chains, if validators commit malicious activities not yet thought about in advance, or on other chains. I propose we add this as a governance proposal type to the slashing module. Chains can simply choose not to add this governance proposal type to their governance router if they don't want this feature.\r\n\r\n## Proposal\r\n\r\nMake a new governance proposal type in slashing with the following proto:\r\n```\r\nmessage SlashValidator {\r\n  option (cosmos.msg.v1.signer) = \"authority\";\r\n\r\n  string authority = 1 [(cosmos_proto.scalar) = \"cosmos.AddressString\"];\r\n  string validator_address = 2 [(cosmos_proto.scalar) = \"cosmos.ValidatorAddressString\"];\r\n  string slash_factor_percent = 3 [\r\n    (cosmos_proto.scalar)  = \"cosmos.Dec\",\r\n    (gogoproto.customtype) = \"github.com/cosmos/cosmos-sdk/types.Dec\",\r\n    (gogoproto.nullable)   = false\r\n  ];\r\n}\r\n```\r\n\r\nThen implement that message in slashing message server and do the authority check.\r\n\r\nEDIT(@julienrbrt):\r\n\r\n- Updated issue to match gov v1.\r\n- Higher quorum is solved by message based params (already implemented)\r\n____\r\n\r\n#### For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":10917,"repository":"cosmos/cosmos-sdk","title":"Make a slash governance proposal","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/10917"},"id":"PVTI_lADOAAN9684ABqEwzgMzVSI","labels":["good first issue","C:x/slashing"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/11024"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"Make a slash governance proposal"},{"content":{"body":"","number":19487,"repository":"cosmos/cosmos-sdk","title":"[Feature]Migrate x/evidence to use Environment ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19487"},"id":"PVTI_lADOAAN9684ABqEwzgM01Ok","labels":["C:server/v2"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19482"],"priority ":"Medium","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Feature]Migrate x/evidence to use Environment "},{"assignees":["tac0turtle"],"content":{"body":"### Summary\n\nadd consensus message handling in accordance with rfc 06 of votes in consensus. \n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nsetting votes does not need to be in state since its provided each height. \r\n\r\nmigrate module to query info from slashing instetad of cometinfo from context ","number":19492,"repository":"cosmos/cosmos-sdk","title":"[Feature(slashing)]: vote info consensus message","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19492"},"id":"PVTI_lADOAAN9684ABqEwzgM1WB8","labels":["T:feature-request","C:server/v2"],"priority ":"High","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Feature(slashing)]: vote info consensus message"},{"assignees":["tac0turtle"],"content":{"body":"### Summary\n\nadd consensus message for evidence \n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\ndoes not need to be stored in state (?)\r\n\r\nmodify other modules if needed to rely on evidence. \r\n\r\n\r\nif the value is nil in the cache then use context, would mean that the user is not using server/v2 ","number":19493,"repository":"cosmos/cosmos-sdk","title":"[Feature(evidence]: consensus message for evidence ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19493"},"id":"PVTI_lADOAAN9684ABqEwzgM1Wxk","labels":["T:feature-request","C:server/v2"],"priority ":"High","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Feature(evidence]: consensus message for evidence "},{"assignees":["facundomedica","tac0turtle"],"content":{"body":"### Summary\n\nimplement server.go to combine all the services and plugins\n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nimplement server/v2/cometbft/server.go","number":19494,"repository":"cosmos/cosmos-sdk","title":"[Feature(server/v2/cometbft)]: server combine ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19494"},"id":"PVTI_lADOAAN9684ABqEwzgM1WzM","labels":["T:feature-request","C:server/v2"],"priority ":"Critical","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Feature(server/v2/cometbft)]: server combine "},{"content":{"body":"### Summary\n\nCurrently, in the Cosmos SDK when a user submits a tx, if the tx translates into a new state object we charge the same amount of gas as. an item in state that is being updated. These are two different steps and should be treated differently. \r\n\r\n\r\nref https://github.com/celestiaorg/celestia-app/issues/2986\n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\n- design a gas kv store that tracks or checks for existing values in storage. \r\n- Implement the gas kv store to charge different gas on creation vs update ","number":19497,"repository":"cosmos/cosmos-sdk","title":"[Feature]: charge extra when creating new state","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19497"},"id":"PVTI_lADOAAN9684ABqEwzgM1avQ","labels":["S:proposed","T:feature-request"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"[Feature]: charge extra when creating new state"},{"assignees":["Paulius0112"],"content":{"body":"### Summary\n\nWe are currently using sdk.TimeKey which is marked as deprecated, but there is no key codec for this in the collections package. Given that it's a fairly common object we should have it.\n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nImplement the thing","number":19501,"repository":"cosmos/cosmos-sdk","title":"[Feature](collections): add a time.Time key codec","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19501"},"id":"PVTI_lADOAAN9684ABqEwzgM1_78","labels":["good first issue","T:feature-request","C:collections"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19879"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature](collections): add a time.Time key codec"},{"assignees":["julienrbrt"],"content":{"body":"- [ ] Create buf repository for each module (ref: https://github.com/cosmos/cosmos-sdk/pull/18758)\r\n- [ ] Publish to buf on draft branch changes from main (keep all modules for backward compatibility in main buf module)\r\n- [ ] Publish to buf branch on tag (sdk and extracted modules)\r\n- [x] https://github.com/cosmos/cosmos-sdk/issues/11491\r\n\r\nPart of https://github.com/cosmos/cosmos-sdk/issues/12003","number":19503,"repository":"cosmos/cosmos-sdk","title":"Improve buf usage","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19503"},"id":"PVTI_lADOAAN9684ABqEwzgM2vyc","labels":["C: Proto"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19570"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","title":"Improve buf usage"},{"content":{"body":"### Summary\r\n\r\nThis a profile of SendCoins calls from a 2000 block sync on Osmosis, on IAVL v0.\r\n![image](https://github.com/cosmos/cosmos-sdk/assets/6440154/7eec87b4-af57-4d76-9a3c-c640baef518f)\r\n\r\nValidateDenom is not the bottleneck here relative to I/O, but the I/O time is getting dramatically reduced with upcoming works. (Its more of a bottleneck elsewhere in Osmosis)\r\n\r\nWe see that there are 10 different calls to ValidateDenom here! And likely several are redundant. In almost all usages in Osmosis, it goes something like `bank.SendCoins(sdk.NewCoins(singleCoinVar))` (and sdk.NewCoins calls ValidateDenom already) e.g. the coins.AmountOf 's call to validate denom is absolutely wasted. I conjecture it can even be removed entirely from the SDK. (as its irrelevant if the coins object is already correctly constructed, which we currently enforce)\r\n\r\nWe should investigate the calls to ValidateDenom and remove the unneeded ones!","number":19529,"repository":"cosmos/cosmos-sdk","title":"[Performance]: Reduce the number of ValidateDenom calls in bank.SendCoins","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19529"},"id":"PVTI_lADOAAN9684ABqEwzgM685w","labels":["T: Performance","T:feature-request"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Performance]: Reduce the number of ValidateDenom calls in bank.SendCoins"},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nWe upgraded our system from v0.46 to v0.47 and immediately after that we started observing long block times.\r\nMajority of the blocks are faster than 2 seconds but every 10-50 blocks the 6-second one comes.\r\n\r\nThere are a few interesting facts about this:\r\n- we don't observe 3, 4 or 5-second blocks. There are normal blocks (taking less than 2s) or those excessive 6s ones, nothing in between\r\n- those blocks are empty - 0 transactions\r\n- they are produced in first round - so it's not a proposer issue\r\n- it's not an issue with voting - all the votes are delivered in around 200-300 ms\r\n- those blocks are statistically independent - it's not about the proposer of current or previous block\r\n- we haven't found any pattern\r\n- before the upgrade we haven't observed this.\r\n\r\nI searched for similar issues both here and in Comet BFT repo but haven't found anything related.\r\n\r\nDoes anyone else experience this? Is it a known problem? Does anyone has any ideas?\n\n### Cosmos SDK Version\n\nv0.47.8\n\n### How to reproduce?\n\n_No response_","number":19538,"repository":"cosmos/cosmos-sdk","title":"[Bug]: Long block times after upgrade to v0.47","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19538"},"id":"PVTI_lADOAAN9684ABqEwzgM8Exc","labels":["T:Bug"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üêû Bug","title":"[Bug]: Long block times after upgrade to v0.47"},{"content":{"body":"### Summary\n\nIs it possible to standardize exportable functions containing comments? Now many exportable functions containing comments fail the golint check.","number":19585,"repository":"cosmos/cosmos-sdk","title":"improve: Some annotated exportable function annotations cannot pass golint checking","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19585"},"id":"PVTI_lADOAAN9684ABqEwzgNDHKM","labels":["T:Docs","good first issue"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"improve: Some annotated exportable function annotations cannot pass golint checking"},{"assignees":["tac0turtle"],"content":{"body":"### Summary\n\nIn server/v2 we are moving away from a context holding all the information. This leads to modules that get consensus params needing to query consensus params each time they need it. \n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nmigrate modules that use consensus params to query it from the consensus module. \r\n\r\nmodules can use this router to get the needed information https://github.com/cosmos/cosmos-sdk/pull/19571","number":19597,"repository":"cosmos/cosmos-sdk","title":"[chore]: Modules need to query consensus for params","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19597"},"id":"PVTI_lADOAAN9684ABqEwzgNFdYo","labels":["T:feature-request","C:server/v2"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19600"],"priority ":"High","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[chore]: Modules need to query consensus for params"},{"assignees":["kocubinski"],"content":{"body":"### Summary\n\nwith the advent of server/v2 cometinfo is no longer stored in context. We have adopted consensus messages for modules. in order for slashing and evidence to get the needed information we must implement consensus messages like we did in consensus in order for the needed information to be passed to the correct module. \n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nadd consensus module messages to slashing and evidence for comet related information ","number":19599,"repository":"cosmos/cosmos-sdk","title":"[Feature]: add consensus message to slashing & evidence ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19599"},"id":"PVTI_lADOAAN9684ABqEwzgNFdzk","labels":["T:feature-request","C:server/v2"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19602","https://github.com/cosmos/cosmos-sdk/pull/20238"],"project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Feature]: add consensus message to slashing & evidence "},{"content":{"body":"### Summary\n\nComet V1 will introduce new consensus parameters for PBTS, including an enable height, as well as message delay and precision which constitute the synchrony params.\n\nBy default pbts will be disabled, similar to vote extensions. See [2384](https://github.com/cometbft/cometbft/issues/2384) and the [PBTS Epic](https://github.com/cometbft/cometbft/issues/1731) for additional information.\n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\n- [x] Refactor Consensus/ABCI params (incl. vote ext enable height) to [Feature Params ](https://github.com/cometbft/cometbft/pull/2335)\n- [x] Add pbts enable height to Feature Params\n- [x] Add SynchronyParams to Consensus Params\n- [x] Update `MsgUpdateParams` with new PBTS fields","number":19603,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Update Consensus module with V1 consensus params","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19603"},"id":"PVTI_lADOAAN9684ABqEwzgNGAgI","labels":["T:feature-request","C:x/consensus"],"need":"Required","priority ":"Medium","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: Update Consensus module with V1 consensus params"},{"assignees":["JulianToledano"],"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nCurrently users are able to simulate transactions, this is useful to make sure the tx will pass, but with the adoption of delayed execution on nested messages the simulations dont check the nested message. We should adapt the simulation check for transactions to also check nested messages. \r\n\r\n## Problem Definition\r\n\r\nNested messages dont get checked in transaction simulations if the message will be queued for delayed execution\r\n\r\n## Proposal\r\n\r\nExtend simulations to check nested messages if they exist within a transaction\r\n","number":15809,"repository":"cosmos/cosmos-sdk","title":"[Feature]: simulate nested messages","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/15809"},"id":"PVTI_lADOAAN9684ABqEwzgNGbMI","labels":["T:feature-request","T: Client UX","S:zondax"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20291"],"priority ":"High","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"[Feature]: simulate nested messages"},{"content":{"body":"### Summary\r\n\r\nWhen experimenting with parallel transaction execution, I noticed several race conditions in current transaction execution flow.\r\n\r\n### Problem Definition\r\n\r\nthere are a few race conditions when trying to execute transactions in parallel.\r\n\r\n### Proposed Feature\r\n\r\n- [ ] optional block gas meter\r\n  #19626\r\n- [ ] reset the tx context's gas meter at the very beginning in `getContextForTx`, to avoid accessing a wrong gas meter instance before it's initialized in ante hander.\r\n  #19616","number":19613,"repository":"cosmos/cosmos-sdk","title":"[Feature]: make transaction execution thread-safe","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19613"},"id":"PVTI_lADOAAN9684ABqEwzgNHpmI","labels":["T:feature-request"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: make transaction execution thread-safe"},{"content":{"body":"Try out if depinject works with generic and make changes to make it compatible if not.","number":19619,"repository":"cosmos/cosmos-sdk","title":"Depinject x Generic","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19619"},"id":"PVTI_lADOAAN9684ABqEwzgNIKh4","labels":["C:depinject"],"priority ":"High","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"‚≠êÔ∏è User story","title":"Depinject x Generic"},{"content":{"body":"### Summary\r\n\r\nCurrently the framework exposes various endpoints and causes the core of the sdk to have a larger dependency graph than what is truly needed. We should audit the dependency graph in the framework and see where things should be housed\r\n\r\n### Problem Definition\r\n\r\n_No response_\r\n\r\n### Proposed Feature\r\n\r\n- define needed dependencies for the framework\r\n- remove client context and reflection from the framework and move it to where its needed \r\n- look into removing [force codec](https://github.com/cosmos/cosmos-sdk/blob/server_modular/server/v2/grpc/server.go#L51)","number":19620,"repository":"cosmos/cosmos-sdk","title":"[Feature]: avoid having reflection on the framework","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19620"},"id":"PVTI_lADOAAN9684ABqEwzgNIP1c","labels":["T:feature-request","C:server/v2"],"priority ":"Medium","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: avoid having reflection on the framework"},{"content":{"body":"### Summary\r\n\r\nAbility to redelegate funds from unbonded or jailed validators even if the unbonding period isn't over yet.\r\nSafeguard against potential loss of rewards if the redelegated validator also becomes jailed.\r\n\r\n### Problem Definition\r\n\r\nThe current implementation restricts users from redelegating their funds from validators that are either unbonded or jailed. This limitation presents several challenges:\r\nUsers are unable to adjust their delegations promptly, especially when validators are experiencing issues such as being temporarily jailed or undergoing the unbonding process.\r\nIf a user wishes to redelegate their funds from an unbonded or jailed validator to a new one, they may face the risk of losing rewards if the newly redelegated validator also becomes jailed before the unbonding period of the original validator has expired.\r\n\r\nTo address these issues, there is a need to enable redelegation from unbonded or jailed validators and implement safeguards to protect against the loss of rewards in case of subsequent validator jailing.\r\n\r\n### Proposed Feature\r\n\r\nModify the current implementation to enable users to redelegate their funds from validators that are either unbonded or jailed, regardless of whether the unbonding period has concluded. This flexibility ensures that users can swiftly reallocate their funds as needed, without being constrained by timing restrictions.\r\nIntroduce mechanisms to mitigate the risk of losing rewards in case the redelegated validator also gets jailed.","number":19671,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Allow multiple redelegations from unbonded to bonded validators ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19671"},"id":"PVTI_lADOAAN9684ABqEwzgNO08k","labels":["T:feature-request"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: Allow multiple redelegations from unbonded to bonded validators "},{"assignees":["akhilkumarpilli","hieuvubk"],"content":{"body":"### Summary\n\nWith server/v2, server modules need to define their own config variable and cli commands. We already migrated some of the legacy config values to store/v2 but its unclear how it all works. \r\n\r\nsnapshot manager also needs to house its own config and cli commands for snapshotting. \n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\n- Sync with storage team on configs, APIs and cli commands needed for store. \r\n- Implement configs for snapshot manager\r\n  - add snapshotting cli commands to snapshot directory. ","number":19674,"repository":"cosmos/cosmos-sdk","title":"[Feature(server/v2 & storev2)]: Configs and Clis","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19674"},"id":"PVTI_lADOAAN9684ABqEwzgNPiG4","labels":["T:feature-request","C:Store","C:server/v2"],"priority ":"Critical","project":"Server","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"true","sprint":"true","status":"ü•≥ Done","story Type":"üÜï Feature","title":"[Feature(server/v2 & storev2)]: Configs and Clis"},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nGot roughly this error reported from users, and I can replicate. If you have expert mode off on the cosmos ledger app, you can't create keys with index > 100.\r\n```\r\nosmosisd keys add --ledger --index=\"102\" test_102\r\nError: failed to generate ledger key: failed to recover pubkey: [APDU_CODE_CONDITIONS_NOT_SATISFIED] Conditions of use not satisfied: address rejected for path m/44'/118'/0'/0/102\r\n```\r\n\r\nWe should make a more friendly error message in such cases, informing the user to enable expert mode.\n\n### Cosmos SDK Version\n\n0.47\n\n### How to reproduce?\n\nConnect a ledger. Open cosmos app, ensure expert mode is off. Run:\r\n```\r\n$DAEMON keys add --ledger --index=\"102\" test_102\r\n```\r\nYou will see:\r\n```\r\nError: failed to generate ledger key: failed to recover pubkey: [APDU_CODE_CONDITIONS_NOT_SATISFIED] Conditions of use not satisfied: address rejected for path m/44'/118'/0'/0/102\r\n```\r\nEnable expert mode, it will work.","number":19687,"repository":"cosmos/cosmos-sdk","title":"[Bug]: Improve error message when making a ledger key with index > 100","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19687"},"id":"PVTI_lADOAAN9684ABqEwzgNR7bM","labels":["T:Bug","C:Ledger"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üêû Bug","title":"[Bug]: Improve error message when making a ledger key with index > 100"},{"assignees":["cool-develope"],"content":{"body":"### Summary\n\niavl V1 doesn't provide the appropriate `Close` method. It would be a problem when replace the commitStore in migration.\n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\n- Implement the `Close` api in iavl/v1\r\n- Close the old commit store when the migration is done","number":19704,"repository":"cosmos/cosmos-sdk","title":"[Feature](store/v2): Close the old store when the migration is done ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19704"},"id":"PVTI_lADOAAN9684ABqEwzgNT4L8","labels":["T:feature-request","C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19800"],"priority ":"High","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"[Feature](store/v2): Close the old store when the migration is done "},{"assignees":["cool-develope"],"content":{"body":"","number":19705,"repository":"cosmos/cosmos-sdk","title":"Replace the commitSnapshotter of the snapshot manager when the migration is done","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19705"},"id":"PVTI_lADOAAN9684ABqEwzgNT5t8","labels":["C:Store"],"priority ":"High","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"Replace the commitSnapshotter of the snapshot manager when the migration is done"},{"assignees":["julienrbrt"],"content":{"body":"This is an automatic backport of pull request #19655 done by [Mergify](https://mergify.com).\nCherry-pick of d4e52069f76fef7caf7510605d487a573bd31940 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-19655\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit d4e52069f.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   x/authz/client/cli/tx_test.go\n\tmodified:   x/gov/client/cli/util_test.go\n\nUnmerged paths:\n  (use \"git add/rm <file>...\" as appropriate to mark resolution)\n\tboth modified:   api/go.mod\n\tboth modified:   api/go.sum\n\tboth modified:   client/v2/go.mod\n\tboth modified:   client/v2/go.sum\n\tdeleted by us:   collections/go.mod\n\tdeleted by us:   collections/go.sum\n\tboth modified:   core/go.mod\n\tboth modified:   core/go.sum\n\tboth modified:   depinject/go.mod\n\tboth modified:   depinject/go.sum\n\tboth modified:   errors/go.mod\n\tboth modified:   errors/go.sum\n\tboth modified:   go.mod\n\tboth modified:   go.sum\n\tboth modified:   orm/go.mod\n\tboth modified:   orm/go.sum\n\tboth modified:   simapp/go.mod\n\tboth modified:   simapp/go.sum\n\tdeleted by us:   simapp/gomod2nix.toml\n\tdeleted by us:   store/go.mod\n\tdeleted by us:   store/go.sum\n\tboth modified:   tests/go.mod\n\tboth modified:   tests/go.sum\n\tdeleted by us:   tests/starship/tests/go.mod\n\tdeleted by us:   tests/starship/tests/go.sum\n\tdeleted by us:   tools/confix/go.mod\n\tdeleted by us:   tools/confix/go.sum\n\tboth modified:   tools/cosmovisor/go.mod\n\tboth modified:   tools/cosmovisor/go.sum\n\tdeleted by us:   tools/hubl/go.mod\n\tdeleted by us:   tools/hubl/go.sum\n\tdeleted by us:   x/accounts/go.mod\n\tdeleted by us:   x/accounts/go.sum\n\tdeleted by us:   x/auth/go.mod\n\tdeleted by us:   x/auth/go.sum\n\tdeleted by us:   x/authz/go.mod\n\tdeleted by us:   x/authz/go.sum\n\tdeleted by us:   x/bank/go.mod\n\tdeleted by us:   x/bank/go.sum\n\tdeleted by us:   x/circuit/go.mod\n\tdeleted by us:   x/circuit/go.sum\n\tdeleted by us:   x/distribution/go.mod\n\tdeleted by us:   x/distribution/go.sum\n\tdeleted by us:   x/evidence/go.mod\n\tdeleted by us:   x/evidence/go.sum\n\tdeleted by us:   x/feegrant/go.mod\n\tdeleted by us:   x/feegrant/go.sum\n\tboth modified:   x/gov/client/cli/tx_test.go\n\tdeleted by us:   x/gov/go.mod\n\tdeleted by us:   x/gov/go.sum\n\tdeleted by us:   x/group/go.mod\n\tdeleted by us:   x/group/go.sum\n\tdeleted by us:   x/mint/go.mod\n\tdeleted by us:   x/mint/go.sum\n\tdeleted by us:   x/nft/go.mod\n\tdeleted by us:   x/nft/go.sum\n\tdeleted by us:   x/params/go.mod\n\tdeleted by us:   x/params/go.sum\n\tdeleted by us:   x/protocolpool/go.mod\n\tdeleted by us:   x/protocolpool/go.sum\n\tdeleted by us:   x/slashing/go.mod\n\tdeleted by us:   x/slashing/go.sum\n\tdeleted by us:   x/staking/go.mod\n\tdeleted by us:   x/staking/go.sum\n\tdeleted by us:   x/tx/go.mod\n\tdeleted by us:   x/tx/go.sum\n\tdeleted by us:   x/upgrade/go.mod\n\tdeleted by us:   x/upgrade/go.sum\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":19712,"repository":"cosmos/cosmos-sdk","title":"build(deps): Bump deps (backport #19655)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/19712"},"id":"PVTI_lADOAAN9684ABqEwzgNUy3A","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"build(deps): Bump deps (backport #19655)"},{"content":{"body":"","number":19719,"repository":"cosmos/cosmos-sdk","title":"Wire cometbft server as `consensus.go` ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19719"},"id":"PVTI_lADOAAN9684ABqEwzgNXLEo","labels":["C:server/v2"],"priority ":"High","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"Wire cometbft server as `consensus.go` "},{"content":{"body":"### Summary\n\nadd non consensus store to environment or the underlying store \n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nadd db store service ","number":19721,"repository":"cosmos/cosmos-sdk","title":"[Feature]: nonconsensus store ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19721"},"id":"PVTI_lADOAAN9684ABqEwzgNXSlQ","labels":["T:feature-request","C:server/v2"],"need":"Nice To Have","priority ":"Medium","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: nonconsensus store "},{"assignees":["kocubinski","julienrbrt"],"content":{"body":"Currently runtime/v2 directly imports store and store/v2.\r\nWe should only import store/v2 and verify the wiring of store in runtime/v2","number":19722,"repository":"cosmos/cosmos-sdk","title":"Store/v2 x runtime/v2","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19722"},"id":"PVTI_lADOAAN9684ABqEwzgNXfag","labels":["C:server/v2"],"priority ":"High","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"Store/v2 x runtime/v2"},{"content":{"body":"This is an automatic backport of pull request #19725 done by [Mergify](https://mergify.com).\nCherry-pick of d961aef76b637053b228dd4f0a41fb2279aa31e9 has failed:\n```\nOn branch mergify/bp/release/v0.47.x/pr-19725\nYour branch is up to date with 'origin/release/v0.47.x'.\n\nYou are currently cherry-picking commit d961aef76.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nChanges to be committed:\n\tmodified:   x/gov/keeper/grpc_query.go\n\tmodified:   x/gov/keeper/grpc_query_test.go\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\tboth modified:   CHANGELOG.md\n\n```\n\n\nTo fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally\n\n---\n\n\n<details>\n<summary>Mergify commands and options</summary>\n\n<br />\n\nMore conditions and actions can be found in the [documentation](https://docs.mergify.com/).\n\nYou can also trigger Mergify actions by commenting on this pull request:\n\n- `@Mergifyio refresh` will re-evaluate the rules\n- `@Mergifyio rebase` will rebase this PR on its base branch\n- `@Mergifyio update` will merge the base branch into this PR\n- `@Mergifyio backport <destination>` will backport this PR on `<destination>` branch\n\nAdditionally, on Mergify [dashboard](https://dashboard.mergify.com) you can:\n\n- look at your merge queues\n- generate the Mergify configuration with the config editor.\n\nFinally, you can contact us on https://mergify.com\n</details>","number":19728,"repository":"cosmos/cosmos-sdk","title":"fix(x/gov): grpc query tally for failed proposal (backport #19725)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/19728"},"id":"PVTI_lADOAAN9684ABqEwzgNY2nU","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"fix(x/gov): grpc query tally for failed proposal (backport #19725)"},{"assignees":["facundomedica"],"content":{"body":"### Summary\n\nadd better docs explaining how things work and the different forms of fundung","number":19729,"repository":"cosmos/cosmos-sdk","title":"[Documentation]: protocol pool ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19729"},"id":"PVTI_lADOAAN9684ABqEwzgNY8_w","labels":["T:Docs","C:x/protocolpool"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"false","sprint":"true","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"‚öôÔ∏è Chore","title":"[Documentation]: protocol pool "},{"content":{"body":"Closes https://github.com/cosmos/cosmos-sdk/issues/19690\n\n\n\n## Summary by CodeRabbit\n\n- **Bug Fixes**\n\t- Enhanced security by ensuring the public key used for signing transactions matches the public key on the ledger device. Now throws an error if there's a mismatch.\n- **Refactor**\n\t- Improved organization and efficiency by moving functions and interfaces to more appropriate packages within the `types` module and removing deprecated functions.\n- **Chores**\n\t- Implemented various updates and fixes across different modules to enhance configuration, server context, and calculation methods.\n\n<hr>This is an automatic backport of pull request #19691 done by [Mergify](https://mergify.com).","number":19746,"repository":"cosmos/cosmos-sdk","title":"fix(crypto): error if incorrect ledger public key (backport #19691)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/19746"},"id":"PVTI_lADOAAN9684ABqEwzgNcGKw","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"fix(crypto): error if incorrect ledger public key (backport #19691)"},{"content":{"body":"### Summary\n\nWould be cool if there would be a possibility to have an API exposed by cosmovisor that will return the data that can be used in different tools.\n\n### Problem Definition\n\nI am a maintainer of the tool called cosmos-node-exporter: https://github.com/QuokkaStake/cosmos-node-exporter.\r\nIt allows you to scrape different metrics from the node, and also from Cosmovisor, such as: your app version, Cosmovisor version, and the list of the binaries that your node has.\r\nAs of now, it requires the filesystem access to see if you have the binary prepared for a specific upgrade, and also to run `cosmovisor version` command, so this exporter has to be installed on the same host as the node in order to get the full metrics set, as it requires its filesystem access.\r\nAdditionally, if you run Cosmovisor with a set of env vars that's different from the one specified in your systemd config, it will behave differently and there's no way of knowing which env vars are there in a systemd file, unless you see the systemd file or get them via cosmovisor subcommand (which also requires physical server access).\r\n\r\nI can query some of the data from the node itself, but some of the data I need is not the part of the node itself, it's a part of Cosmovisor setup.\r\n\r\nIf we'd have an API that's enabled on-demand that would return different Cosmovisor data (such as, the version of Cosmovisor itself, its config/env vars, current binary name, upgrades names, etc.), that would solve it.\n\n### Proposed Feature\n\nHave a Cosmovisor config that allows it to expose the REST API which has endpoints to return the following data:\r\n- Cosmovisor version\r\n- Cosmovisor config (as in, env vars)\r\n- current app version\r\n- binaries that are present in upgrades folder","number":19755,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Cosmovisor: expose an API allowing you to query it","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19755"},"id":"PVTI_lADOAAN9684ABqEwzgNdOAE","labels":["T:feature-request","C:Cosmovisor"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: Cosmovisor: expose an API allowing you to query it"},{"assignees":["cool-develope"],"content":{"body":"### Summary\r\n\r\nas discussed in the team call we need to modify store v2 commitment store to add and remove store keys. This would allow us to seamlessly modify the commitment store. \r\n\r\nWhen a module is removed, we could look into starting a background process to cleanup state. This may not need to be done before the upgrade is completed because the store key would be removed from the multistore. We can prune it from the underlying databases. \r\n\r\n### Problem Definition\r\n\r\n_No response_\r\n\r\n### Proposed Feature\r\n\r\n- add store keys\r\n- remove store keys\r\nOptional:\r\n- prune module state related to the removed module (ss & sc)\r\n```[tasklist]\r\n### Tasks\r\n- [x] Implement `Mounter` interface to create the new commit tree,  initialize it in root store factory and bypass to SC\r\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/20429\r\n```\r\n","number":19784,"repository":"cosmos/cosmos-sdk","title":"[Feature(store/v2)]: upgrades","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19784"},"id":"PVTI_lADOAAN9684ABqEwzgNksG4","labels":["T:feature-request","C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20453"],"priority ":"High","project":"Store","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","sprint":"true","status":"ü•≥ Done","story Type":"üÜï Feature","title":"[Feature(store/v2)]: upgrades"},{"content":{"body":"### Proposed Feature\r\n\r\nAllow staked tokens to be used as a bond for a governance vote.\r\n\r\n### Problem Definition\r\n\r\nNo one wants to inventory unstaked tokens for the purposes of a gov bond, making it more difficult to get depositors to initiate or start gov votes. The more knowledgable and active users are stakers, who would be willing to use their staked tokens as a bond.\r\n\r\nThis has been an issue in several Cosmos chains including dYdX and Osmosis\r\n\r\n### Possible Considerations\r\n\r\nIt seems to me this would require the unbonding period of `x/staking` to be longer than the deposit+vote period of `x/gov`. It may also be easier to implement if it requires the full bond to be posted at once (rather than allowing for additional deposits from other accounts).","number":19787,"repository":"cosmos/cosmos-sdk","title":"[Feature]: x/gov allow staked tokens as a bond","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19787"},"id":"PVTI_lADOAAN9684ABqEwzgNlKtw","labels":["C:x/gov","T:feature-request"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: x/gov allow staked tokens as a bond"},{"content":{"body":"look into removing blockgas from context and gas service. \r\n\r\nIt is used in upgrade but i dont see us consuming gas there. ","number":19793,"repository":"cosmos/cosmos-sdk","title":"refactor(blockgas): remove block gas","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19793"},"id":"PVTI_lADOAAN9684ABqEwzgNmjw4","labels":["C:x/upgrade","C: gas"],"need":"Required","project":"Server","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"refactor(blockgas): remove block gas"},{"content":{"body":"# Description\r\n\r\nCloses: #XXXX\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":19819,"repository":"cosmos/cosmos-sdk","title":"docs: fix changelog for v0.47.x-ics-lsm branch","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/19819"},"id":"PVTI_lADOAAN9684ABqEwzgNo6xw","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"docs: fix changelog for v0.47.x-ics-lsm branch"},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nRunning an auto-download upgrade on https://github.com/crypto-org-chain/cronos:\r\n\r\n```\r\nError: invalid binaries: error downloading binary for os/arch windows/amd64: url \"https://github.com/crypto-org-chain/cronos/releases/download/v1.1.0/cronos_1.1.0_Windows_x86_64.tar.gz?checksum=sha256:beb03f58306087bf664c9d59adb075f07767fdf4e1011ff6db89ad90e3b61da0\" result does not contain a bin/cronosd or cronosd file\r\n```\n\n### Cosmos SDK Version\n\nv0.50.5\n\n### How to reproduce?\n\n_No response_","number":19871,"repository":"cosmos/cosmos-sdk","title":"[Bug]: upgrade/plan.Info.ValidateFull cannot deal with differently-named binaries for different architectures","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19871"},"id":"PVTI_lADOAAN9684ABqEwzgNxBiU","labels":["T:Bug"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üÜï Feature","title":"[Bug]: upgrade/plan.Info.ValidateFull cannot deal with differently-named binaries for different architectures"},{"content":{"body":"Currently, x/gov, x/staking, (etc..) and (soon: https://github.com/cosmos/cosmos-sdk/pull/19697) x/epochs support hooks. However, we have no demonstration on how to define hooks the _depinject way_.\r\n\r\nThe easiest way to do it is to inject the keeper and then call `SetHooks` on it, like done in `app.go` (works on a runtime/depinject app too):\r\n\r\nhttps://github.com/cosmos/cosmos-sdk/blob/d54e940d50c525e2fb1763d9347e8175fb73f624/simapp/app.go#L397-L401\r\n\r\nHowever, there is wiring in each module to do it the _depinject way_:\r\n\r\nhttps://github.com/cosmos/cosmos-sdk/blob/d54e940d50c525e2fb1763d9347e8175fb73f624/x/gov/depinject.go#L118-L140\r\nhttps://github.com/cosmos/cosmos-sdk/blob/d54e940d50c525e2fb1763d9347e8175fb73f624/x/staking/depinject.go#L82-L119\r\n\r\nBasically, a module should provide / output its hooks' definition (`IsOnePerModuleType`) and depinject will create a map of all defined hooks.\r\n\r\nWe should demonstrate how a module can provide a hook. Let's use the testing `counter` module for that and demonstrate a hook definition.","number":19897,"repository":"cosmos/cosmos-sdk","title":"Demonstrate usage of hooks with depinject","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19897"},"id":"PVTI_lADOAAN9684ABqEwzgN1Ic0","labels":["T:Docs","testing-required"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"‚öôÔ∏è Chore","title":"Demonstrate usage of hooks with depinject"},{"content":{"body":"### Summary\r\n\r\nWith server/v2 nearing completion we are moving the software into a direction where proving execution is a lot easier than before. In server/v2 we designed the new system in a way to allow for new binaries to be created around proving and light clients. In order for us to achieve this work we need to make changes to the current modules and create ways for users to write modules without native iteration. \r\n\r\nNative iteration, which we have in the sdk currently, is the process of iterating without a start and stop of the underlying data, i.e. execution iterates all data without a defined start and stop until the function stops. This design makes it difficult to prove. When talking with zkVM teams this was the largest bottleneck to zkvm adoption in the software. Iteration can still be done for queries, but modules that rely on queries from other modules need to be aware where iteration is happening, if they would like to prove execution. \r\n\r\n\r\n\r\n### Problem Definition\r\n\r\nWith many new zkVMs emerging we have the opportunity to add zk proving of execution as a feature in the sdk. This can be used for IBC zk rollups and many other features.  \r\n\r\n### Work Breakdown\r\n\r\nThe below task list is high level and will be broken down as each phase begins. \r\n\r\n```[tasklist]\r\n### Phase 1\r\n- [ ] Identify iteration in state execution, we should check the overall design and see if we need iteration or if there is a non iterative approach of writing the feature(s)\r\n- [ ] Migrate simplest paths of native iteration to non native iteration or drop iteration\r\n- [ ] Create iteration collection types (treemap, etc..)\r\n- [ ] Document how to use collection based iteration instead of native iteration\r\n```\r\n```[tasklist]\r\n### Phase 2\r\n- [ ] Migrate complex paths of iteration (may be larger refactors)\r\n- [ ] Create proving binary\r\n- [ ] zkVM integration\r\n- [ ] Documentation\r\n```\r\n","number":19906,"repository":"cosmos/cosmos-sdk","title":"[Epic]: Proving Execution","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19906"},"id":"PVTI_lADOAAN9684ABqEwzgN3E_U","labels":["T:Epic"],"project":"2024 üÜô & ‚û°  üìà","repository":"https://github.com/cosmos/cosmos-sdk","size":"X-Large (6+ weeks)","status":"üìã Backlog","story Type":"üëë Epic","title":"[Epic]: Proving Execution"},{"content":{"body":"### Summary\n\nWe'd like to utilise a `KeySet` of an arbitrary gogo protobuf message. However, currently only `CollValue` exists to do such things, which isn't accepts when creating a new `KeySet`.\n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nImplementing a new `CollKey` function based off of the existing `CollValue` implementation.","number":19911,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Implement `codec.CollKey` like `codec.CollValue`","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19911"},"id":"PVTI_lADOAAN9684ABqEwzgN4LmQ","labels":["T:feature-request"],"priority ":"Medium","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üÜï Feature","title":"[Feature]: Implement `codec.CollKey` like `codec.CollValue`"},{"content":{"body":"### Summary\r\n\r\nThe idea behind this proposal is a new module that acts as its own account (similar to x/group) and will have its own address, but the \"account\" is controlled by a fixed on-chain query declared at genesis. If the calling user satisfies the on-chain query, they are approved to execute messages from this account.\r\n\r\nFor example, this can be used to implement token-bound registries (EIP 6551). Ex: I create an \"account\" with the query \"must own x1 of this NFT\" as the criteria. Whoever meets such criteria can execute messages from that account.\r\n\r\nIt could also be used to implement name-based accounts. For example, assets will be tied with the domain name instead of the host account. Thus, when the name is transferred, all child assets are also automatically transferred.\r\n\r\nIt could also be really neat to leverage this with WASM smart contracts as well.\r\n\r\n### Problem Definition\r\n\r\n_No response_\r\n\r\n### Proposed Feature\r\n\r\nThis would be its own module similar to x/authz or x/group. It could theoretically also maybe be integrated as a decision policy in x/group, but I feel like that overcomplicates things.","number":19912,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Query-Dependent Accounts Module","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19912"},"id":"PVTI_lADOAAN9684ABqEwzgN5cdM","labels":["T:feature-request"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"[Feature]: Query-Dependent Accounts Module"},{"content":{"body":"### Summary\n\n### User Needs\r\nUsers of Cosmos SDK-based blockchains need the ability to adjust the block interval dynamically to optimize for network conditions and usage patterns. Initially, when the network activity is low, a longer block interval (e.g., 60 seconds) can save resources. As the network grows and transaction demand increases, the community might need to shorten the block interval (e.g., to 3 seconds) to increase transaction throughput and improve user experience.\r\n\r\n### Solution Impact\r\nIntroducing a mechanism for on-chain governance to adjust the block interval would empower network validators and stakeholders to vote on and implement changes that best fit the network's evolving needs. This flexibility could enhance network efficiency, reduce costs during low-usage periods, and increase throughput during high-usage periods, aligning network performance with actual demand.\n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\n### Description\r\nThe proposal is to add a feature in Cosmos SDK that allows on-chain governance to dynamically adjust the block interval. This could be achieved by making the block interval a parameter that can be modified through governance proposals and votes.\r\n\r\n- **Governance-controlled Block Interval**: Introduce a new parameter in the blockchain's governance module that represents the block interval. Validators and token holders can propose and vote on changes to this parameter.\r\n- **Dynamic Adjustment Mechanism**: Implement a mechanism that adjusts the block creation process based on the current block interval parameter. This would require changes in the consensus module to respect the block interval set by governance decisions.\r\n- **Safety Measures**: To prevent abrupt or harmful changes, introduce safeguards like minimum and maximum limits for the block interval and require a significant majority for such changes.\r\n\r\nThis feature would allow the network to adapt its performance to its operational context and community preferences, thereby enhancing its scalability and responsiveness to user needs.","number":19914,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Adjusting Block Interval Dynamically for Improved Network Scalability and TPS Through Governance in Cosmos SDK","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19914"},"id":"PVTI_lADOAAN9684ABqEwzgN6CPc","labels":["T:feature-request"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"[Feature]: Adjusting Block Interval Dynamically for Improved Network Scalability and TPS Through Governance in Cosmos SDK"},{"content":{"body":"## Summary\r\n\r\nCurrently, the x/mint module calculates the token issuance (affected by inflation) based on block times i.e., users need to calculate how many blocks they will have in a year which is influenced by block times.\r\n\r\n\r\n## Proposal\r\n\r\nTo improve consistency and predictability in token issuance, we propose migrating away from block-based issuance and adopting time-based issuance using epochs in the x/mint module.\r\nCurrently, we use BlocksPerYear param to calculate the provisions for a block and to determine the rate change for inflation. This should be adjusted to epochs time intervals rather than blocks per year. Define the duration of each epoch and adjust the issuance calculation accordingly.\r\n\r\n### Steps to follow:\r\n\r\n- Modify the issuance calculation logic in the x/mint module to use time-based metrics instead of block numbers.\r\n- Implement a mechanism to calculate issuance on a per-epoch basis, considering factors such as target inflation rate, epoch duration, and total time elapsed.\r\n- Define epochs on-chain timers that execute at fixed time intervals (e.g., days, weeks, months) to serve as the basis for calculating token issuance. We register the logic to be executed at the timer ticks.\r\n- Set module hooks: on hook receiver function, we need to filter epochIdentifier and only do executions for only specific epochIdentifier. Filtering epochIdentifier could be in Params of modules so that they can be modified by governance.\r\nNOTE: Every timer has a unique identifier.\r\n`end time = start time + timer interval.`\r\nEg:\r\n```\r\nfunc (k MyModuleKeeper) AfterEpochEnd(ctx sdk.Context, epochIdentifier string, epochNumber int64) {\r\n    params := k.GetParams(ctx)\r\n    if epochIdentifier == params.DistrEpochIdentifier {\r\n    // my logic\r\n  }\r\n}\r\n```\r\n- we need to define appropriate duration and granularity of epochs based on network requirements and user preferences.\r\n- Migration ?\r\n","number":19952,"repository":"cosmos/cosmos-sdk","title":"x/mint: Migrate away from blocks influencing issuance to use epochs","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19952"},"id":"PVTI_lADOAAN9684ABqEwzgN_H9Y","labels":["C:x/mint"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20044"],"project":"Mint","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"x/mint: Migrate away from blocks influencing issuance to use epochs"},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nUsing dots inside keys is not a good practice imho since they are usually used to **separate** keys!\r\n\r\nI can't execute 44 different queries when defining my HTTP API in YAML, as they all contain `pagination.foo` and there is no way of escaping the dot in a YAML key. \r\n\r\nThere is a workaround (adding an uri parameter by default, like `?pagination.limit={limit}`), but that's not ideal.\r\n\r\n`limit` is not a property of a `pagination` object (URL parameters are flat), so I find this confusing and limiting compatibility and ease of integration of the API.\r\n\r\nCan we use the common separator \"_\" everywhere instead, as in proposal_id, proposal_status, etc,  instead of using \".\" only for the pagination query parameters?\r\nüôè\r\n\n\n### Cosmos SDK Version\n\nmain\n\n### How to reproduce?\n\nI'm copying a useful subset of Cosmos SDK API commands as Guzzle Service Descriptions (the most common HTTP Client for PHP, which is still the most used language on the web) in simple YAML files, to allow non-developers get governance proposals, smart contracts data, etc. on their own millions websites by filling forms & clicking buttons on the GUI.\r\n\r\nHere you can see both the commented error-generating definition and the workaround when using [this Drupal module](https://www.drupal.org/project/http_client_manager)\r\n<img width=\"588\" alt=\"image\" src=\"https://github.com/cosmos/cosmos-sdk/assets/4728367/622d0415-a6fc-4c20-96b6-1d3fef8b3a58\">\r\n\r\nThe error I get is \"Key contains a dot which is not supported\", and an extensive search did not yield solutions as it seems **keys** are simply not supposed to be escaped in YAML.\r\nEven in JSON, for example to parse responses with jq, one would need to put double quotes inside single quotes to get the dotted property, which is not user-friendly.\r\n","number":19959,"repository":"cosmos/cosmos-sdk","title":"[Questions]: REST API pagination keys contain a dot which is not supported in YAML","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/19959"},"id":"PVTI_lADOAAN9684ABqEwzgOAYbc","labels":["T:question"],"priority ":"High","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Questions]: REST API pagination keys contain a dot which is not supported in YAML"},{"assignees":["likhita-809"],"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\n<!-- Short, concise description of the proposed feature -->\r\nCurrently a number of Cosmos based chains are announcing max-supply for their tokens but practically there's no hard-limit configurable in cosmos-sdk\r\n\r\n## Proposal\r\n\r\n<!-- Detailed description of requirements of implementation -->\r\n\r\nIntroduce a new genesis param `max-supply` for mint module. \r\nNewly minted tokens should consider this limit","number":13308,"repository":"cosmos/cosmos-sdk","title":"Add max-supply param to mint module ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/13308"},"id":"PVTI_lADOAAN9684ABqEwzgOBenc","labels":["S:proposed","C:x/mint","T:feature-request"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19896"],"project":"Mint","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"Add max-supply param to mint module "},{"content":{"body":"","id":"DI_lADOAAN9684ABqEwzgF-tik","title":"Release 0.52","type":"DraftIssue"},"iCF Roadmap":"true","id":"PVTI_lADOAAN9684ABqEwzgOLNI0","priority ":"Critical","project":"2024 üÜô & ‚û°  üìà","quarter":"Q3","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"üèÅ Release Marker","title":"Release 0.52"},{"content":{"body":"# Description\n\nThese 2 types are being used as `customtypes` in the proto files, but to do it they need to implement this specific interface.\n\nCloses: #19956\n\n\n\n---\n\n## Author Checklist\n\n*All items are required. Please add a note to the item if the item is not applicable and\nplease add links to any relevant follow up issues.*\n\nI have...\n\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\n* [ ] confirmed `!` in the type prefix if API or client breaking change\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\n* [ ] provided a link to the relevant issue or specification\n* [ ] reviewed \"Files changed\" and left comments if necessary\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\n* [ ] added a changelog entry to `CHANGELOG.md`\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\n* [ ] confirmed all CI checks have passed\n\n## Reviewers Checklist\n\n*All items are required. Please add a note if the item is not applicable and please add\nyour handle next to the items reviewed if you only reviewed selected items.*\n\nI have...\n\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\n* [ ] confirmed all author checklist items have been addressed\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\n\n\n\n## Summary by CodeRabbit\n\n\n- **New Features**\n\t- Enhanced JSON support for private and public keys, including marshaling and unmarshaling capabilities.\n- **Tests**\n\t- Added tests for JSON functionality in key handling.\n\n<hr>This is an automatic backport of pull request #20027 done by [Mergify](https://mergify.com).","number":20032,"repository":"cosmos/cosmos-sdk","title":"fix: Implement gogoproto customtype to secp256r1 keys (backport #20027)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20032"},"id":"PVTI_lADOAAN9684ABqEwzgONpQA","labels":["conflicts"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"fix: Implement gogoproto customtype to secp256r1 keys (backport #20027)"},{"content":{"body":"### Summary\r\n\r\nupstream the auction module from the block sdk. https://github.com/skip-mev/feemarket. This will be coordinated across a few organisations. \r\n\r\n### Problem Definition\r\n\r\n_No response_\r\n\r\n### Proposed Feature\r\n\r\nUpstream the module\r\nWrite docs on alternative way of handling fees. ","number":20047,"repository":"cosmos/cosmos-sdk","title":"[Feature]: upstream feemarket module ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20047"},"id":"PVTI_lADOAAN9684ABqEwzgOP214","labels":["T:feature-request"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: upstream feemarket module "},{"content":{"body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### What happened?\r\n\r\nA bug happened!\r\nWhen you revoke an allowance in order to create a new one with a later expiration time. The queue entity for the allowance still exists in the expiration queue. Which leads to situation whec the allowance removed unexpectedly due to outdated queue entity in the endblocker.\r\nThe bug in not reproducible with sdk.0.50, because queue entity is cleared as well during revoke method.\r\nIt's possible to fix it the same way in sdk0.47\r\n\r\n### Cosmos SDK Version\r\n\r\n0.47\r\n\r\n### How to reproduce?\r\n\r\ngrant allowance with expiration date = `date1`\r\nrevoke allowance\r\ngrant allowance for the same granter + grantee with expiration date = `date2`\r\ncheck that expiration queue contains two records\r\n","number":20057,"repository":"cosmos/cosmos-sdk","title":"[Bug]: x/feegrant: allowance expiration queue is not being cleared during allowance revoking.","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20057"},"id":"PVTI_lADOAAN9684ABqEwzgOSSJw","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Bug]: x/feegrant: allowance expiration queue is not being cleared during allowance revoking."},{"assignees":["facundomedica"],"content":{"body":"### Summary\n\nThe Auth module handles storage of auth information like sequence number, pubkeys, etc.. The module is complex and has limitations in being able to expand the different account types. Recently we completed the accounts module and see a future in which the accounts module offers a baseaccount that mimics the same logic as the auth module. In this design there is not a need for the auth module to continue. \r\n\r\nSecondly, we should look into what this means for the cryptocodec, if it is needed any longer as well.\n\n### Problem Definition\n\nAccounts provides an simple alternative to the auth module. We should explore using it instead of the auth module. \r\n\r\nfor existing chains we should explore if a lazy migration would be useful here in order to migrate users from x/auth to x/accounts\n\n### Work Breakdown\n\n```[tasklist]\r\n### Tasks\r\n- [ ] Identify if and how a chain could start with only the account module\r\n- [ ] Implement and/or fix issues that arise from only using x/accounts and no auth. \r\n- [ ] Update documentation on how to start a new chain without the auth module\r\n- [ ] Add documentation on how existing users can migrate or stay with their current designs. \r\n```\r\n\r\n","number":20058,"repository":"cosmos/cosmos-sdk","title":"[Epic]: x/Auth","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20058"},"iCF Roadmap":"true","id":"PVTI_lADOAAN9684ABqEwzgOSi0Q","labels":["C:x/auth","T:Epic","C:x/accounts"],"priority ":"Medium","project":"2024 üÜô & ‚û°  üìà","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"üëë Epic","title":"[Epic]: x/Auth"},{"assignees":["julienrbrt"],"content":{"body":"Long time since last cosmovisor release.\r\nThere are still some improvements in the pipelines and some to be fixed before 1.6.0, but we should strive to cut a new release this month.\r\n\r\n## To dos before release\r\n\r\n- [x] https://github.com/cosmos/cosmos-sdk/issues/20061 (https://github.com/cosmos/cosmos-sdk/pull/20062)\r\n- [x] https://github.com/cosmos/cosmos-sdk/issues/19764 (https://github.com/cosmos/cosmos-sdk/pull/19995)\r\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/19871\r\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/19227\r\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/18073\r\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/17053\r\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/10910","number":20067,"repository":"cosmos/cosmos-sdk","title":"[Epic]: Cosmovisor 1.6.0","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20067"},"id":"PVTI_lADOAAN9684ABqEwzgOT4_U","labels":["C:Cosmovisor"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"false","sprint":"true","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"üëë Epic","title":"[Epic]: Cosmovisor 1.6.0"},{"content":{"body":"# Description\n\nCloses: #XXXX\n\n\n\n---\n\n## Author Checklist\n\n*All items are required. Please add a note to the item if the item is not applicable and\nplease add links to any relevant follow up issues.*\n\nI have...\n\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\n* [ ] confirmed `!` in the type prefix if API or client breaking change\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\n* [ ] provided a link to the relevant issue or specification\n* [ ] reviewed \"Files changed\" and left comments if necessary\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\n* [ ] added a changelog entry to `CHANGELOG.md`\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\n* [ ] confirmed all CI checks have passed\n\n## Reviewers Checklist\n\n*All items are required. Please add a note if the item is not applicable and please add\nyour handle next to the items reviewed if you only reviewed selected items.*\n\nI have...\n\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\n* [ ] confirmed all author checklist items have been addressed\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\n\n\n\n\n## Summary by CodeRabbit\n\n- **Refactor**\n\t- Improved JSON handling for private and public keys, enhancing data formatting and parsing.\n\n<hr>This is an automatic backport of pull request #20060 done by [Mergify](https://mergify.com).","number":20070,"repository":"cosmos/cosmos-sdk","title":"fix: secp256r1 json missing quotes (backport #20060)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20070"},"id":"PVTI_lADOAAN9684ABqEwzgOUMRU","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"fix: secp256r1 json missing quotes (backport #20060)"},{"content":{"body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### What happened?\r\n\r\nThere is no way to use `DefineCustomGetSigners` on a `Msg`.\r\n\r\nThe `DefineCustomGetSigners` function uses the `Message` interface defined in `\"google.golang.org/protobuf/proto\"`. That's an alias for the `protoreflect.ProtoMessage` interface, which just requires the `ProtoReflect() Message` method. But code generated from protos does not create that method on anything.\r\n\r\nAll of the unit tests related to signing uses the pulsar stuff. But those things aren't what are actually used by the msg server. So there's no way to define a custom `GetSigners` method for anything that someone would be actually signing.\r\n\r\n### Cosmos SDK Version\r\n\r\n0.50.5\r\n\r\n### How to reproduce?\r\n\r\nHere's the simplified situation I'm in where I need to define a custom `GetSigners` method.\r\n\r\n```proto\r\nservice Msg {\r\n  rpc StartThing(MsgStartThingRequest) MsgStartThingResponse;\r\n  rpc EndThing(MsgEndThingRequest) MsgEndThingResponse;\r\n}\r\n\r\nmessage MsgStartThingRequest {\r\n  Thing thing = 1;\r\n}\r\n\r\nmessage MsgStartThingResponse {}\r\n\r\nmessage MsgEndThingRequest {\r\n  Thing thing = 1;\r\n}\r\n\r\nmessage MsgEndThingResponse {}\r\n\r\nmessage Thing {\r\n  string addr1 = 1  [(cosmos_proto.scalar) = \"cosmos.AddressString\"];\r\n  string addr2 = 2  [(cosmos_proto.scalar) = \"cosmos.AddressString\"];\r\n}\r\n```\r\n\r\nThe signer of `MsgStartThingRequest` should be `thing.addr1`.\r\nThe signer of `MsgEndThingRequest` should be `thing.addr2`.\r\n\r\nI can't use `option (cosmos.msg.v1.signer)` here because it no longer allows sub-fields. I.e., in `MsgStartThingRequest`, I can't have `option (cosmos.msg.v1.signer) = \"thing.addr1\"`, I can only have `option (cosmos.msg.v1.signer) = \"thing\"`. I'd then have to put an `option (cosmos.msg.v1.signer)` in the `Thing` message, but it can't be hard-coded like that because the field that's the signer is different depending on which `Msg` the `Thing` is in. And there are other `message`s that also have a `Thing` where neither should be a signer.\r\n\r\nIn the go code, the msg server endpoint methods require the use of the `MsgStartThingRequest` struct as defined in the auto-generated go code that lives in the module code. Those `Msg` structs (where we used to have to define `GetSigners()`), do not have a `ProtoReflect()` method, though. So it's impossible to define a custom `GetSigners` function on a `Msg` required by an endpoint.\r\n\r\nHere's what the go code might look like to define the custom `GetSigners` for `MsgStartThingRequest`:\r\n```go\r\n\toptions.DefineCustomGetSigners(proto.MessageName(&MsgStartThingRequest{}), func(msgIn proto.Message) ([][]byte, error) {\r\n\t\tmsg, ok := msgIn.(*MsgStartThingRequest)\r\n\t\tif !ok {\r\n\t\t\treturn nil, fmt.Errorf(\"incorrect message type, actual: %T, expected: %T\", msgIn, &MsgStartThingRequest{})\r\n\t\t}\r\n\t\taddr, err := options.AddressCodec.StringToBytes(msgCP.Thing.Addr1)\r\n\t\tif err != nil {\r\n\t\t\treturn nil, err\r\n\t\t}\r\n\t\treturn [][]byte{addr}, nil\r\n\t})\r\n```\r\n\r\nIn that, `options` is a `cosmossdk.io/x/tx/signing.Options`, and `proto` is the `google.golang.org/protobuf/proto` package.\r\n\r\nThere are two compilation issues with that code.\r\n1. `proto.MessageName` takes in a `protoreflect.ProtoMessage`, but `MsgStartThingRequest` doesn't have a `ProtoReflect()` method, so `&MsgStartThingRequest{}` is an invalid argument for that function.\r\n2. The `proto.Message` type that the function takes in, is just an alias for that `protoreflect.ProtoMessage`. So `msgIn` cannot be asserted as a `(*MsgStartThingRequest)` because again, `MsgStartThingRequest` does not have a `ProtoReflect()` method.","number":20077,"repository":"cosmos/cosmos-sdk","title":"[Bug]: DefineCustomGetSigners is unusable.","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20077"},"id":"PVTI_lADOAAN9684ABqEwzgOVLI0","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Bug]: DefineCustomGetSigners is unusable."},{"assignees":["tac0turtle"],"content":{"body":"# Description\r\n\r\nhttps://github.com/cosmos/cosmos-sdk/compare/v0.47.10...release/v0.47.x\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":20088,"repository":"cosmos/cosmos-sdk","title":"chore: prepare v0.47.11","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20088"},"id":"PVTI_lADOAAN9684ABqEwzgOXgzw","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"chore: prepare v0.47.11"},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\n[server/config/toml.go](https://github.com/cosmos/cosmos-sdk/blob/main/server/config/toml.go) includes contents that are similar to those of [server/config/config.go](https://github.com/cosmos/cosmos-sdk/blob/main/server/config/config.go), but any synchronization between the two locations is manual so there are undesirable differences (and some undesirable similarities, such as using the CamelCase Go names to comment on TOML settings like `halt-height`).\r\n\r\nTo remedy this, I would recommend programmatically deriving the TOML template from the Go config structs and their doc comments in a build step. Here's a proof of concept that parses Go source text and emits TOML template text: https://go.dev/play/p/W74nda-DQKZ\n\n### Cosmos SDK Version\n\nmain\n\n### How to reproduce?\n\n_No response_","number":20097,"repository":"cosmos/cosmos-sdk","title":"Server TOML config template can get out of sync with config.go","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20097"},"id":"PVTI_lADOAAN9684ABqEwzgOYQoQ","linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20989"],"priority ":"Low","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"Server TOML config template can get out of sync with config.go"},{"content":{"body":"colon not allowed on MacOS\n\n# Description\n\nCloses: #XXXX\n\n\n\n---\n\n## Author Checklist\n\n*All items are required. Please add a note to the item if the item is not applicable and\nplease add links to any relevant follow up issues.*\n\nI have...\n\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\n* [ ] confirmed `!` in the type prefix if API or client breaking change\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\n* [ ] provided a link to the relevant issue or specification\n* [ ] reviewed \"Files changed\" and left comments if necessary\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\n* [ ] added a changelog entry to `CHANGELOG.md`\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\n* [ ] confirmed all CI checks have passed\n\n## Reviewers Checklist\n\n*All items are required. Please add a note if the item is not applicable and please add\nyour handle next to the items reviewed if you only reviewed selected items.*\n\nI have...\n\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\n* [ ] confirmed all author checklist items have been addressed\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\n\n\n\n\n## Summary by CodeRabbit\n\n- **Bug Fixes**\n\t- Improved log file naming by using milliseconds since Unix epoch for more precise timestamps.\n\n<hr>This is an automatic backport of pull request #20108 done by [Mergify](https://mergify.com).","number":20112,"repository":"cosmos/cosmos-sdk","title":"fix: use timestamp for sim log file name (backport #20108)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20112"},"id":"PVTI_lADOAAN9684ABqEwzgOaw4g","labels":["C:Simulations"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"fix: use timestamp for sim log file name (backport #20108)"},{"assignees":["julienrbrt"],"content":{"body":"# Description\n\nI'll update the changelog in a bit (do not merge before that)\nFollow-up of https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-4j93-fm92-rp4m\n\nMain is not affected thanks to https://github.com/cosmos/cosmos-sdk/pull/19188\n\n---\n\n## Author Checklist\n\n*All items are required. Please add a note to the item if the item is not applicable and\nplease add links to any relevant follow up issues.*\n\nI have...\n\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\n* [ ] confirmed `!` in the type prefix if API or client breaking change\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\n* [ ] provided a link to the relevant issue or specification\n* [ ] reviewed \"Files changed\" and left comments if necessary\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\n* [ ] added a changelog entry to `CHANGELOG.md`\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\n* [ ] confirmed all CI checks have passed\n\n## Reviewers Checklist\n\n*All items are required. Please add a note if the item is not applicable and please add\nyour handle next to the items reviewed if you only reviewed selected items.*\n\nI have...\n\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\n* [ ] confirmed all author checklist items have been addressed\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\n<hr>This is an automatic backport of pull request #20102 done by [Mergify](https://mergify.com).","number":20114,"repository":"cosmos/cosmos-sdk","title":"fix(x/authz,x/feegrant): check blocked address (backport #20102)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20114"},"id":"PVTI_lADOAAN9684ABqEwzgOa1SI","labels":["C:x/feegrant","C:x/authz"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"fix(x/authz,x/feegrant): check blocked address (backport #20102)"},{"content":{"body":"# Description\r\n\r\nCloses: #XXXX\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":20135,"repository":"cosmos/cosmos-sdk","title":"chore: merge v0.47.11 into v0.47.x-ics-lsm branch","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20135"},"id":"PVTI_lADOAAN9684ABqEwzgOb67s","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"chore: merge v0.47.11 into v0.47.x-ics-lsm branch"},{"content":{"body":"### Summary\n\nMany applications could benefit from an extension to the x/authz module which supports two-way authorizations. For example, I approve Msgs A, B, and C to be executed if the counterparty agrees to execute Msgs 1, 2, and 3. \r\n\r\nFor example, this would allow a Seaport-like implementation natively in Cosmos without any extra overhead. I will trade you this NFT + 10 $ATOM for that NFT.\r\n\n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nThe proposed feature would be a standalone module (or an extenstion to x/authz) which supports two-way multi-msg transactions authorizations that can be accepted by the counterparty. \r\n\r\nTwo things would need to happen to extend x/authz:\r\n-Support multi-msg grants (I believe authz is only currently one now)\r\n-Get a system where you can denote who the initiator of each Msg is expected to be. It is not always the granter (the counterparty initiates some transactions).","number":20136,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Extend x/authz","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20136"},"id":"PVTI_lADOAAN9684ABqEwzgOb7Uk","labels":["T:feature-request","C:x/authz"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: Extend x/authz"},{"content":{"body":"### Summary\n\nThis Issue is meant to begin the discussion around how and if module unit tests can be written to not import the cosmos sdk. This will enable modules to not import the cosmos sdk allowing modules to work with different versions of the cosmos sdk. \r\n\r\n\r\n\n\n### Problem Definition\n\nIn order to decouple modules from importing the cosmos sdk we need to see if tests can be written in a way to not import some of the cosmos sdk. It is still unclear if this is possible so part of this epic is evaluating the possibility of this working. \n\n### Work Breakdown\n\n- [ ] identify if modules can be written without importing the cosmos sdk\r\n- [ ] rewrite module test to not import the cosmos sdk","number":18149,"repository":"cosmos/cosmos-sdk","title":"Decouple unit tests","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18149"},"id":"PVTI_lADOAAN9684ABqEwzgOb_Cg","labels":["S:proposed"],"priority ":"High","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","story Type":"‚≠êÔ∏è User story","title":"Decouple unit tests"},{"content":{"body":"A fix for propagation of tx options to signing handlers was made in #17996. We should add a test for this so that issues can be caught in unit tests as this is a sensitive piece of code.\r\n\r\n---\r\n\r\n > LGTM. Could we add a test for this?\r\n\r\nA test was added but it's very basic and doesn't expose the current bug.  That would require some structural refactoring to give access to unexported fields in tests.  I'm inclined to skip that for now.  What do you think?\r\n\r\n_Originally posted by @kocubinski in https://github.com/cosmos/cosmos-sdk/issues/17996#issuecomment-1754158867_","number":18143,"repository":"cosmos/cosmos-sdk","title":"Add test for propagation of tx options to signing handlers","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18143"},"id":"PVTI_lADOAAN9684ABqEwzgOb_Fs","labels":["T: Tests"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"‚≠êÔ∏è User story","title":"Add test for propagation of tx options to signing handlers"},{"content":{"body":"Unsure exactly which pieces of the docs this applies to yet but I have a few that @facundomedica and I made recently that can update some of the expired diagrams as they have been especially helpful for onboarding people onto abci++","number":18238,"repository":"cosmos/cosmos-sdk","title":"chore: Update Diagrams for key concepts","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/18238"},"id":"PVTI_lADOAAN9684ABqEwzgOb_Nk","labels":["T:Docs"],"priority ":"Medium","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"‚≠êÔ∏è User story","title":"chore: Update Diagrams for key concepts"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nUpgrades are currently only done via block height, but this is a hard thing to estimate and many times users see the time being off by a couple hours. In the past we did time based upgrades but ran into issues, in the past we didnt have capacity to dive into the issue. \r\n\r\n## Problem Definition\r\n\r\nHeight based upgrades can be mislead expected times\r\n\r\n## Proposal\r\n\r\nadd time based upgrades for users\r\n","number":16006,"repository":"cosmos/cosmos-sdk","title":"[Feature]: time based upgrades","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/16006"},"id":"PVTI_lADOAAN9684ABqEwzgOb_6w","labels":["T:feature-request","C:x/upgrade"],"priority ":"Medium","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"‚≠êÔ∏è User story","title":"[Feature]: time based upgrades"},{"assignees":["alpe"],"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\n\r\nWhen writing migrations sometimes they can take longer than expected when used in production. This can cause extensive downtime for chains upgrading. We should provide documentation and warnings on how long a potential migration could take. \r\n\r\n## Problem Definition\r\n\r\nMigration times of real world data is unknwon\r\n\r\n## Work Breakdown\r\n\r\nDevelop a tool in which we can run migrations on real world data. \r\n\r\nA simple design that comes to mind is. \r\n\r\n- User downloads a snapshot\r\n- User tells which module state it would like to use to test against migrations\r\n- pass a path to a helper function in which it reads the data and runs the module migrations on it. \r\n\r\nThe migration helper should output how many keys were migrated and how long it took. \r\n","number":15739,"repository":"cosmos/cosmos-sdk","title":"[Epic]: migration tester","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/15739"},"id":"PVTI_lADOAAN9684ABqEwzgOcAKk","labels":["tooling","T: Dev UX","T:Epic"],"priority ":"High","quarter":"Q2","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Epic]: migration tester"},{"assignees":["kocubinski","facundomedica"],"content":{"body":"# Description\r\n\r\nOpening this PR to show an issue we are trying to debug in ibc-go.\r\n\r\nWe are [back porting ICA queries to `release/v7.5.x`](https://github.com/cosmos/ibc-go/pull/6123) and If we run our tests using go 1.19, then a [test](https://github.com/cosmos/ibc-go/blob/500e806965f8b95bc02d4677d67ceb6b7b4e187e/modules/apps/27-interchain-accounts/host/keeper/keeper_test.go#L214) that checks that the staking queries are module safe queries [fails](https://github.com/cosmos/ibc-go/actions/runs/8696798183/job/23869038944). However, if we run the tests with go 1.22, then it passes... You can see the failure in the test of this PR [here](https://github.com/cosmos/cosmos-sdk/actions/runs/8789944195/job/24120874086?pr=20147).\r\n\r\nCloses: #XXXX\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":20147,"repository":"cosmos/cosmos-sdk","title":"[DO NOT MERGE] test: staking query not module query safe","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20147"},"id":"PVTI_lADOAAN9684ABqEwzgOc5vw","labels":["C:x/staking"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"[DO NOT MERGE] test: staking query not module query safe"},{"content":{"body":"### Summary\n\nThis section is a bit confusing as we have the old version of `app.go` and `app-di.go` . I understand its their to show that this can still be used but its just a giant codeblock without any information.","number":20171,"repository":"cosmos/cosmos-sdk","title":"[Documentation]: Clean up building apps section","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20171"},"id":"PVTI_lADOAAN9684ABqEwzgOf-54","labels":["T:Docs"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"‚≠êÔ∏è User story","title":"[Documentation]: Clean up building apps section"},{"assignees":["tac0turtle"],"content":{"body":"### Summary\r\n\r\nThis is not to update the content but more to update all of the diagrams to excalidraw https://docs.cosmos.network/main/learn/advanced/store as you can see here the diagrams are dated. Again can be seen here https://docs.cosmos.network/main/learn/beginner/accounts.\r\n\r\nThese are not the only 2, there are about 5-10 that need to be updated","number":20172,"repository":"cosmos/cosmos-sdk","title":"[Documentation]: Fix all diagrams to use excalidraw diagrams","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20172"},"id":"PVTI_lADOAAN9684ABqEwzgOf_cw","labels":["T:Docs"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20503"],"priority ":"High","quarter":"Q2","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Documentation]: Fix all diagrams to use excalidraw diagrams"},{"content":{"body":"### Summary\n\nThis section can be updated https://docs.cosmos.network/main/learn/intro/why-app-specific. It's a bit dated and doesn't really give any analogies so people can relate. People are quite confused what Sovereign Application Specific blockchains are. \r\n\r\nhttps://celestia.org/learn/beginners/the-modular-stack/ this is a good example of an analogy to help people understand.\r\n\r\nIn conferences I've used a lego analogy before. This could also reference to modularity etc","number":20174,"repository":"cosmos/cosmos-sdk","title":"[Documentation]: Introduction and Application Specific Section Update","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20174"},"id":"PVTI_lADOAAN9684ABqEwzgOgG_w","labels":["T:Docs"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚≠êÔ∏è User story","title":"[Documentation]: Introduction and Application Specific Section Update"},{"assignees":["cool-develope"],"content":{"body":"","number":20179,"repository":"cosmos/cosmos-sdk","title":"Add an option to avoid the commitment migration when users want to use the iavl/v0 or v1 as a commitment layer without migration","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20179"},"id":"PVTI_lADOAAN9684ABqEwzgOgn1E","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20181"],"priority ":"Medium","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","size":"Medium (2-3 Weeks)","start":"2024-04-23","status":"ü•≥ Done","title":"Add an option to avoid the commitment migration when users want to use the iavl/v0 or v1 as a commitment layer without migration"},{"content":{"body":"# Description\n\n- Set all signatures and don't overwrite the previous one\n\n\n\n---\n\n## Author Checklist\n\n*All items are required. Please add a note to the item if the item is not applicable and\nplease add links to any relevant follow up issues.*\n\nI have...\n\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\n* [ ] confirmed `!` in the type prefix if API or client breaking change\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\n* [ ] provided a link to the relevant issue or specification\n* [ ] reviewed \"Files changed\" and left comments if necessary\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\n* [ ] added a changelog entry to `CHANGELOG.md`\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\n* [ ] confirmed all CI checks have passed\n\n## Reviewers Checklist\n\n*All items are required. Please add a note if the item is not applicable and please add\nyour handle next to the items reviewed if you only reviewed selected items.*\n\nI have...\n\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\n* [ ] confirmed all author checklist items have been addressed\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\n\n\n\n\n## Summary by CodeRabbit\n\n- **Refactor**\n\t- Enhanced the transaction signature setting process for better clarity and improved error handling.\n\n<hr>This is an automatic backport of pull request #20151 done by [Mergify](https://mergify.com).","number":20186,"repository":"cosmos/cosmos-sdk","title":"fix(testsuite/sims): set all signatures (backport #20151)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20186"},"id":"PVTI_lADOAAN9684ABqEwzgOiSx0","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"fix(testsuite/sims): set all signatures (backport #20151)"},{"content":{"body":"### Summary\r\n\r\nAdd a query or something similar to return validators' jails and why did they happen.\r\n\r\n### Problem Definition\r\n\r\nCurrently there's no way to see the occurrences of validators' jails and why did they happen.\r\nThere's a query to get the validators' slashes from block X to block Y, but there are some jail cases when the slashing doesn't occur.\r\n\r\nWith ICS introduction, it's getting more complex, and I've personally seen and helped a few validators who got jailed for downtime on consumer chains and these jails were completely unexpected and unclear for them.\r\n\r\nSo for now I know at least 5 cases why a validator can get jailed (unbonding all of the self-stake; downtime on a provider chain; downtime on a consumer chain; double sign on a provider chain; double sign on a consumer chain), and that's not including some custom jails that some chains introduce (like on Kujira, a validator is jailed if it doesn't run a price-feeder).\r\n\r\nI think if there's an endpoint that will return the validators' jails (ideally throughout the whole time, so they won't get pruned, like votes, and would be available even on a pruned node), with the height the validator was jailed at, jail time/whether it's permanent, maybe slashing percent, jail reason, and some metadata (like if it's ICS downtime jail, it may include which chain a validator have missed enough blocks at; ideally extendable, so if a chain has a custom way of jailing a validator, they can put some metadata explaining the jail).\r\n\r\nThis should benefit both the validators (for example, with my example above; if they get jailed they can easily see the reason why) and the chain users in general (such a query can be highly benefitial for explorers, by showing a validators' jails history, which can lead to delegators seeing more info about their validators and being able to do their due diligence better).\r\n\r\n### Proposed Feature\r\n\r\n1. Have an endpoint/gRPC query that return data in a format similar to this::\r\n\r\n```js\r\n[\r\n    // Example is for hypothetical jail for ICS consumer chain downtime\r\n    {\r\n        \"validator_address\": \"cosmosvaloper1xxxxx\", // Validator address, or consumer address\r\n        \"height\": 123, // Jail height\r\n        \"slashing_percent\": 0.00, // How many % of the stake was slashed\r\n        \"jail_time\": \"600s\", // How much is it till a validator can unjail\r\n        \"permanently_jailed\": false, // Whether it's a double sign\r\n        \"reason\": \"ICS_CONSUMER_DOWNTIME\", // Some enum value, or store it in a metadata\r\n        \"metadata\": { // Some metadata that can be implemented differently per each reason\r\n            \"consumer_chain_id\": \"neutron-1\"\r\n        }\r\n    }\r\n]\r\n```\r\n\r\n2. When jailing a validator for any reason, add a new entry into the store with this data.","number":20188,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Provide a way to query validators' jails and their reasoning","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20188"},"id":"PVTI_lADOAAN9684ABqEwzgOi34I","labels":["T:feature-request"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"[Feature]: Provide a way to query validators' jails and their reasoning"},{"assignees":["sontrinh16"],"content":{"body":"```[tasklist]\r\n### Tasks\r\n- [x] migrate the store/v1 tests, especially for RootMultiStore, edge test cases\r\n- [ ] add tests for migration + snapshot, snapshot + pruning\r\n```\r\n","number":20198,"repository":"cosmos/cosmos-sdk","title":"[Storev2/Epic]: e2e tests ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20198"},"id":"PVTI_lADOAAN9684ABqEwzgOkldg","labels":["C:core"],"priority ":"Medium","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Storev2/Epic]: e2e tests "},{"assignees":["cool-develope"],"content":{"body":"","number":20203,"repository":"cosmos/cosmos-sdk","title":"Avoid to write & query against SS while migration","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20203"},"id":"PVTI_lADOAAN9684ABqEwzgOmiBQ","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20298"],"priority ":"Medium","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","size":"Small (1 Week)","status":"ü•≥ Done","story Type":"üêû Bug","title":"Avoid to write & query against SS while migration"},{"content":{"body":"# Description\r\n\r\npushed directly to 47 but accidentally bumped the go version \r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":20211,"repository":"cosmos/cosmos-sdk","title":"chore: downgrade to go 1.19","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20211"},"id":"PVTI_lADOAAN9684ABqEwzgOnoRs","labels":["C:Cosmovisor","C:Rosetta"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"chore: downgrade to go 1.19"},{"content":{"body":"### Summary\n\nMark all `x/distribution` and `x/gov` queries with the [`module_query_safe`](https://github.com/cosmos/cosmos-sdk/blob/8a36d9d3d06a5cd55f4614d33a4b87b7b154971c/proto/cosmos/query/v1/query.proto#L36) tag to allow them to be queries by interchain accounts.\n\n### Problem Definition\n\nCurrently, all (or most) of `x/bank`, `x/staking`, `x/auth`, `x/circuit` queries are marked with the `module_query_safe` tag. [In interchain accounts](https://github.com/cosmos/ibc-go/issues/5784), we only allow `module_query_safe` queries to be executed across chains since the query results are written to the packet acknowledgement. Our users would like would like to have `x/distribution` and `x/gov` queries enabled. It'd be nice to look into what other modules can be enabled as well.\r\n\r\nThis was also suggested in [this closed issue](https://github.com/cosmos/cosmos-sdk/issues/13041#issuecomment-1301504082).\n\n### Proposed Feature\n\nAdd [this line](https://github.com/cosmos/cosmos-sdk/blob/8a36d9d3d06a5cd55f4614d33a4b87b7b154971c/x/bank/proto/cosmos/bank/v1beta1/query.proto#L73) to the mentioned queries and add tests if needed.","number":20219,"repository":"cosmos/cosmos-sdk","title":"Mark more queries with `module_query_safe`","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20219"},"id":"PVTI_lADOAAN9684ABqEwzgOpoRY","labels":["T: Dev UX"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20248"],"priority ":"Medium","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üÜï Feature","title":"Mark more queries with `module_query_safe`"},{"assignees":["samricotta","hieuvubk"],"content":{"body":"# Description\r\n\r\nrun go mod tidy with go 1.19 \r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":20220,"repository":"cosmos/cosmos-sdk","title":"chore: tidy with go 1.19","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20220"},"id":"PVTI_lADOAAN9684ABqEwzgOptVs","labels":["C:Cosmovisor","C:Rosetta"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"chore: tidy with go 1.19"},{"assignees":["cool-develope"],"content":{"body":"## Context\n\nAs long as server/v2 is close to completion, we should start cleaning up the store API. This includes:\n\n- `RootStore` interface: We should remove all the methods that are not used by runtime or server/v2.\n    - `WorkingHash`: This is deprecated and should be removed.\n    - `StartMigration`: The tigger for migration should be managed internally bypassing config.\n- `RawDB` interface: get rid of this interface and use `corestore.KVStore`.\n- `Database`, `Reader`, `Writer` interface: get rid of them, duplicate of `corestore.types`.","number":20239,"repository":"cosmos/cosmos-sdk","title":"store/v2: API Cleanup","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20239"},"id":"PVTI_lADOAAN9684ABqEwzgOsPRw","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20379"],"priority ":"Medium","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"store/v2: API Cleanup"},{"assignees":["samricotta"],"content":{"body":"# Description\r\n\r\nCloses: #XXXX\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":20247,"repository":"cosmos/cosmos-sdk","title":"chore: revert comet 0.37.6 upgrade due to go version bump","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20247"},"id":"PVTI_lADOAAN9684ABqEwzgOs7hI","labels":["C:Rosetta"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"chore: revert comet 0.37.6 upgrade due to go version bump"},{"assignees":["tac0turtle"],"content":{"body":"# Description\n\nthis pr removes txs from the mempool when the antehandler fails and the mode is in recheck \n\n---\n\n## Author Checklist\n\n*All items are required. Please add a note to the item if the item is not applicable and\nplease add links to any relevant follow up issues.*\n\nI have...\n\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\n* [ ] confirmed `!` in the type prefix if API or client breaking change\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\n* [ ] provided a link to the relevant issue or specification\n* [ ] reviewed \"Files changed\" and left comments if necessary\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\n* [ ] added a changelog entry to `CHANGELOG.md`\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\n* [ ] confirmed all CI checks have passed\n\n## Reviewers Checklist\n\n*All items are required. Please add a note if the item is not applicable and please add\nyour handle next to the items reviewed if you only reviewed selected items.*\n\nI have...\n\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\n* [ ] confirmed all author checklist items have been addressed\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\n\n\n\n## Summary by CodeRabbit\n\n\n- **New Features**\n\t- Enhanced error handling for transaction processing, ensuring smoother performance and reliability.\n- **Tests**\n\t- Updated test assertions to align with new transaction handling behaviors.\n- **Bug Fixes**\n\t- Improved handling of failed ante handler during transaction recheck.\n\n<hr>This is an automatic backport of pull request #20144 done by [Mergify](https://mergify.com).","number":20252,"repository":"cosmos/cosmos-sdk","title":"fix: remove txs from mempool when antehandler fails in recheck (backport #20144)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20252"},"id":"PVTI_lADOAAN9684ABqEwzgOtc_w","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"fix: remove txs from mempool when antehandler fails in recheck (backport #20144)"},{"content":{"body":"### Summary\r\n\r\nCurrently to rename a store in upgrade, it renames all the existing keys in that store, which is very heavy.\r\nWe propose a cheap way to do that.\r\n\r\n### Problem Definition\r\n\r\n_No response_\r\n\r\n### Proposed Feature\r\n\r\nWe had cheap renaming in memiavl, I think the idea can be adapted to iavl as well similarly. The idea is to maintain a version-ed logical name to physical name mapping, to rename a store, we simply change the logical name in the mapping.\r\n\r\n```\r\n{prefix}-{version}: [(logical store name, physical store name)]\r\n```\r\n\r\nWhen load a multistore, we load the store name mapping into memory as well, and handle the name conversion accordingly.\r\n\r\nThe mapping should be stored in a version-ed way, and only save to db when modified, when loading a multistore, we should seek the correct version of the mapping based on target version.\r\n\r\nThe map is small, renaming operations are not frequent, performance overhead should be very small.","number":20258,"repository":"cosmos/cosmos-sdk","title":"[Feature]: cheap store renaming migration","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20258"},"id":"PVTI_lADOAAN9684ABqEwzgOuRRk","labels":["T:feature-request","C:Store"],"project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: cheap store renaming migration"},{"assignees":["tac0turtle"],"content":{"body":"### Summary\n\nintegrate comet v1 into cosmos sdk main. \n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nadd comet v1 and make adjustments in accordance to the needs of comet. ","number":20267,"repository":"cosmos/cosmos-sdk","title":"[Feature/baseapp]: integrate comet v1 ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20267"},"id":"PVTI_lADOAAN9684ABqEwzgOvCH0","labels":["T:feature-request"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/19726"],"priority ":"Critical","project":"2024 üÜô & ‚û°  üìà","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"üëë Epic","title":"[Feature/baseapp]: integrate comet v1 "},{"assignees":["julienrbrt","akhilkumarpilli","testinginprod"],"content":{"body":"### Summary\n\nCurrently in testutils and thoughout the `github.com/cosmos/cosmos-sdk` go.mod we import modules in order to test integrations. This leads to a dependency graph in which modules depend on the sdk and the sdk depends on some modules. This is not ideal and leads circular dependencies for testing and releases. \r\n\r\nIn the past I started a counter module to replace some of the modules in the core sdk. We should create simple staking and bank modules which would only be used for testing, stripped down versions. The testing system would allow people to replace the mock bank and staking modules with their production counterparts when the tests require it. \r\n\r\nThis helps in avoiding the sdk depending on modules and in turn all modules having an indirect dependency on staking, bank and auth. \n\n### Problem Definition\n\nModule & Cosmos SDK  dependency graph leads to circular dependencies which lead to complex release plans. \r\n\r\nNote: this is not an issue with previous releases. In the upcoming release we have spun out all modules into their own go.mods and in turn created this dependency graph issue.  \n\n### Work Breakdown\n\n- [ ] write a simple staking module, the minimum needed for testing. \r\n- [ ] evaluate if a bank module is needed, if implement the minimum needed for testing.  \r\n These modules should be part of the `github.com/cosmos/cosmos-sdk` go.mod. It should also live in testutil to avoid confusion with production modules. \r\n- [ ] Testutil should create an app with the mock modules but allow them to be replaced if the test requires the production module instead of the mock module. \r\n- [x] Move counter module to testutils/x\r\n","number":20279,"repository":"cosmos/cosmos-sdk","title":"[Epic]: testing dependency graph ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20279"},"id":"PVTI_lADOAAN9684ABqEwzgOwIrQ","labels":["T: Tests","T:Epic"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"true","sprint":"true","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"üëë Epic","title":"[Epic]: testing dependency graph "},{"assignees":["julienrbrt"],"content":{"body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### What happened?\r\n\r\nCurrently the cast back to proto.Message with [dynamicpb](https://github.com/cosmos/cosmos-sdk/blob/b795646c9b2a5098e774f1726f8eac114ad79b13/client/v2/autocli/msg.go#L167) doesn't make use of proto.RegisterType, which fails to execute [ValidateBasic](https://github.com/cosmos/cosmos-sdk/blob/b795646c9b2a5098e774f1726f8eac114ad79b13/client/tx/tx.go#L48) in client side.\r\n\r\n### Cosmos SDK Version\r\n\r\nrelease/v0.50.x\r\n\r\n### How to reproduce?\r\n\r\n1. [register](https://github.com/crypto-org-chain/cronos/blob/9aa7258d5fd10a08731101e86cbf18cceeec2c99/x/e2ee/autocli.go#L31) tx cmd with [ValidateBasic](https://github.com/crypto-org-chain/cronos/blob/9aa7258d5fd10a08731101e86cbf18cceeec2c99/x/e2ee/types/msg.go#L10)\r\n2. run register-encryption-key cmd and get code 1 from server instead of early fail in client side \r\n```\r\ncronosd tx e2ee register-encryption-key age18289ar3tzcv8eye5s3232yccqa4lkxm2v6pqzw2hn6tlav6jg96s7xew20malformed -y --home node0 --from validator --gas-prices 100000000000basetcro --gas 250000 | jq\r\n{\r\n  \"height\": \"0\",\r\n  \"txhash\": \"E650B8554F752BBE2B3235F4520412352A123E16ABBCE62297FF395A4118CE66\",\r\n  \"codespace\": \"undefined\",\r\n  \"code\": 1,\r\n  \"data\": \"\",\r\n  \"raw_log\": \"malformed recipient \\\"age18289ar3tzcv8eye5s3232yccqa4lkxm2v6pqzw2hn6tlav6jg96s7xew20malformed\\\": invalid character data part: s[62]=111\",\r\n  \"logs\": [],\r\n  \"info\": \"\",\r\n  \"gas_wanted\": \"0\",\r\n  \"gas_used\": \"0\",\r\n  \"tx\": null,\r\n  \"timestamp\": \"\",\r\n  \"events\": []\r\n}\r\n```\r\n### Proposal\r\nonly work for simple type but not with nested type\r\n\r\n```\r\ndiff --git a/client/v2/autocli/msg.go b/client/v2/autocli/msg.go\r\nindex 0b3143620f..11e36c2f1b 100644\r\n--- a/client/v2/autocli/msg.go\r\n+++ b/client/v2/autocli/msg.go\r\n@@ -3,6 +3,8 @@ package autocli\r\n import (\r\n \t\"context\"\r\n \t\"fmt\"\r\n+\t\"reflect\"\r\n+\t\"strings\"\r\n \r\n \t\"github.com/cockroachdb/errors\"\r\n \tgogoproto \"github.com/cosmos/gogoproto/proto\"\r\n@@ -16,6 +18,7 @@ import (\r\n \t\"cosmossdk.io/client/v2/internal/flags\"\r\n \t\"cosmossdk.io/client/v2/internal/util\"\r\n \taddresscodec \"cosmossdk.io/core/address\"\r\n+\tcodectypes \"github.com/cosmos/cosmos-sdk/codec/types\"\r\n \r\n \t// the following will be extracted to a separate module\r\n \t// https://github.com/cosmos/cosmos-sdk/issues/14403\r\n@@ -165,9 +168,25 @@ func (b *Builder) BuildMsgMethodCommand(descriptor protoreflect.MethodDescriptor\r\n \t\t// Here we use dynamicpb, to create a proto v1 compatible message.\r\n \t\t// The SDK codec will handle protov2 -> protov1 (marshal)\r\n \t\tmsg := dynamicpb.NewMessage(input.Descriptor())\r\n-\t\tproto.Merge(msg, input.Interface())\r\n+\t\tany, err := codectypes.NewAnyWithValue(msg)\r\n+\t\tif err != nil {\r\n+\t\t\treturn err\r\n+\t\t}\r\n+\t\tmsgType := gogoproto.MessageType(strings.ReplaceAll(any.TypeUrl, \"/\", \"\"))\r\n+\t\tval := reflect.New(msgType.Elem())\r\n+\t\telem := val.Elem()\r\n+\t\tinput.Range(func(fd protoreflect.FieldDescriptor, v protoreflect.Value) bool {\r\n+\t\t\tf := elem.FieldByNameFunc(func(s string) bool {\r\n+\t\t\t\treturn strings.ToLower(s) == string(fd.Name())\r\n+\t\t\t})\r\n+\t\t\tif f.IsValid() && f.CanSet() {\r\n+\t\t\t\tf.Set(reflect.ValueOf(v.Interface()))\r\n+\t\t\t}\r\n+\t\t\treturn true\r\n+\t\t})\r\n+\t\tsdkMsg := val.Interface()\r\n \r\n-\t\treturn clienttx.GenerateOrBroadcastTxCLI(clientCtx, cmd.Flags(), msg)\r\n+\t\treturn clienttx.GenerateOrBroadcastTxCLI(clientCtx, cmd.Flags(), sdkMsg.(gogoproto.Message))\r\n \t}\r\n \r\n \tcmd, err := b.buildMethodCommandCommon(descriptor, options, execFunc)\r\n\r\n```","number":20282,"repository":"cosmos/cosmos-sdk","title":"Run ValidateBasic with autocli tx cmd","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20282"},"id":"PVTI_lADOAAN9684ABqEwzgOw3OA","labels":["T:feature-request","T: Client UX"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"‚≠êÔ∏è User story","title":"Run ValidateBasic with autocli tx cmd"},{"content":{"body":"Due to the rapid changes in the SDK it has left the documentation being fragmented and out of date. The documentation needs some love but mostly needs newcomers not to be confused or put off by the fragmentation.\n\nI have divided each of the tasklists into categories of the documentation to keep it organised:\n\n```[tasklist]\n### Learn\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/20173\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/20174\n- [ ] https://github.com/cosmos/cosmos-sdk-docs/issues/153\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/17320\n- [ ] Accounts to x/accounts revise\n- [ ] Accounts diagram replace\n- [ ] Minimise GRPC section in transactions\n- [ ] Store Diagrams\n- [ ] Reduce Encoding large code reference\n- [ ] Reduce ocap code large reference\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/20176\n- [ ] Introduction\n```\n\n```[tasklist]\n### Build\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/20171\n- [ ] https://github.com/cosmos/cosmos-sdk-docs/issues/144\n```\n\n\n```[tasklist]\n### Tutorials\n- [ ] https://github.com/cosmos/cosmos-sdk-docs/issues/140\n- [ ] x/accounts\n- [ ] https://github.com/cosmos/cosmos-sdk-docs/issues/116\n```\n\nThis is a working list and shall be added to as time goes on.\n```[tasklist]\n### General\n- [ ] https://github.com/cosmos/cosmos-sdk/issues/11625\n```\n","number":139,"repository":"cosmos/cosmos-sdk-docs","title":"[Epic]: Documentation Revise Cycle","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk-docs/issues/139"},"id":"PVTI_lADOAAN9684ABqEwzgOxFsI","labels":["documentation"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk-docs","status":"üìã Backlog","story Type":"üëë Epic","title":"[Epic]: Documentation Revise Cycle"},{"assignees":["facundomedica"],"content":{"body":"# Description\r\n\r\nThis updates the Tx lifecycle so it is more generic with server/v2 efforts. Removes all mention of cometbft other than as an example of a consensus engine that could be used.\r\n\r\nCloses: https://github.com/cosmos/cosmos-sdk/issues/20173 and part of https://github.com/cosmos/cosmos-sdk-docs/issues/144\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n\r\n\r\n<!-- This is an auto-generated comment: release notes by coderabbit.ai -->\r\n## Summary by CodeRabbit\r\n\r\n\r\n- **Documentation**\r\n\t- Updated the advanced guide to provide in-depth insights into transaction processing in the Cosmos SDK, including `Context` initialization, `AnteHandler` operations, `RunMsgs` execution, `FinalizeBlock`, and `Commit` processes.\r\n\t- Enriched the beginner's guide with sections on transaction creation, broadcasting, processing, and post-transaction handling, covering gas, fees, and mempool operations.\r\n\r\n<!-- end of auto-generated comment: release notes by coderabbit.ai -->","number":20284,"repository":"cosmos/cosmos-sdk","title":"docs: Update tx lifecycle in beginner/tx-lifecycle","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20284"},"id":"PVTI_lADOAAN9684ABqEwzgOxM_0","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"docs: Update tx lifecycle in beginner/tx-lifecycle"},{"assignees":["aaronc"],"content":{"body":"### Summary\r\n\r\nIndexing data from a chain allows teams to build complex front ends that are not limited based on the nodes performance. We have seen data teams spend countless hours building complex systems allowing them to build front ends. \r\n\r\nState streaming is a good step towards allowing teams to build off chain indexes. It has its limitations. State streaming is not a first class citizen forcing off chain actors to need to decode data. This leads to complex software being built.\r\n\r\nlastly the state machine is creating countless more writes which are needed for querying. This increases the amount of io a state machine does. In order to reduce over head, create a more performant state machine it should only hold the state needed for going to the next block. Extra information for queries should be handled with a in process off chain indexer. \r\n\r\n\r\nThis epic proposes changes to  the state machine and the creation of an in process off chain indexer allowing users to build more complex applications without being prohibited by maintaining complex pieces of software. \r\n\r\nThe feature should have a plugin based system allowing teams to extend the indexing functionality to create a richer schema than the default which will be offered by the cosmos sdk team. \r\n\r\n\r\nThere are a few things to be aware of. The state machine has a differentiation between deleted data and pruned data. Deleted data refers to the removal of data due to an action. Pruning of data within in the state machine refers to data that is not needed for the state machine to continue and is removed but it is useful for users to know this information later on. \r\n\r\n### Problem Definition\r\n\r\nIndexing of state events and blocks is a complex process with countless steps needed in order to get enough information to build complex applications. \r\n\r\n\r\nstate streaming is not a first class citizen within the software forcing users to decode the data received. \r\n\r\n\r\nthe state machine is storing more data than it needs to due to queries. Reducing h to e amount of data the state machine stores allows the state machine to have less io there fore be more performant. \r\n\r\n### Work Breakdown\r\n\r\nPhase 1:\r\n- [ ] ADR\r\n- [ ] User feedback\r\n- [ ] POC\r\n\r\n\r\nPhase 2:\r\n- [ ] off chain plugin system to extend data being indexed. \r\n- [ ] tbd. ","number":20352,"repository":"cosmos/cosmos-sdk","title":"Epic: in-process off chain indexing ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20352"},"id":"PVTI_lADOAAN9684ABqEwzgO63Qo","labels":["T: Client UX","T:Epic"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"true","sprint":"true","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"üëë Epic","title":"Epic: in-process off chain indexing "},{"assignees":["facundomedica"],"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nThis works on v0.50 but not on main.\r\n\r\n```\r\n./build/simd keys add alice --keyring-backend test \r\n./build/simd keys add alicems --multisig alice --multisig-threshold 1\r\n./build/simd keys add alicemstwo --multisig alice,alicems --multisig-threshold 2\r\n./build/simd keys list\r\n```\r\n\r\nErrors:\r\n\r\n```\r\npanic: amino binary marshal marshaling error for {TypeUrl:/cosmos.crypto.secp256k1.PubKey Value:[10 33 3 199 228 92 233 213 255 97 11 242 175 129 193 69 103 73 176 130 222 220 177 157 207 204 60 255 94 220 18 109 241 229 209] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0 cachedValue:0x140016d6048 compat:<nil>}, this is likely because amino is being used directly (instead of codec.LegacyAmino which is preferred) or UnpackInterfacesMessage is not defined for some type which contains a protobuf Any either directly or via one of its members. To see a stacktrace of where the error is coming from, set the var Debug = true in codec/types/compat.go\r\n```\r\n\r\n```\r\nunable to unmarshal item.Data: \"no registered implementations of type multisig.LegacyAminoPubKey\"\r\n```\n\n### Cosmos SDK Version\n\nmain\n\n### How to reproduce?\n\n_No response_","number":20382,"repository":"cosmos/cosmos-sdk","title":"[Bug]: Regression, nested multisigs fail marshal/unmarshal in main","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20382"},"id":"PVTI_lADOAAN9684ABqEwzgO_S0Y","labels":["T:Bug"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20404"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","sprint":"true","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"üêû Bug","title":"[Bug]: Regression, nested multisigs fail marshal/unmarshal in main"},{"content":{"body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### What happened?\r\n\r\nValid secp256k1 public keys are typically 33-bytes long and begin with a SEC1 tag byte: either `0x02` or `0x03` depending on whether the y-coordinate is odd, followed by the big endian serialization of the x-coordinate, which is 32-bytes.\r\n\r\nThe current point validation logic only checks the length of the public key and does no validation of the SEC1 tag whatsoever: https://github.com/cosmos/cosmos-sdk/blob/b2e8feb/crypto/keys/secp256k1/secp256k1.go#L203-L211\r\n\r\nThis has lead to chains accepting public keys with invalid SEC1 tags: https://github.com/informalsystems/tendermint-rs/issues/1419#issuecomment-2105317413\r\n\r\nIdeally, if it's possible to retrofit improved validation, the SEC1 tag byte would be checked in addition to the length.\r\n\r\nThe SEC1 tag byte `0x00` can be used to encode the identity point (with the x-coordinate typically omitted for a 1-byte encoding), though it seems these are currently encoded as 33-bytes of `0x00`, which is at least a tolerable encoding: https://github.com/informalsystems/tendermint-rs/issues/1417\r\n\r\n### Cosmos SDK Version\r\n\r\nmain","number":20406,"repository":"cosmos/cosmos-sdk","title":"[Bug]: secp256k1 public keys with invalid SEC1 tags are accepted","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20406"},"id":"PVTI_lADOAAN9684ABqEwzgPCJeE","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Bug]: secp256k1 public keys with invalid SEC1 tags are accepted"},{"assignees":["julienrbrt"],"content":{"body":"### Summary\n\nThe AppModule.HasName interface is redundant with depinject module keys and we should consider deprecating it.\r\n\r\nOpen question: How would support look for non depinject users?\n\n### Problem Definition\n\nSee: https://github.com/cosmos/cosmos-sdk/pull/20389#discussion_r1602281565\n\n### Proposed Feature\n\nDeprecate appmodule.HasName interface in favor of depinject in runtime/v2.","number":20408,"repository":"cosmos/cosmos-sdk","title":"[Refactor]: Consider deprecating AppModule.HasName interface","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20408"},"id":"PVTI_lADOAAN9684ABqEwzgPDUj4","labels":["T:feature-request","C:server/v2"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20984"],"priority ":"High","project":"Server","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"‚öôÔ∏è Chore","title":"[Refactor]: Consider deprecating AppModule.HasName interface"},{"assignees":["cool-develope"],"content":{"body":"","number":20429,"repository":"cosmos/cosmos-sdk","title":"Implement the separated `Pruning Manager` for pruning removed stores and defered pruning","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20429"},"id":"PVTI_lADOAAN9684ABqEwzgPK0xw","labels":["C:Store"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20430"],"priority ":"Medium","project":"Store","quarter":"Q2","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"üÜï Feature","title":"Implement the separated `Pruning Manager` for pruning removed stores and defered pruning"},{"assignees":["JulianToledano"],"content":{"body":"There is duplicate logic in both x/tx/decode and the x/auth/tx packages.  Since the decision to support gogoproto throughout the SDK (as specified in `core/transaction` below) https://github.com/cosmos/cosmos-sdk/blob/1f06f5bec67e76843ceb00502a814b2a87e81d6b/core/transaction/transaction.go#L8\r\n\r\nThese two packages can be simplified and collapsed into one simple implementation in x/tx.  An initial exploration of this was done here in https://github.com/cosmos/cosmos-sdk/pull/20424 and integrated in https://github.com/cosmos/cosmos-sdk/pull/20428.\r\n\r\nThe result will be a lot of deleted code and much less mental overhead when reasoning about transactions in the SDK.  The signing code in x/tx can and should remain the same, as shown in #20424 reflection over gogotypes as input is possible through the use of dynamic messages.","number":20431,"repository":"cosmos/cosmos-sdk","title":"[Refactor]: x/auth/tx and x/tx should converge on gogoproto usage.","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20431"},"id":"PVTI_lADOAAN9684ABqEwzgPK2SY","labels":["C:x/tx","S:needs rfc"],"priority ":"High","quarter":"Q3","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","split":"false","sprint":"true","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"‚≠êÔ∏è User story","title":"[Refactor]: x/auth/tx and x/tx should converge on gogoproto usage."},{"content":{"body":"Recent PRs (including #20412) have introduced server/v2 infrastructure and an example app, simapp/v2, using this code.  In short server/v2 is a decomposition of baseapp and friends into modular, composable, parts.  What is merged into `main` at the time of writing this issue should be considered a functional PoC.  Completion of the issues enumerated here will harden the code quality of server/v2 and elevate it from PoC to production ready.\r\n\r\n### Testing\r\nFor comprehensive testing, we should adapt all integration, e2e, and sims tests currently covering runtime/v1 for runtime/v2.  Perhaps the clever use of a build flag and interfaces in the right places could make this easier.\r\n\r\n- [ ] #20471\r\n- [ ] #20484\r\n- [ ] #20799\r\n- [ ] #20800\r\n- [ ] #20469\r\n  - [simulation.SimulateFromSeed](https://github.com/cosmos/cosmos-sdk/blob/5d5ab90a4b6d866dfd376ab67af9bf4d5dd9f705/x/simulation/simulate.go#L63) expects a `BaseApp`. Is it possible for this function to accept an abstraction which both BaseApp and something from runtime/v2 satisfy?\r\n- [ ] v2/cometbft unit tests don't compile https://github.com/cosmos/cosmos-sdk/blob/5bf88be5dfc7cb77e9a2d4db4055c287b5c5acfd/server/v2/cometbft/abci_test.go#L3\r\n- [x] #20798\r\n\r\n### Breaking\r\n- [x] #20492\r\n- [ ] server/v2 handles genesis by processing gentxs as a genesis block, but store/v2 and iavl do not support the creation of genesis block at height 0.\r\n  - #20443\r\n  - this hack in the init script is required to overcome it (initial height = 2)\r\n  - https://github.com/cosmos/cosmos-sdk/blob/5bf88be5dfc7cb77e9a2d4db4055c287b5c5acfd/scripts/simapp-v2-init.sh#L25\r\n- [ ] #19949 (merged into `server_modular`) and possibly follow up PRs around TxValidators must be rebased onto main\r\n- [ ] `sdk.Context` is not provided by runtime/v2, but required for certain tx handlers using gogo interface types https://github.com/cosmos/cosmos-sdk/issues/19640\r\n\r\n### Feature Parity\r\n- [ ] simapp/v2 is started using an ad-hoc start command handler, neither an api nor grpc server is started.  this should be refactored to use `ServerModule`, i.e. comet node as a module, api server as a module, etc. https://github.com/cosmos/cosmos-sdk/blob/5bf88be5dfc7cb77e9a2d4db4055c287b5c5acfd/server/v2/server.go#L16\r\n- [x] #20494\r\n- [x] #20495\r\n- [x] #20511\r\n- [ ] #20512\r\n- [x] #20513\r\n- [ ] #20514\r\n\r\n### Code quality\r\n- [ ] deferred initialization of routers is not thread-safe but required to resolve an initialization circular dependency.\r\n  - https://github.com/cosmos/cosmos-sdk/blob/5bf88be5dfc7cb77e9a2d4db4055c287b5c5acfd/server/v2/stf/core_router_service.go#L98-L105\r\n- [ ] simapp/v2 still uses server/v1 CLI helpers for commands and config generation/parsing. These should be migrated to server/v2.  https://github.com/cosmos/cosmos-sdk/issues/19720 has more detail.\r\n- [x] #20510\r\n```[tasklist]\r\n### STF Todos\r\n- [ ] feat(stf): investigate if recurseChanges is needed\r\n- [ ] feat(stf): MsgBuilder should not be lazy building handlers\r\n```","number":20439,"repository":"cosmos/cosmos-sdk","title":"[Epic]: server/v2 production readiness via simapp/v2 and testing","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20439"},"id":"PVTI_lADOAAN9684ABqEwzgPPyxE","labels":["T:Epic"],"priority ":"Critical","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"üëë Epic","title":"[Epic]: server/v2 production readiness via simapp/v2 and testing"},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nI am trying to transfer tokens between 2 chains via IBC. I have created an IBC-enabled module which is dependent on bank and account. I have connected the 2 chains through an IBC relayer. I am able to do intra-chain token transfers. When I give the following command : \r\ngridexd tx ibc-transfer transfer exchg channel-0 cosmos1nul4as275vwxfa83kcyn27n9vc2gj4wmjcj24e 50token --fees 200stake --from user2 --chain-id grid1 --home ~/.grid1 --node http://localhost:26657 --yes\r\n\r\nI get the following error : \r\nraw_log: 'failed to execute message; message index: 0: module does not own channel\r\n  capability: channel capability not found'\n\n### Cosmos SDK Version\n\n0.46.7\n\n### How to reproduce?\n\nI followed the IBC basics tutorial : \r\nhttps://docs.ignite.com/guide/ibc\r\nInstead of the blog module, I created an IBC-enabled module exchg which is dependent on bank and account : \r\nignite s module exchg --ibc --dep bank --dep account\r\nI created two chains grid1 and grid2.\r\nI connected the two chains using the relayer as shown in the tutorial. \r\nI use the following command for IBC token transfer : \r\ngridexd tx ibc-transfer transfer exchg channel-0 cosmos1nul4as275vwxfa83kcyn27n9vc2gj4wmjcj24e 50token --fees 200stake --from user2 --chain-id grid1 --home ~/.grid1 --node http://localhost:26657 --yes","number":6445,"repository":"cosmos/ibc-go","title":"raw_log: 'failed to execute message; message index: 0: module does not own channel   capability: channel capability not found'[Bug]: ","type":"Issue","url":"https://github.com/cosmos/ibc-go/issues/6445"},"id":"PVTI_lADOAAN9684ABqEwzgPZ3UQ","labels":["question"],"repository":"https://github.com/cosmos/ibc-go","status":"üìã Backlog","title":"raw_log: 'failed to execute message; message index: 0: module does not own channel   capability: channel capability not found'[Bug]: "},{"content":{"body":"### Summary\r\n\r\nKindly point out to some place where I can find instruction for a chain id and token ticker/symbol change, or else add to docs.\r\n\r\nThanks in advance!\r\n\r\nRespectfully,","number":20456,"repository":"cosmos/cosmos-sdk","title":"Chain ID && token ticker/symbol change due to conflict with another chain","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20456"},"id":"PVTI_lADOAAN9684ABqEwzgPaNWM","labels":["T:Docs"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Chain ID && token ticker/symbol change due to conflict with another chain"},{"assignees":["julienrbrt"],"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nCosmovisor does not restart the chain binary when the height for a planned software upgrade is reached.\r\nv1.4.0 works\r\nv1.5.0 does not work\n\n### Cosmos SDK Version\n\nCosmovisor v1.5.0\n\n### How to reproduce?\n\n1. Download [this script](https://github.com/hyphacoop/testnets/blob/master/local/simulate_mainnet_upgrade.sh) to simulate a Cosmos Hub upgrade from v16 to v17 using a software upgrade proposal.\r\n2. Change the Cosmovisor version from v1.4.0 to v1.5.0 in line 72.\r\n3. Run the script.\r\n4. When the upgrade height is reached, Cosmovisor will keep running Gaia v16 without restarting and attempting to upgrade.\r\n\r\nCosmovisor v1.4.0 upgrades at height 20605230: https://paste.c-net.org/CandleCider\r\nCosmovisor v1.5.0 does not upgrade at height 20605230: https://paste.c-net.org/FloristQuirky","number":20464,"repository":"cosmos/cosmos-sdk","title":"[Bug]: [Cosmovisor] Software upgrade is not detected with Cosmovisor v1.5.0","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20464"},"id":"PVTI_lADOAAN9684ABqEwzgPcvo0","labels":["T:Bug","C:Cosmovisor"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20585"],"priority ":"Critical","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"false","sprint":"true","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"üêû Bug","title":"[Bug]: [Cosmovisor] Software upgrade is not detected with Cosmovisor v1.5.0"},{"content":{"body":"This epic aims to capture a list of dependencies that should be removed from \r\n\r\n- [x] Colltest\r\n  Colltest imports cosmos-db for testing.\r\n- [ ] core/appmodule\r\n  Core appmodule exposes an interface that requires gRPC service registrar.\r\n- [x] Errors gRPC Codes.\r\n  The errors package imports gRPC.\r\n- [x] Log package \r\n The log package imports zerolog.\r\n- [ ] gRPC Gateway\r\n Modules import gRPC gateway. \r\n- [ ] Register interface\r\n  Modules have RegisterInterfaces, this leaks the SDK.\r\n- [ ] Register Services\r\n  It leaks gRPC.\r\n- [ ] Codec\r\n  The  usage of codec leaks the SDK.\r\n-  [ ] MsgServer\r\n  Generating msg server code, leaks the SDK.\r\n- [ ] google.Protobuf.Any\r\n  Leaks the sdk.","number":20466,"repository":"cosmos/cosmos-sdk","title":"refactor: remove module dependencies","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20466"},"id":"PVTI_lADOAAN9684ABqEwzgPeeT0","labels":["dependencies"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"refactor: remove module dependencies"},{"content":{"body":"[simulation.SimulateFromSeed](https://github.com/cosmos/cosmos-sdk/blob/5d5ab90a4b6d866dfd376ab67af9bf4d5dd9f705/x/simulation/simulate.go#L63) expects a `BaseApp`. Is it possible for this function to accept an abstraction which both BaseApp and something from runtime/v2 satisfy?","number":20469,"repository":"cosmos/cosmos-sdk","title":"tests/sims support for runtime/v2","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20469"},"id":"PVTI_lADOAAN9684ABqEwzgPf1dc","labels":["C:server/v2"],"priority ":"High","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"tests/sims support for runtime/v2"},{"content":{"body":"### Summary\n\nAuthz has been a tremendous benefit to the Interchain ecosystem. Many chains have used it to overcome the shortcomings of other parts of the Cosmos SDK, but there are shortcomings of authz as well. Authz gives complete permission over a users account, in a sudo like fashion. we have seen this cause issues with users being scammed and/or having their accounts stolen. \r\n\r\nUsers are wanting to do more with Authz, we have seen some users begin forking the authz module to make authorisations stateful. Authz was not designed in a way to be extended to avoid forking. \r\n\n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nThis issue is presented as an alternative to authz, not an outright replacement. \r\n\r\nThe accounts module provides users a way to define custom account types with custom checks. \r\n\r\nIn this issue I propose two account types. \r\n\r\nOne account type that has the right to do actions on behalf of another account but it can not move funds from the owner account nor can it direct funds to other accounts in different actions. In short this account type can do all actions except the movement or directing of funds to other accounts. \r\n\r\n(By directing funds, I mean that it can not withdraw rewards to another account without permission from the main account.)\r\n\r\nThe second account type would be similar to the first except it would allow the movement of funds. \r\n\r\nThe idea here is to separate concerns and limit the potential damage of sudo control of another users accounts. ","number":20470,"repository":"cosmos/cosmos-sdk","title":"[Feature]: account based authorisations","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20470"},"id":"PVTI_lADOAAN9684ABqEwzgPf_h8","labels":["S:proposed","T:feature-request","C:x/accounts"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","title":"[Feature]: account based authorisations"},{"assignees":["tac0turtle"],"content":{"body":"https://github.com/cosmos/cosmos-sdk/blob/cbab7352bbc50e0dc45079abdcc26ee7cecccc81/scripts/simapp-v2-init.sh should be a systemtest, not an ad-hoc shell script.  it should run in CI.","number":20471,"repository":"cosmos/cosmos-sdk","title":"convert simapp-v2-init to a tests/systemtests","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20471"},"id":"PVTI_lADOAAN9684ABqEwzgPgM8Q","labels":["T: Tests","C:server/v2"],"priority ":"High","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","title":"convert simapp-v2-init to a tests/systemtests"},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nA bug caused a test upgrade to fail because a newly added module had an iavl hash mismatch that caused an app hash mismatch on the network.\r\n\r\nRolling back from the failed upgrade fails with this error:\r\n```\r\nError: failed to rollback to version: version does not exist\r\n```\r\n\r\nIt occurs because rollback's call to `LoadVersionForOverwriting` attempts to load the version before the upgrade for the module, but the module does not exist in the previous version.\r\n\r\n---\r\n\r\nI resolved this in my setup by manually deregistering the module from the root multistore before running rollback (thereby bypassing its failed attempt to load the previous version). I ran into an additional problem attempting to re-run the upgrade with a patched binary because the bad data for the module was still on disk.\r\n\r\nThis is because code that handles picking up an interrupted `Commit()` prevents calling `Commit()` when the data already exists on disk:\r\nhttps://github.com/cosmos/cosmos-sdk/blob/c4d9a495052b78a02723ed1df1d336efe83a4e8d/store/rootmulti/store.go#L1188-L1197\r\n(not to mention that a call to `Commit()` would panic because it will contain different data for the already-existing version)\r\n\r\nThe issue was fully resolved (I could rollback & successfully commit the new binary's upgrade) after I deleted the module's KVStore from disk.\n\n### Cosmos SDK Version\n\n0.47.10\n\n### How to reproduce?\n\n* Run an upgrade handler that adds a module that has an IAVL store, halt the chain after the upgrade is committed\r\n* Attempt to rollback the upgrade block\r\n* The rollback fails because it attempts to load the previous version of the new module's store which does not exist","number":20472,"repository":"cosmos/cosmos-sdk","title":"[Bug]: Rollback of an upgrade that adds a module fails","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20472"},"id":"PVTI_lADOAAN9684ABqEwzgPgQaE","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Bug]: Rollback of an upgrade that adds a module fails"},{"assignees":["facundomedica","tac0turtle"],"content":{"body":"# Description\r\n\r\nCloses: #XXXX\r\n\r\nhttps://github.com/cosmos/cosmos-sdk/compare/v0.47.11...release/v0.47.x\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title, you can find examples of the prefixes below:\r\n    <!-- * `feat`: A new feature\r\n    * `fix`: A bug fix\r\n    * `docs`: Documentation only changes\r\n    * `style`: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\r\n    * `refactor`: A code change that neither fixes a bug nor adds a feature\r\n    * `perf`: A code change that improves performance\r\n    * `test`: Adding missing tests or correcting existing tests\r\n    * `build`: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)\r\n    * `ci`: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)\r\n    * `chore`: Other changes that don't modify src or test files\r\n    * `revert`: Reverts a previous commit -->\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nPlease see [Pull Request Reviewer section in the contributing guide](../CONTRIBUTING.md#reviewer) for more information on how to review a pull request.\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":20476,"repository":"cosmos/cosmos-sdk","title":"chore: prepare v0.47.12","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20476"},"id":"PVTI_lADOAAN9684ABqEwzgPgmDI","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"chore: prepare v0.47.12"},{"assignees":["hieuvubk"],"content":{"body":"CometBFT (introduced in #20483) needs unit tests.","number":20484,"repository":"cosmos/cosmos-sdk","title":"server/v2/cometbft needs unit tests with mocks","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20484"},"id":"PVTI_lADOAAN9684ABqEwzgPjQ0g","labels":["T: Tests","C:server/v2"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/21020"],"priority ":"High","project":"Server","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"false","sprint":"true","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"‚öôÔ∏è Chore","title":"server/v2/cometbft needs unit tests with mocks"},{"content":{"body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### What happened?\r\n\r\nMy Cosmos brothers and sisters, I encountered a big problem. Based on the version of Cosmos sdk v0.50.6, my colleagues and I added a new module. It is called the Foo module (Of course, it is not called this name, but for our hidden information. Sorry.), which works like an 'auth' or 'bank'. Now we have a Cosmos sdk v0.50.6 blockchain without Foo. I want to upgrade through Cosmovisor and introduce the Foo module into our current blockchain. We have referred to the entire process of this document `https://docs.cosmos.network/main/build/tooling/cosmovisor#installation`. \r\nWe have perfectly replicated the migration plan for upgrading simap from v0.47 to v0.50. Unfortunately, my migration plan failed. My migration plan code upgrades.go did this:\r\n<img width=\"1013\" alt=\"Êà™Â±è2024-05-30 20 20 21\" src=\"https://github.com/cosmos/cosmos-sdk/assets/82297489/92cd8495-6715-49ee-a4d8-169b2ef15924\">\r\n\r\nMeanwhile, the app.go code looks like this:\r\n<img width=\"757\" alt=\"Êà™Â±è2024-05-30 20 22 38\" src=\"https://github.com/cosmos/cosmos-sdk/assets/82297489/26e73153-fc60-49e6-86cc-eb4cda676696\">\r\n<img width=\"836\" alt=\"Êà™Â±è2024-05-30 20 22 59\" src=\"https://github.com/cosmos/cosmos-sdk/assets/82297489/5bbacf3c-2572-4d49-b61f-9af8d6717734\">\r\n<img width=\"702\" alt=\"Êà™Â±è2024-05-30 20 23 10\" src=\"https://github.com/cosmos/cosmos-sdk/assets/82297489/c13db1bd-16fb-4789-af1b-c8805a05a7c2\">\r\n\r\n\r\nWe referred to the migration and upgrade code for v0.50: https://github.com/cosmos/cosmos-sdk/blob/v0.50.0/simapp/upgrades.go\r\n\r\nNext, I will describe the exceptions of the upgrade. After I completed the migration proposal and voting operation for the upgrade, there were two validator nodes on the chain called A and B, and their weights on the chain were consistent. We propose to upgrade at a height of 350 blocks, which is feasible. After the upgrade, blocks 351, 352, and 353 are generated on the chain. At this point, they should have reached a successful consensus, but when I stopped the B node and restarted it using the 'Cosmovisor run start' method, they showed an 'ERR suggest step: consensus deaths this block invalid'; Prevoting nil err=\"wrong Block. Header. AppHash `. I don't understand why a node disconnection and re-entry can cause consensus anomalies. And this blockchain will not continue to block out„ÄÇ\r\nThis is the relevant screenshot.\r\n![WechatIMG337](https://github.com/cosmos/cosmos-sdk/assets/82297489/b3e5e857-0036-49c8-a5e1-2a4568a76eb9)\r\n![WechatIMG338](https://github.com/cosmos/cosmos-sdk/assets/82297489/32854fd8-04d4-4a9f-a94c-8fcf6e6e80c5)\r\n\r\nThey use the same old and new software during the upgrade. Is it because I lost any code or operation that caused it? I'm baffled.\r\n\r\n### Cosmos SDK Version\r\n\r\nv0.50.6\r\n\r\n### How to reproduce?\r\n\r\n_No response_","number":20489,"repository":"cosmos/cosmos-sdk","title":"[Bug]: There was an issue upgrading after importing a new module","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20489"},"id":"PVTI_lADOAAN9684ABqEwzgPk7zI","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Bug]: There was an issue upgrading after importing a new module"},{"content":{"body":"### Discussed in https://github.com/cosmos/cosmos-sdk/discussions/20478\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **golnar-m** May 29, 2024</sup>\r\n### Request for Guidance on Reducing Node Size and Improving Performance\r\n\r\nHello Cosmos SDK Team,\r\n\r\nI am working on optimizing the performance of our Cosmos SDK-based application. To achieve this, I am considering building a custom version of our application that includes only the necessary modules. This should significantly reduce the binary size and improve performance. My plan is to split our application into multiple binaries, with each binary handling different sets of modules. This approach should allow us to manage modules with distinct responsibilities or resource requirements more effectively.\r\n\r\nThe proposed design involves the following steps:\r\n\r\n**1. Define Two Separate Applications:**\r\n- Create two different application definitions, each including only the necessary modules.\r\n\r\n**2. Create Separate `app.go` Files:**\r\n```\r\n/app\r\n   /app1.go\r\n   /app2.go\r\n```\r\n- For instance, we would have `app1.go` and `app2.go` in the `app/` directory, each initializing a different set of modules.\r\n\r\n**3. Update Build Scripts:**\r\n- Modify our build scripts to compile these two different applications into separate binaries.\r\n```\r\nbuild:\r\n    go build -o build/app1 ./app/app1.go\r\n    go build -o build/app2 ./app/app2.go\r\n```\r\n\r\n**4. Deploy and Run:**\r\n- Deploy and run these two binaries independently.\r\n\r\nOur goal is to split the workload and manage resources more effectively. Each binary will only handle the modules it includes, potentially reducing the overall resource usage per node.\r\n\r\n**Concerns:**\r\n- One of my primary concerns is ensuring that the two separate binaries can use the same Tendermint connection, as our overall application relies on consistent and unified communication with Tendermint.\r\n\r\nCould you please advise if this approach is feasible with the Cosmos SDK? Additionally, any insights or best practices you could share regarding the implementation of this design would be greatly appreciated.\r\n\r\nThank you very much for your assistance.\r\n@tac0turtle\r\n\r\n\r\n</div>","number":20500,"repository":"cosmos/cosmos-sdk","title":"Custom Build Options: Split our application into multiple binaries","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20500"},"id":"PVTI_lADOAAN9684ABqEwzgPnTxQ","labels":["T:question"],"priority ":"Medium","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Custom Build Options: Split our application into multiple binaries"},{"assignees":["hieuvubk"],"content":{"body":"Either adapted from client v1 or reused. \r\nsimapp/v1 usage:\r\nhttps://github.com/cosmos/cosmos-sdk/blob/87d1c5ba9c4808237bdd785a49c5ce90f7a1acbe/simapp/simd/cmd/commands.go#L46\r\nsimapp/v2 stub:\r\nhttps://github.com/cosmos/cosmos-sdk/blob/87d1c5ba9c4808237bdd785a49c5ce90f7a1acbe/simapp/v2/simdv2/cmd/commands.go#L74","number":20511,"repository":"cosmos/cosmos-sdk","title":"simapp/v2 needs an implementation of CLI pruning commands","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20511"},"id":"PVTI_lADOAAN9684ABqEwzgPopc0","labels":["C:server/v2"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20736"],"priority ":"Critical","project":"Server","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"false","sprint":"true","status":"ü•≥ Done","story Type":"‚öôÔ∏è Chore","title":"simapp/v2 needs an implementation of CLI pruning commands"},{"assignees":["hieuvubk"],"content":{"body":"Either adapted from client/v1 or reused with an abstraction.\r\n\r\nsimapp/v1 usage:\r\nhttps://github.com/cosmos/cosmos-sdk/blob/87d1c5ba9c4808237bdd785a49c5ce90f7a1acbe/simapp/simd/cmd/commands.go#L47\r\n\r\nsimapp/v2 stub:\r\nhttps://github.com/cosmos/cosmos-sdk/blob/87d1c5ba9c4808237bdd785a49c5ce90f7a1acbe/simapp/v2/simdv2/cmd/commands.go#L75","number":20512,"repository":"cosmos/cosmos-sdk","title":"simapp/v2 needs an implementation of CLI snapshot commands","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20512"},"id":"PVTI_lADOAAN9684ABqEwzgPopwU","labels":["C:server/v2"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/21065"],"priority ":"Critical","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"false","sprint":"true","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"‚öôÔ∏è Chore","title":"simapp/v2 needs an implementation of CLI snapshot commands"},{"assignees":["tac0turtle"],"content":{"body":"Needs research, see https://github.com/cosmos/cosmos-sdk/pull/20412#discussion_r1618955113","number":20513,"repository":"cosmos/cosmos-sdk","title":"server/v1 may produce a hash of empty string instead of nil, should server/v2?","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20513"},"id":"PVTI_lADOAAN9684ABqEwzgPorIQ","labels":["C:server/v2"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20775"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"false","sprint":"true","status":"ü•≥ Done","story Type":"üêû Bug","title":"server/v1 may produce a hash of empty string instead of nil, should server/v2?"},{"content":{"body":"stub: \r\nhttps://github.com/cosmos/cosmos-sdk/blob/aa21e932229487fe96e59ea8b837cf3482eebadd/simapp/v2/export.go#L9","number":20514,"repository":"cosmos/cosmos-sdk","title":"simapp/v2 needs an export implementation","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20514"},"id":"PVTI_lADOAAN9684ABqEwzgPor2E","labels":["C:server/v2"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20760"],"priority ":"Critical","project":"Server","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"false","sprint":"true","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"üÜï Feature","title":"simapp/v2 needs an export implementation"},{"content":{"body":"We recently created a simapp/CHANGELOG.md that is complementary to the UPGRADING.md.\r\nWhile the UGPRADING.md describes the important changes in the app wiring and the modules, as well as new or changes of notable concepts, simapp/CHANGELOG.md should be updated to contain an exhaustive list of changes in simapp.\r\nA user can then easily read what has changed in simapp and in the module wiring.\r\n\r\n--\r\n\r\n- Check diff from v0.50.x to main `git difftool main..v0.50.6 -- simapp/` \r\n- For each wiring change describe it briefly in simapp/CHANGELOG.md and link the PR that introduce the change\r\n- Verify there is no duplication in the root CHANGELOG.md (and if so, and totally duplicated -- no other change), remove the entry","number":20522,"repository":"cosmos/cosmos-sdk","title":"Describe all wiring changes from v0.50 to v0.51 (main) in simapp/CHANGELOG.md","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20522"},"id":"PVTI_lADOAAN9684ABqEwzgPrPUM","labels":["T:Docs","good first issue"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Describe all wiring changes from v0.50 to v0.51 (main) in simapp/CHANGELOG.md"},{"content":{"body":"# Description\r\n\r\nCloses: #XXXX\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n- update changelog\r\n- bump hashicorp/go-getter to 1.7.4 to address https://pkg.go.dev/vuln/GO-2024-2800\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title, you can find examples of the prefixes below:\r\n    <!-- * `feat`: A new feature\r\n    * `fix`: A bug fix\r\n    * `docs`: Documentation only changes\r\n    * `style`: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\r\n    * `refactor`: A code change that neither fixes a bug nor adds a feature\r\n    * `perf`: A code change that improves performance\r\n    * `test`: Adding missing tests or correcting existing tests\r\n    * `build`: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)\r\n    * `ci`: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)\r\n    * `chore`: Other changes that don't modify src or test files\r\n    * `revert`: Reverts a previous commit -->\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nPlease see [Pull Request Reviewer section in the contributing guide](../CONTRIBUTING.md#reviewer) for more information on how to review a pull request.\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":20523,"repository":"cosmos/cosmos-sdk","title":"chore: prepare for v0.47.14-ics-lsm","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20523"},"id":"PVTI_lADOAAN9684ABqEwzgPrSQs","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"chore: prepare for v0.47.14-ics-lsm"},{"content":{"body":"# Description\r\n\r\nCloses: #XXXX\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\nUse hashicorp/go-getter v1.7.1 as v1.7.4 breaks tests. \r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title, you can find examples of the prefixes below:\r\n    <!-- * `feat`: A new feature\r\n    * `fix`: A bug fix\r\n    * `docs`: Documentation only changes\r\n    * `style`: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\r\n    * `refactor`: A code change that neither fixes a bug nor adds a feature\r\n    * `perf`: A code change that improves performance\r\n    * `test`: Adding missing tests or correcting existing tests\r\n    * `build`: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)\r\n    * `ci`: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)\r\n    * `chore`: Other changes that don't modify src or test files\r\n    * `revert`: Reverts a previous commit -->\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nPlease see [Pull Request Reviewer section in the contributing guide](../CONTRIBUTING.md#reviewer) for more information on how to review a pull request.\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":20524,"repository":"cosmos/cosmos-sdk","title":"build(deps): revert hashicorp/go-getter to v1.7.1","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20524"},"id":"PVTI_lADOAAN9684ABqEwzgPrWCI","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"build(deps): revert hashicorp/go-getter to v1.7.1"},{"assignees":["alpe"],"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\n\r\nThis EPIC is the start of a tracking issue for features we would like to have in a simulator. We should identify the pitfalls of the current design, if any, and aim to provide a better user experience \r\n\r\nOne feature that would be nice is extend the simulator from a dumb fuzzer to a more intelligent fuzzer where improper messages would be caught if they errored. \r\n\r\n## Work Breakdown\r\n\r\n**TBD**\r\n\r\n\r\nI'd like to invite people to comment what features they would like to see from the simulator \r\n","number":14753,"repository":"cosmos/cosmos-sdk","title":"EPIC: Simulator ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/14753"},"id":"PVTI_lADOAAN9684ABqEwzgPrtv0","labels":["C:Simulations","T:Epic"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","split":"true","sprint":"true","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"üëë Epic","title":"EPIC: Simulator "},{"assignees":["alpe"],"content":{"body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### What happened?\r\n\r\nI ran the `TestAppImportExport` sim twice, once for 1 block, once for 10, and compared the exported genesis json files. A lot of modules do not have any differences, even though there are ops in the logs indicating that the state was successfully changed.\r\n\r\nI first found this in my own chain's sim. For a specific seed (that got used randomly), in block 3, op 11 is a x/group `SubmitProposal` which involves picking a random group, and calling the `GroupInfo` query. That query returns a \"not found\" error when the group doesn't exist, and the op isn't expecting an error for that case, so the error is propagated up and ultimately stops the sim early. This seed's genesis doesn't have any group entries. On blocks 1 and 2, the first x/group op is `CreateGroup`, which means the later ops (in the same block) have at least one group to randomly pick from. But in block 3, the first x/group op is `SubmitProposal`, so it tries to get group `0` resulting in that \"not found\" error.\r\n\r\nThe genesis json files for each seed (1 block vs 10 blocks) showed differences in these modules: bank, distribution, evidence, mint, slashing, and staking. But they have identical values for these modules: auth, authz, circuit, crisis, feegrant, genutil, gov, group, nft, upgrade, and vesting.\r\n\r\nTo be sure, I added some `fmt.Printf` calls in the group keeper to ouput values coming from `groupTable.Sequence()`. During each block, the numbers go up as expected, but the first x/group op in each block shows that the sequence has gone back to its genesis value. This is true for all the sims, and also for all the seeds that I've tried. I also tried both the `memdb` and `golangdb` backends, and both had the same symptoms.\r\n\r\n### Cosmos SDK Version\r\n\r\nv0.50.6\r\n\r\n### How to reproduce?\r\n\r\nIn a terminal:\r\n1. Check out `git checkout v0.50.6 -b tag-v0.50.6`\r\n2. `cd simapp`\r\n3. `runsim -Jobs=4 -SimAppPkg=. -ExitOnFail 1 5 TestAppImportExport` and make note of the temporary directory being used.\r\n4. `runsim -Jobs=4 -SimAppPkg=. -ExitOnFail 10 5 TestAppImportExport` and make note of the temporary directory being used.\r\n\r\nCompare the `sim_state-x.json` files between the two temp directories for any given seed value `x`.\r\n","number":20541,"repository":"cosmos/cosmos-sdk","title":"[Bug]: x/simulation: State is resetting to genesis between blocks.","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20541"},"id":"PVTI_lADOAAN9684ABqEwzgPwVoE","labels":["T:Bug","C:Simulations"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20936"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"[Bug]: x/simulation: State is resetting to genesis between blocks."},{"content":{"body":"# Description\r\n\r\nCloses: NA\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\nRemoves panic from GetLastValidators\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title, you can find examples of the prefixes below:\r\n    <!-- * `feat`: A new feature\r\n    * `fix`: A bug fix\r\n    * `docs`: Documentation only changes\r\n    * `style`: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\r\n    * `refactor`: A code change that neither fixes a bug nor adds a feature\r\n    * `perf`: A code change that improves performance\r\n    * `test`: Adding missing tests or correcting existing tests\r\n    * `build`: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)\r\n    * `ci`: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)\r\n    * `chore`: Other changes that don't modify src or test files\r\n    * `revert`: Reverts a previous commit -->\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nPlease see [Pull Request Reviewer section in the contributing guide](../CONTRIBUTING.md#reviewer) for more information on how to review a pull request.\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":20548,"repository":"cosmos/cosmos-sdk","title":"fix!: remove panic from GetLastValidators","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20548"},"id":"PVTI_lADOAAN9684ABqEwzgPzXOc","labels":["C:x/staking"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"fix!: remove panic from GetLastValidators"},{"content":{"body":"Previously in store/v1, and now in store/v2, a list of all potential store keys (now called `actors`) must be provided at initialization of store in the application lifecycle.  See the handling of `opts.StoreKeys` in [store/v2/root/factory.go](https://github.com/cosmos/cosmos-sdk/blob/439f2f9d5b5884bc9df4b58d702555330549a898/store/v2/root/factory.go#L87).  In reality this is an implementation detail of IAVL and nothing else, in IAVL one store key corresponds to one state root.\r\n\r\nWe propose that store/v2 should not require all possible actors to be defined at construction, and should support the creation of new actors at runtime.  In order to support this, a small piece of code should wrap IAVL KV operations to provide special handling of keys which are prefixed with an eagerly supplied (only the case of IAVL) list of prefixes.  @testinginprod drafted a poc of an approach for this previously, along with some benchmarks and ideas for prefix -> byte slice matching.","number":20586,"repository":"cosmos/cosmos-sdk","title":"feat: store/v2 should not require eager mounting of all store keys","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20586"},"id":"PVTI_lADOAAN9684ABqEwzgP1dGk","labels":["C:Store"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"feat: store/v2 should not require eager mounting of all store keys"},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nFollow up on https://github.com/cosmos/cosmos-sdk/pull/20490#issuecomment-2152931516 \r\nReported by @ggrieco-tob \r\n\r\nSome Msg fail with unrecognized public key type in https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/ante/sigverify.go#L529 . The pubkey is nil in the signature passed to the method.\r\nDue to the flag, https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/ante/sigverify.go#L378-L379 is not storing the pubKey on the account and neither https://github.com/cosmos/cosmos-sdk/blob/main/x/auth/ante/sigverify.go#L284 applied\n\n### Cosmos SDK Version\n\nmain\n\n### How to reproduce?\n\ncd simapp; go test --run=TestFullAppSimulation . -Enabled=true -Commit=true -SigverifyTx=false","number":20591,"repository":"cosmos/cosmos-sdk","title":"[Bug]: Sims with flag `SigverifyTx` disabled fail with error","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20591"},"id":"PVTI_lADOAAN9684ABqEwzgP20JI","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Bug]: Sims with flag `SigverifyTx` disabled fail with error"},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\n```\r\nSimulating... block 1/500, operation 400/433. --- FAIL: TestFullAppSimulation (0.66s)\r\n    sim_test.go:79:\r\n        \tError Trace:\t/Users/alex/workspace/cosmos/cosmos-sdk/simapp/sim_test.go:79\r\n        \tError:      \tReceived unexpected error:\r\n        \t            \tinvalid height: 2; expected: 1\r\n        \tTest:       \tTestFullAppSimulation\r\nFAIL\r\n```\n\n### Cosmos SDK Version\n\nmain\n\n### How to reproduce?\n\ncd simapp; go test --run=TestFullAppSimulation . -Enabled=true -Commit=false","number":20592,"repository":"cosmos/cosmos-sdk","title":"[Bug]: Sims with flag `Commit` disabled fail with error","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20592"},"id":"PVTI_lADOAAN9684ABqEwzgP20Kk","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Bug]: Sims with flag `Commit` disabled fail with error"},{"assignees":["akhilkumarpilli"],"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\n1:After initiating a successful unbonding transaction,query staking delegations and query staking unbonding-delegations,The quantity deduction is correct.\r\n2:cancel-unbonding transaction successful,query staking delegations and query staking unbonding-delegations,The quantity hasn't changed. There's a problem\n\n### Cosmos SDK Version\n\nv0.47.15-ics-lsm   \n\n### How to reproduce?\n\n1:After initiating a successful unbonding transaction,query staking delegations and query staking unbonding-delegations,The quantity deduction is correct.\r\n2:cancel-unbonding transaction successful,query staking delegations and query staking unbonding-delegations,The quantity hasn't changed. There's a problem","number":20594,"repository":"cosmos/cosmos-sdk","title":"[Bug]:  cancel-unbonding transaction successful, but actually invalid","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20594"},"id":"PVTI_lADOAAN9684ABqEwzgP3KLs","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","title":"[Bug]:  cancel-unbonding transaction successful, but actually invalid"},{"content":{"body":"# Description\n\nCloses: https://github.com/cosmos/cosmos-sdk/issues/20589\n\nBetter UX so that the keeper provided by depinject in the app as well contain the bank keeper.\nWe cannot make the UX better than that without have a breaking change. \nUsers that want to have the bank keeper in the authz and feegrant modules and aren't using depinject need to call this themselves (however, shouldn't be needed as the check is in the message handling flow -- which takes the keeper from  the app module).\n\n---\n\n## Author Checklist\n\n*All items are required. Please add a note to the item if the item is not applicable and\nplease add links to any relevant follow up issues.*\n\nI have...\n\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title, you can find examples of the prefixes below:\n    \n* [ ] confirmed `!` in the type prefix if API or client breaking change\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\n* [ ] provided a link to the relevant issue or specification\n* [ ] reviewed \"Files changed\" and left comments if necessary\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\n* [ ] added a changelog entry to `CHANGELOG.md`\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\n* [ ] confirmed all CI checks have passed\n\n## Reviewers Checklist\n\n*All items are required. Please add a note if the item is not applicable and please add\nyour handle next to the items reviewed if you only reviewed selected items.*\n\nPlease see [Pull Request Reviewer section in the contributing guide](../CONTRIBUTING.md#reviewer) for more information on how to review a pull request.\n\nI have...\n\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\n* [ ] confirmed all author checklist items have been addressed\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\n<hr>This is an automatic backport of pull request #20590 done by [Mergify](https://mergify.com).","number":20595,"repository":"cosmos/cosmos-sdk","title":"refactor(x/authz,x/feegrant): provide updated keeper in depinject (backport #20590)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20595"},"id":"PVTI_lADOAAN9684ABqEwzgP3yQE","labels":["C:x/feegrant","C:x/authz"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"refactor(x/authz,x/feegrant): provide updated keeper in depinject (backport #20590)"},{"assignees":["julienrbrt"],"content":{"body":"The time has come that the goreleaser action is broken: https://github.com/cosmos/cosmos-sdk/actions/runs/9447965432/job/26021057500,\r\n\r\nWe should update the goreleaser action (and backport all the way down to v0.47), BUT we need to watch out as goreleaser changed its behavior for pushing tagged version on GH.","number":20609,"repository":"cosmos/cosmos-sdk","title":"Update goreleaser action","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20609"},"id":"PVTI_lADOAAN9684ABqEwzgP7N1s","labels":["T: CI"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Update goreleaser action"},{"content":{"body":"### Summary\r\n\r\nAllow for non-sequential `x/auth` sequence numbers. That is, allow sequence numbers to skip values.\r\n\r\n### Problem Definition\r\n\r\nThe main issue right now is that sending transactions is a stateful endeavor where you have to query the chain for your current sequence number, and this number may not even end up being correct if you have other transactions in-flight. This is annoying for developers to implement in the client, adds a round-trip time to the node for any transaction sending, and requires clients to attempt to remember how many transactions are in-flight.\r\n\r\nThere have been other issues (https://github.com/cosmos/cosmos-sdk/issues/8308, https://github.com/cosmos/cosmos-sdk/issues/13621) over the years pointing out the poor UX around this feature.\r\n\r\nThis would also make writing tests much easier. Other devs have asked things such as \"does anyone have nice code snippet of an object to broadcast txs and update account sequence? Use case: send many transactions in tests\".\r\n\r\n### Proposed Feature\r\n\r\nStandard practice can be using the current unix time (in milliseconds) as the sequence number which is a stateless way to go about things (does not require querying the chain or keeping track of in-flight messages, assuming it takes at least 1 millisecond between signing new transactions).\r\n\r\nThe `x/auth/Params` can have three new fields:\r\n- `bool allow_sequence_skips`\r\n  - if `true`, allow sequence numbers to be skipped\r\n  - default: `false`\r\n- `uint64 num_stored_sequences`\r\n  - Store the highest n sequence numbers instead of the single highest sequence number\r\n  - This allows the transactions to hit the chain/nodes in a different order than the order in which they were sent\r\n  - default: `1`\r\n- `uint64 sequence_buffer_milliseconds`\r\n  - if non-zero, then any sequence numbers greater than `ctx.BlockTime().UnixMilli() + sequence_buffer_ms` are considered invalid\r\n  - This prevents users from accidentally ‚Äúlocking‚Äù their account by using math.MaxUint64 as the sequence number\r\n  - This prevents dapps from DOSing other dapps by using a too-high sequence number value\r\n  - default: `86,400,000` (1 day in milliseconds)\r\n\r\nAdditionally, the `uint64 sequence` field on the `BaseAccount` would be replaced with a `repeated uint64 highest_sequences` field that is at-most `num_stored_sequences` in length.\r\n\r\n----\r\n\r\nAnother solution is to avoid overloading the current `sequence` field and instead add `repeated uint64 nonces` field to `BaseAccount`. Any `tx.sequence` values greater-than `2^40` will be assumed to be nonces. This allows dapps to use either traditional sequence numbers or the newer skippable nonce values without interfering with each other.","number":20617,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Non-sequential `x/auth` sequence numbers","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20617"},"id":"PVTI_lADOAAN9684ABqEwzgP8UBg","labels":["T:feature-request","C:x/auth"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: Non-sequential `x/auth` sequence numbers"},{"assignees":["kocubinski"],"content":{"body":"How bad is the breakage?","number":20620,"repository":"cosmos/cosmos-sdk","title":"[Spike]: Explore removal of protobuf from core","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20620"},"id":"PVTI_lADOAAN9684ABqEwzgP8xUE","labels":["C:core"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Spike]: Explore removal of protobuf from core"},{"content":{"body":"### Summary\n\nIn store/v2, SC is atomic and it can roll back to the previous version. But SS is not, and pruning doesn't handle errors properly.\n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\n- more appropriate error handling\r\n- Introduce rollback features in the dedicated backend","number":20628,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Atomic updates in SS","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20628"},"id":"PVTI_lADOAAN9684ABqEwzgP-lN8","labels":["C:Store"],"priority ":"Low","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","size":"Medium (2-3 Weeks)","status":"üìã Backlog","title":"[Feature]: Atomic updates in SS"},{"content":{"body":"### Summary\n\nIt would be lovely to have upgrade-info.json as an array of objects instead of a single object, storing the info on multiple upcoming upgrades.\n\n### Problem Definition\n\nImagine a life of a person maintaining an archive node and willing to sync it from scratch, and a case when there are multiple consequent non-governance upgrade via halt-height. For simplicity let's say there's a chain which only had 2 halt-height upgrades and 0 governance ones.\r\nHere's the sequence of steps that a person willing to sync an archive node from scratch should do (with Cosmovisor latest version:\r\n\r\n1. prepare the binary for the first upgrade\r\n2. use Cosmovisor's add-upgrade command with --height\r\n3. wait for the height to be reached and the binary auto-replaced\r\n4. do steps 2 and 3 for the second upgrade\r\n5. wait till it's applied.\r\n\r\nIf this person forgets to do step 4 or fails to do so because of any reason (for example, the window between two upgrades being too small), then their node would result in AppHash error due to consensus mismatch.\r\n\r\nTherefore, it'd be nice to be able to allow to stage multiple upgrades on upgrade-info.json.\r\nAs a result of this, a node operator would be able to build and stage all upgrades at once and then just chill and wait until the node is synced without any need to do anything extra during the sync process.\n\n### Proposed Feature\n\nThis is how I see it:\r\n1. Changing the upgrade-info.json structure so that it'd be array of objects instead of a single object.\r\n2. When adding an upgrade info, instead of overwriting this file we can read it as an array, push the new upgrade info then overwrite it again.\r\n3. When applying the upgrade, probably remove its entry from the file.\r\n4. Support this on Cosmovisor side.","number":20630,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Have multiple upgrades in upgrade-info.json and support it in Cosmovisor","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20630"},"id":"PVTI_lADOAAN9684ABqEwzgP_B78","labels":["T:feature-request","C:x/upgrade","C:Cosmovisor"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: Have multiple upgrades in upgrade-info.json and support it in Cosmovisor"},{"assignees":["testinginprod"],"content":{"body":"Modify the staking redelegation logic to account for the fact that a validator is deleted if the bond amount drops to zero, which might happen in case of a redelegation","number":20641,"repository":"cosmos/cosmos-sdk","title":"change(staking): redelegating should not yield to validator deletion in case bond drops to zero.","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20641"},"id":"PVTI_lADOAAN9684ABqEwzgP_ip8","labels":["C:x/staking"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20828"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"change(staking): redelegating should not yield to validator deletion in case bond drops to zero."},{"assignees":["sontrinh16"],"content":{"body":"### Summary\n\nDydx recently brought up wanting to use time instead of block height for unordered txs. This would need a new field in the TX, which is the opposite direction we wanted to go with making the tx simpler. \r\n\r\nUsing time is simpler because its easier to understand time as a user than block height since blocks have different times. \n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nModify timeout_height to be time based instead of block height. \r\n\r\nWe would need to use the blocks time to check the timeout instead of local time. This would simplify the UX for end users since its easier to understand time over heights. ","number":20658,"repository":"cosmos/cosmos-sdk","title":"[Feature]: make timeout_height time based","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20658"},"id":"PVTI_lADOAAN9684ABqEwzgQC910","labels":["T:feature-request"],"priority ":"Critical","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","sprint":"true","status":"ü•≥ Done","story Type":"üÜï Feature","title":"[Feature]: make timeout_height time based"},{"content":{"body":"# Description\n\nThis PR fixes the `wait-tx` command to correctly parse piped in json of a tx command. It also fixes the `wait-tx` examples to not append an extra `d` to the base command string.\n\nThe yaml parsing already worked, just not json. For JSON, it was trying to unmarshal into the wrong struct. But even if it was trying with the correct struct, it would have failed because the height field is an `int64`, but ends up being quoted like a string, which confuses the parser.\n\n---\n\n## Author Checklist\n\n*All items are required. Please add a note to the item if the item is not applicable and\nplease add links to any relevant follow up issues.*\n\nI have...\n\n* [x] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title, you can find examples of the prefixes below:\n    \n* [ ] confirmed `!` in the type prefix if API or client breaking change\n* [x] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\n* [ ] provided a link to the relevant issue or specification\n* [x] reviewed \"Files changed\" and left comments if necessary\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\n* [x] added a changelog entry to `CHANGELOG.md`\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\n* [ ] confirmed all CI checks have passed\n\n## Reviewers Checklist\n\n*All items are required. Please add a note if the item is not applicable and please add\nyour handle next to the items reviewed if you only reviewed selected items.*\n\nPlease see [Pull Request Reviewer section in the contributing guide](../CONTRIBUTING.md#reviewer) for more information on how to review a pull request.\n\nI have...\n\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\n* [ ] confirmed all author checklist items have been addressed\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\n\n\n\n## Summary by CodeRabbit\n\n\n- **Bug Fixes**\n  - Improved JSON parsing in the `wait-tx` command to accurately extract the transaction hash.\n\n<hr>This is an automatic backport of pull request #20631 done by [Mergify](https://mergify.com).","number":20661,"repository":"cosmos/cosmos-sdk","title":"fix: Properly parse json in the wait-tx command. (backport #20631)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20661"},"id":"PVTI_lADOAAN9684ABqEwzgQDYuE","labels":["C:CLI","conflicts"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"fix: Properly parse json in the wait-tx command. (backport #20631)"},{"content":{"body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### What happened?\r\n\r\nCosmos is receiving simulation in async way(from the app side) and this can make `app.Commit()` or `app.CheckTx()` happened during simulation call. Then the `checkState` will be overwritten during simulation. \r\n\r\nTo avoid it, we have to make `checkState` as versioned cms to make it a snapshot. Also we should introduce **`RwMutex`** between `app.CheckTx` and `app.Simulate` to prevent that `app.CheckTx` updates `app.checkState` during `app.Simulate`.\r\n\r\nSimulation comes directly from the cosmos side grpc interface not through comet ABCI, so we need mutex in cosmos level.\r\nhttps://github.com/cosmos/cosmos-sdk/blob/6d2f6ff068c81c5783e01319beaa51c7dbb43edd/x/auth/tx/service.go#L76\r\n\r\nCheckTx and Commit mutex hold by comet, but Simulate & CheckTx and Simulate & Commit still need mutex in cosmos level.\r\n\r\n### Cosmos SDK Version\r\n\r\nmain, v0.50\r\n\r\n### How to reproduce?\r\n\r\nConcurrently send txs which are creating multiple accounts and do tx simulation to create multiple accounts. \r\n(need some kind of time wait between authkeeper.NextAccountNumber and SetAccount)\r\n\r\nThis is simple test what happen in the cms when we overwrite the contents.\r\n\r\n```go\r\nfunc (suite *KeeperTestSuite) Test_CacheContext() {\r\n\tctx := suite.ctx\r\n\tcacheCtx, _ := ctx.CacheContext()\r\n\r\n\tpubKey1 := ed25519.GenPrivKey().PubKey()\r\n\tpubKey2 := ed25519.GenPrivKey().PubKey()\r\n\taddr1 := sdk.AccAddress(pubKey1.Address())\r\n\taddr2 := sdk.AccAddress(pubKey2.Address())\r\n\r\n\t// create account to ctx\r\n\tacc1 := suite.accountKeeper.NewAccountWithAddress(ctx, sdk.AccAddress(addr1))\r\n\tacc1.SetAccountNumber(100)\r\n\r\n\tsuite.accountKeeper.SetAccount(cacheCtx, acc1)\r\n\r\n\t// create account to cacheCtx\r\n\tacc2 := suite.accountKeeper.NewAccountWithAddress(cacheCtx, sdk.AccAddress(addr2))\r\n\tacc2.SetAccountNumber(100)\r\n\r\n\tsuite.Require().Panics(func() {\r\n\t\tsuite.accountKeeper.SetAccount(cacheCtx, acc2)\r\n\t})\r\n}\r\n```\r\n\r\n","number":20685,"repository":"cosmos/cosmos-sdk","title":"[Bug]: simulation is async from the commit and checkTx, so it should use cms with version ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20685"},"id":"PVTI_lADOAAN9684ABqEwzgQH_cw","labels":["T:Bug"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20686"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Bug]: simulation is async from the commit and checkTx, so it should use cms with version "},{"assignees":["akhilkumarpilli"],"content":{"body":"e.g. FinalizeBlock\r\n\r\nhttps://github.com/cosmos/cosmos-sdk/blob/6d2f6ff068c81c5783e01319beaa51c7dbb43edd/baseapp/abci.go#L822-L824\r\n\r\nhttps://github.com/cosmos/cosmos-sdk/blob/6d2f6ff068c81c5783e01319beaa51c7dbb43edd/baseapp/baseapp.go#L869-L872\r\n\r\nI don't see there is any cache in the transaction decoder function.\r\n\r\nhttps://github.com/cosmos/cosmos-sdk/blob/main/x/tx/decode/decode.go#L69\r\n\r\nCan we rewrite it and add cache for it?","number":20694,"repository":"cosmos/cosmos-sdk","title":"Too many redundant transaction decoding","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20694"},"id":"PVTI_lADOAAN9684ABqEwzgQIzhg","labels":["C:baseapp","T: Performance"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20829","https://github.com/cosmos/cosmos-sdk/pull/20863"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"üÜï Feature","title":"Too many redundant transaction decoding"},{"assignees":["sontrinh16","hieuvubk"],"content":{"body":"# Description\r\n\r\nIt was confusing and it would make one think that it was keeping all historial key changes, but it's actually keeping a map from the first ever key to the last key.\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title, you can find examples of the prefixes below:\r\n    <!-- * `feat`: A new feature\r\n    * `fix`: A bug fix\r\n    * `docs`: Documentation only changes\r\n    * `style`: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\r\n    * `refactor`: A code change that neither fixes a bug nor adds a feature\r\n    * `perf`: A code change that improves performance\r\n    * `test`: Adding missing tests or correcting existing tests\r\n    * `build`: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)\r\n    * `ci`: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)\r\n    * `chore`: Other changes that don't modify src or test files\r\n    * `revert`: Reverts a previous commit -->\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nPlease see [Pull Request Reviewer section in the contributing guide](../CONTRIBUTING.md#reviewer) for more information on how to review a pull request.\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n\n\n<!-- This is an auto-generated comment: release notes by coderabbit.ai -->\n\n## Summary by CodeRabbit\n\n- **Refactor**\n\t- Renamed `NewToOldConsKeyMap` to `ConsKeyToValidatorIdentifierMap` across the staking module for better clarity and consistency.\n\n<!-- end of auto-generated comment: release notes by coderabbit.ai -->","number":20696,"repository":"cosmos/cosmos-sdk","title":"refactor(x/staking)!: rename NewToOldConsKeyMap to ConsKeyToValidatorIdentifierMap","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20696"},"id":"PVTI_lADOAAN9684ABqEwzgQI4hk","labels":["C:x/staking"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"refactor(x/staking)!: rename NewToOldConsKeyMap to ConsKeyToValidatorIdentifierMap"},{"content":{"body":"### Summary\n\nWith #20490 experimental Go fuzzer integration as added for sims.\r\nTo move this further,  [ggrieco-tob](https://github.com/ggrieco-tob) reported an issue when [running >1h](https://github.com/cosmos/cosmos-sdk/pull/20490#issuecomment-2152995610) this should be investigated.\n\n### Problem Definition\n\ntldr: see linked comment\n\n### Proposed Feature\n\nMake fuzzer integration stable for >1h","number":20697,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Stable fuzzer integration","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20697"},"id":"PVTI_lADOAAN9684ABqEwzgQI-QQ","labels":["C:Simulations","T:feature-request"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: Stable fuzzer integration"},{"content":{"body":"### Summary\n\nRemove the unbonding pausing logic necessary for Interchain Security (ICS) as future versions of ICS will not require it anymore. \n\n### Problem Definition\n\nRemove unnecessary code and clean up the state. \n\n### Proposed Feature\n\nThe unbonding pausing logic was introduced through this [PR](https://github.com/cosmos/cosmos-sdk/pull/13122). It enables an external module to pause unbonding operations (i.e., undelegations, redelegations, and validator unbondings) by calling the `PutUnbondingOnHold` method. The unbonding operation can be un-paused by calling the `UnbondingCanComplete` method. This was necessary for ICS to block the unlocking of stake until the consumer unbonding period elapses. The ICS team is currently working on removing this logic (as it affects the UX) and, thus, the unbonding pausing logic in SDK will no longer be needed. \r\n\r\nNote that the `AfterUnbondingInitiated` hook should also be removed. ","number":20715,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Remove unbonding pausing logic","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20715"},"id":"PVTI_lADOAAN9684ABqEwzgQKlOY","labels":["T:feature-request"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: Remove unbonding pausing logic"},{"content":{"body":"## Summary\r\n\r\nWe don't have a clear way how to pass app configuration down to packages and modules. Currently this is done through Context, globals and a global config.\r\n\r\n## Problem Definition\r\n\r\n1. Putting things into `Context` obfuscates the parameters flow\r\n2. Using mutable globals is even worse - we will loose a control on the app management\r\n3. Using a global Config object with imports other packages to set concrete types is not usable - only few packages could be able to use it, all rest will be in a circular dependency check.\r\n\r\nRef: https://github.com/cosmos/cosmos-sdk/pull/8825/files#r595494865\r\n\r\n## Proposal\r\n\r\nConsider:\r\n* splitting package configuration into sub pacages (but not `types`)\r\n* create object factories\r\n\r\n____\r\n\r\n#### For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":8915,"repository":"cosmos/cosmos-sdk","title":"Fix and refactore app options passing","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/8915"},"id":"PVTI_lADOAAN9684ABqEwzgQNMjM","labels":["T: API Breaking","Type: Code Hygiene","T: Dev UX","C:server"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Fix and refactore app options passing"},{"content":{"body":"### Summary\n\nWe need to add the sanity checks like duplication of added key, existence of renamed old key and deleted key, etc.\n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nAdd the sanity check logic when parse `StoreUpgrades`.","number":20725,"repository":"cosmos/cosmos-sdk","title":"Sanity checks in StoreUpgrades","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20725"},"id":"PVTI_lADOAAN9684ABqEwzgQNXCM","labels":["C:Store"],"priority ":"Low","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Sanity checks in StoreUpgrades"},{"content":{"body":"### Summary\r\n\r\nRelated to: #12356\r\n\r\nCometBFT has a couple of options (`create_empty_blocks` and `create_empty_blocks_interval`) that allow blockchains to pause block production if there are no txs in the mempool and if the apphash doesn't change (meaning, there are no changes made to store by the app whenever there is no txs).\r\n\r\nIn Cosmos SDK we have some modules that will write to store on every block, either in BeginBlock or EndBlock, making the apphash change at every height.\r\n\r\nDid some experimentation on this branch: https://github.com/cosmos/cosmos-sdk/compare/facu/avoid-mt-blocks?expand=1\r\n\r\n## Summary of required changes:\r\n\r\nDoable:\r\n- (x/distribution) Removed PreviousProposer (#20735)\r\n- (x/distribution) Return early when there are no fees to distribute (#20735)\r\n- (x/mint) Check for differences between current and new minter obj, and only write to disk if there has been changes (#20747)\r\n- (all) Make sure we don't make any assumptions about the correlation of height and time, always use time\r\n\r\nYet to figure out:\r\n\r\n- [x] (x/staking) Make HistoricalInfo write to disk only if there are other changes to be written.\r\n- (x/consensus) Once we have SetCometInfo implemented, we'll have to figure out if we can store this in-memory instead of writing it to store\r\n\r\nSome ideas:\r\n\r\n- a way to keep it in memory and only store it at the very end only if there has been other changes\r\n\r\n\r\n### Problem Definition\r\n\r\n-\r\n\r\n### Proposed Feature\r\n\r\n-","number":20733,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Explore setting create_empty_blocks to false","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20733"},"id":"PVTI_lADOAAN9684ABqEwzgQPMpQ","labels":["T:feature-request"],"priority ":"High","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: Explore setting create_empty_blocks to false"},{"content":{"body":"# Description\r\n\r\nCloses: #XXXX\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title, you can find examples of the prefixes below:\r\n    <!-- * `feat`: A new feature\r\n    * `fix`: A bug fix\r\n    * `docs`: Documentation only changes\r\n    * `style`: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\r\n    * `refactor`: A code change that neither fixes a bug nor adds a feature\r\n    * `perf`: A code change that improves performance\r\n    * `test`: Adding missing tests or correcting existing tests\r\n    * `build`: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)\r\n    * `ci`: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)\r\n    * `chore`: Other changes that don't modify src or test files\r\n    * `revert`: Reverts a previous commit -->\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nPlease see [Pull Request Reviewer section in the contributing guide](../CONTRIBUTING.md#reviewer) for more information on how to review a pull request.\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":20739,"repository":"cosmos/cosmos-sdk","title":"docs: add changelog entry for v0.47.16-ics-lsm","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20739"},"id":"PVTI_lADOAAN9684ABqEwzgQPmR4","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"üìã Backlog","title":"docs: add changelog entry for v0.47.16-ics-lsm"},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\n@MSalopek  - from https://github.com/cosmos/gaia/issues/3138#issuecomment-2180533897\r\n\r\nKey observations during the gaia v17 chain halt (https://forum.cosmos.network/t/cosmos-hub-v17-1-chain-halt-post-mortem/13899):\r\n- Node binary did not terminate and continued to run\r\n- pex and p2p peers still connected\r\n- RPC/API endpoints still functioning\r\n- endpoint `/status` showing `catching_up: false`\r\n\r\nMany container orchestration tools (like Docker Compose / Kubernetes) and monitoring systems are configured to detect non-zero exit codes as failure indicators, triggering alerts or automated recovery processes.\r\n\r\nAllowing a node to remain active despite irrecoverable errors introduces numerous complex edge cases that need careful handling.\r\n\r\nWhen a node in error state continues to connect to peers and respond to API calls, it can generate misleading status indicators. For example, it may report `catching_up: false` inaccurately.\r\n\r\nMonitoring `latest_block_time` can be challenging. Distinguishing between a legitimate chain halt (e.g., during an upgrade) and a fatal error that results in a stale `latest_block_time` can be problematic.\r\n\r\n Maintaining peer connections during a fatal error serves little purpose and may exacerbate issues.\r\n\r\nConclusion:\r\nThere is a crucial need for improved error identification to differentiate between errors requiring immediate node termination (triggering monitoring system alerts) and those that are recoverable. This distinction is essential for maintaining system integrity and reliability.\n\n### Cosmos SDK Version\n\n0.47\n\n### How to reproduce?\n\n_No response_","number":20745,"repository":"cosmos/cosmos-sdk","title":"[Bug]: binary should exit with code 1 upon fatal or unrecoverable errors","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20745"},"id":"PVTI_lADOAAN9684ABqEwzgQRNMc","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Bug]: binary should exit with code 1 upon fatal or unrecoverable errors"},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nWe encountered a strange issue when upgrading with cosmovisor. When attempting to add a module on multiple validator nodes, everything runs fine if all validators remain running post-upgrade. However, manually stopping and restarting a validator node results in a consensus issue. The specific error is:\r\n\r\n```bash\r\nERR prevote step: consensus deems this block invalid; prevoting nil err=\"wrong Block.Header.AppHash.  Expected ..., got ...\"\r\n```\r\n\r\nWe spent several weeks troubleshooting this, including:\r\n\r\n1. Reviewing code for random values, time, maps, etc.\r\n2. Using iaviewer to inspect data across nodes and comparing exported leveldb data\r\n3. Incrementally reducing code complexity and repeatedly upgrading to pinpoint the issue\r\n4. Migrating the module to simapp to check if the issue could be reproduced\r\n\r\nWe ultimately found that having multiple structs in the keeper and modifying one of the struct's values in EndBlocker causes the consensus failure. We created a minimal module based on v0.50.6 to test the upgrade, adding an almost empty testmodule with only the UpdateParams method and the data structure to be tested.\r\n\r\nThe changes based on v0.50.6 are here: https://github.com/cosmos/cosmos-sdk/compare/v0.50.6...lmkdbd:cosmos-sdk:test\r\n\r\nIn the following cases, the upgrade version is fully compiled from v0.50.6 code:\r\n\r\n1. When the keeper only declares the Params struct and attempts to modify Params in EndBlocker, stopping and restarting a validator node post-upgrade works fine. Successful upgrade commit: https://github.com/cosmos/cosmos-sdk/commit/3ab5d101c50afbe10406456b990c22d9bbc8bfe7\r\n2. When the keeper declares both Params and TestStruct, and attempts to modify TestStruct in EndBlocker, stopping and restarting a validator node post-upgrade results in consensus failure. The difference from the successful upgrade commit is here: https://github.com/cosmos/cosmos-sdk/commit/d97a912f536279a0b021bfadfb70f75850f44040\r\n\r\nWe hope someone can help identify the issue.\r\n\r\nOur software versions are:\r\n\r\ncosmovisor: v0.50.0\r\ncosmos-sdk: v0.50.6\n\n### Cosmos SDK Version\n\n0.50.6\n\n### How to reproduce?\n\n1. Compile simapp based on v0.50.6\r\n\r\n2. Start two validator nodes using cosmovisor\r\n\r\n3. Compile the upgraded simapp version using the [[test](https://github.com/lmkdbd/cosmos-sdk/tree/test)](https://github.com/lmkdbd/cosmos-sdk/tree/test) branch\r\n\r\n4. Place the upgraded simapp version in cosmovisor under the directory named test-module\r\n\r\n5. Submit an upgrade proposal named test-module\r\n\r\n6. After the upgrade completes, let the nodes produce a few more blocks\r\n\r\n7. Stop one of the validator nodes and restart","number":20746,"repository":"cosmos/cosmos-sdk","title":"[Question]:  Cosmos added module upgrade encountered consensus issues","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20746"},"id":"PVTI_lADOAAN9684ABqEwzgQRloU","labels":["T:question"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Question]:  Cosmos added module upgrade encountered consensus issues"},{"assignees":["julienrbrt"],"content":{"body":" > I am going to try to use this in a v0.50 chain and see what pops up.\r\nAs depinject imports api it may be fine in v0.50, but it won't work for sure in v0.47.\r\nI'll try to make v0.50 use latest api as well to see what's up as well (as we'll eventually need to bump api in depinject)\r\n\r\n_Originally posted by @julienrbrt in https://github.com/cosmos/cosmos-sdk/issues/20540#issuecomment-2188399203_\r\n            ","number":20767,"repository":"cosmos/cosmos-sdk","title":"Test latest depinject and latest api in v0.50","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20767"},"id":"PVTI_lADOAAN9684ABqEwzgQXwCs","labels":["testing-required"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"Test latest depinject and latest api in v0.50"},{"content":{"body":"This is more of a discussion than a real action item.\r\n\r\n# current status\r\n\r\nSo let's focus on the three duties of genesis as of now:\r\n- `Initting a chain`: genesis is currently used to init the initial state of a chain, the genesis state is intended as a list of ordered json files which represent some state. So we have JSON state objects converted then into protobuf ones (or whatever the state representation is). \r\n- `Exporting a chain`'s state: this is the reverse process of `Initting a chain` in which the state encoding is converted into JSON encoidng.\r\n\r\n# problem\r\n\r\nThe problem is that this way of doing genesis is often inflexible and conflates state export and import (in a human readable format) with incepting the initial state of a chain.\r\n\r\n# Proposal\r\n\r\nI would propose to split the genesis into two scopes:\r\n- State export and import\r\n- Chain Inception\r\n\r\nThe first issue is being indirectly solved by the indexer work @aaronc is doing with standardized schemas and collections becoming more human friendly in their JSON representation.\r\n\r\nthe second problem is `chain inception`, for this I would like to propose that we make genesis message based, what does it mean to be message based:\r\n\r\nit fundamentally means that genesis is just a list of ordered state transitions being executed.\r\n\r\nFor example, the current status quo on bank makes us do the following:\r\n- Set bank denoms, set balances, etc etc.\r\n\r\nHow this would change in a message based genesis:\r\n- The first message would be a `MsgCreateDenom { denom: uatom, etc.. }`\r\n- The second message would be: `MsgMintCoins { coin: { denom: uatom, amount: 1000}, address: cosmos1234 } }`\r\n\r\nThe runner of these messages can be a specialized \"address\" which is treated by modules as a super user.\r\n\r\n# advantages\r\n\r\n- Clean differentiation between state export, import and chain inception.\r\n- No need for order init genesis, since the order is determined by the messages being executed.\r\n- It is possible to alternate genesis steps between modules: eg a genesis could be `accounts.MsgCreateAccount`, `bank.MsgMintBalance`, `accounts.MsgCreateAccount`, and the dependencies between modules can become more loose.\r\n- The genesis flow becomes easier to reason about since we do not need to reason in terms of big chunks of module state being applied but we can see genesis as a series of events (transactions) being executed in order.\r\n- It would make serverv2 encapsulate state transition changes as just messages being executed.","number":20780,"repository":"cosmos/cosmos-sdk","title":"feat(genesis): Refactor Genesis to be message based","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20780"},"id":"PVTI_lADOAAN9684ABqEwzgQZjeQ","labels":["S:proposed"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"feat(genesis): Refactor Genesis to be message based"},{"content":{"body":"### Summary\r\n\r\nCurrently modules rely on consensus level steps (finalizeblock) to begin a new block in testing. This is a legacy design as a module should only worry about the steps of  a state machine and how they are called when a consensus engine would give the application a block to execute. \r\n\r\nCurrently the sdk has a begin, end block and execute txs. This issue proposes we make finalize block and the steps of consensus private to baseapp and only expose logic that is needed for a module to execute (i.e. beginblock, devliertx and endblock). this would be a partial revert of the migration to finalize block that was done as part of 0.50.\r\n\r\n### Problem Definition\r\n\r\nModules deal with consensus level steps that group application steps together, which could make testing and debugging harder. \r\n\r\n### Proposed Feature\r\n\r\nExplore exposing begin and endblock to modules for testing while making the steps of abci private to baseapp. \r\n\r\n\r\nref https://github.com/cosmos/cosmos-sdk/issues/17425","number":17555,"repository":"cosmos/cosmos-sdk","title":"[Feature]: module level testing","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/17555"},"id":"PVTI_lADOAAN9684ABqEwzgQa5rg","labels":["S:proposed","T:feature-request"],"priority ":"Medium","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"üÜï Feature","title":"[Feature]: module level testing"},{"content":{"body":"Current `validate-genesis ` command is pretty useless as it doesnt give any advanced info about potential errors. It would be great if this command return place of genesis.json where it first fails - this would make life much easier.\r\nThank you! ","number":17250,"repository":"cosmos/cosmos-sdk","title":"[Feature]: genesis.json validation advanced error trace","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/17250"},"id":"PVTI_lADOAAN9684ABqEwzgQa54Q","labels":["T:feature-request"],"priority ":"Medium","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","story Type":"üÜï Feature","title":"[Feature]: genesis.json validation advanced error trace"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Word of caution: poorly thought-out proposals may be rejected \r\nv                     without deliberation \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n## Summary\r\nWhile using ICA to stake and unstake, the rewards  that are `auto claimed` are not passed to the controller chain\r\n\r\n<!-- Short, concise description of the proposed feature -->\r\n\r\n## Problem Definition\r\nIn Liquid staking for pstake using ICA, we have users ibc tokens to persistence chain, then do a custom liquid stake txn.\r\nSo the staking/ unstaking amount, etc is always known and ICA Msgs can be sent for the same.\r\n\r\nWhile claiming rewards - we get the claimed rewards in the [MsgWithdrawDelegatorRewardResponse](https://github.com/cosmos/cosmos-sdk/blob/main/proto/cosmos/distribution/v1beta1/tx.proto#L88), But while staking/ unstaking rewards are also autoclaimed, which cannot be known to the controller chain.\r\n\r\nThis is the only reason so far that ICQ is being used in the liquid staking implementation of pstake ( i.e. query balance of reward_withdrawal_ica_account) so it can be restaked.\r\n\r\n<!-- Why do we need this feature? \r\nWhat problems may be addressed by introducing this feature?\r\nWhat benefits does the SDK stand to gain by including this feature?\r\nAre there any disadvantages of including this feature? -->\r\n\r\n## Proposal\r\n\r\n1. Remove auto-claim feature \r\n2. Add auto-claimed rewards to response struct \r\n<!-- Detailed description of requirements of implementation -->\r\n","number":13825,"repository":"cosmos/cosmos-sdk","title":"Feature Request: Add autoclaimed rewards  to delegation/undelegationResponse struct","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/13825"},"id":"PVTI_lADOAAN9684ABqEwzgQa6iA","labels":["T: Dev UX"],"priority ":"Medium","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"‚òÉÔ∏è Icebox","story Type":"üÜï Feature","title":"Feature Request: Add autoclaimed rewards  to delegation/undelegationResponse struct"},{"content":{"body":"We cannot use proto.Merge in STF because it fails with custom types.\r\nSo we're forced to use reflection.Set, which is a little hacky and might have impact in embedded environments.\r\n\r\nPossible alternatives:\r\n- marshal and unmarshal: performance would be bad.\r\n- fix our gogoproto fork to have Merge work with custom types\r\n\r\nRef: https://github.com/cosmos/cosmos-sdk/blob/main/server/v2/stf/stf_router.go#L167\r\n\r\n","number":20784,"repository":"cosmos/cosmos-sdk","title":"refactor(stf): find alternative to reflection.Set to achieve proto.Merge on STf","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20784"},"id":"PVTI_lADOAAN9684ABqEwzgQa6m0","labels":["S:needs architecture"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"refactor(stf): find alternative to reflection.Set to achieve proto.Merge on STf"},{"content":{"body":"<!-- < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < ‚ò∫ \r\nv                            ‚ú∞  Thanks for opening an issue! ‚ú∞    \r\nv    Before smashing the submit button please review the template.\r\nv    Please also ensure that this is not a duplicate issue :)  \r\n‚ò∫ > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >  -->\r\n\r\n<!--\r\nIMPORTANT: Prior to opening a bug report, check if it affects one of the core modules\r\nand if its elegible for a bug bounty on `SECURITY.md`. Bugs that are not submitted\r\nthrough the appropriate channels won't receive any bounty.\r\n -->\r\n\r\n## Summary of Bug\r\n\r\nSome simulations, like `x/nft`'s, don't actually check if what the message intended to do was actually executed; it only checks if the tx was delivered correctly.\r\n\r\nWe should check the result somehow, in x/nft's example, check for balance after a send happens. See `TestWeightedOperations` here https://github.com/cosmos/cosmos-sdk/blob/main/x/nft/simulation/operations_test.go\r\n\r\n____\r\n\r\n## For Admin Use\r\n\r\n- [ ] Not duplicate issue\r\n- [ ] Appropriate labels applied\r\n- [ ] Appropriate contributors tagged\r\n- [ ] Contributor assigned/self-assigned\r\n","number":12533,"repository":"cosmos/cosmos-sdk","title":"Some simulations don't check the result","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/12533"},"id":"PVTI_lADOAAN9684ABqEwzgQa6zI","labels":["T: Tests","C:Simulations"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","story Type":"üÜï Feature","title":"Some simulations don't check the result"},{"assignees":["testinginprod"],"content":{"body":"In our APIs there's a mix of MessageName vs TypeURL being used to identify messages.\r\nWe should converge towards using only one, I propose we use:\r\n- typeURL only for when converting a `google.Protobuf.Any`¬†to `proto.Message`.\r\n- MessageName everywhere else: in the routers, when getting the message name, etc etc.","number":20785,"repository":"cosmos/cosmos-sdk","title":"refactor(core/runtime/stf/baseapp):  Converge the usage of typeURL vs MessageName","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20785"},"id":"PVTI_lADOAAN9684ABqEwzgQa8Sg","labels":["C:server/v2"],"priority ":"High","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"refactor(core/runtime/stf/baseapp):  Converge the usage of typeURL vs MessageName"},{"assignees":["cool-develope"],"content":{"body":"### Summary\r\n\r\nCachemulti.store.Write calls every constituent CacheKV store's write method. https://github.com/cosmos/cosmos-sdk/blob/main/store/cachemulti/store.go#L122-L128\r\n\r\nNow that in SDK v50 onwards we are using working hashes, where these don't directly write to a shared DB, we should switch this to doing every write in a goroutine and having a sync.WaitGroup to wait for all the writes to complete\r\n\r\n### Problem Definition\r\n\r\nImproves an important speed bottleneck in block execution + syncing.\r\n\r\n### Proposed Feature\r\n\r\nMake the code\r\n```golang\r\n// Write calls Write on each underlying store.\r\nfunc (cms Store) Write() {\r\n\tcms.db.Write()\r\n        wg := sync.WaitGroup{}\r\n       wg.Add(len(cms.stores))\r\n\tfor _, store := range cms.stores {\r\n               go func() {\r\n          \t\tstore.Write()\r\n          \t\twg.Done()\r\n               }()\r\n\t}\r\n        wg.Wait()\r\n}\r\n```","number":20787,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Run cachemulti.store.write in parallel","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20787"},"id":"PVTI_lADOAAN9684ABqEwzgQbLZE","labels":["T: Performance","T:feature-request"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20817"],"priority ":"High","quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","sprint":"true","status":"üëÄ Waiting / In review","story Type":"üÜï Feature","title":"[Feature]: Run cachemulti.store.write in parallel"},{"content":{"body":"### Summary\n\nRight now the \"NFT\" module that has been pulled into the main repos is essentially non-functional, because it does not actually allow for any way to create tokens or mint tokens on your own ignite chain. The only method which has been implemented is \"transfer\" which doesn't really make sense, it seems intentionally crippled to actually PREVENT ignite chains from being able to use it. We are requesting that some of the functionality from the SEI or Coreum chain NFT implementations be pulled upstream into the main repo, to enable actual token creation and minting of NFTs on ignite-based chains.\n\n### Problem Definition\n\nERC721 is a token definition for \"non-fungible tokens\" on the Ethereum blockchain. We wish to have this functionality as a module within Cosmos-SDK / ignite, without having to support a full virtual machine implementation on our chains. It's clear there has already been some effort to pull this functionality into Cosmos SDK however the current status is non-functional because there is no ability to actually mint NFTs on your own chain or via any RPC commands. \r\n\r\nOur company wanted to issue security tokens on a Cosmos chain, but we deemed it not possible for us at this time because we weren't sure the best way to implement the code from SEI or Coreum chains and we didn't want to become non-compatible with any updates from Cosmos on the NFT module, if they ever do come down. We also wanted to issue utility tokens for gaming purposes within our Cosmos-based metaverse, but again we deemed it not possible at this time. So, it is clear that Cosmos ecosystem development is being held up both in terms of security-tokens and real-world asset securitization, and also metaverse / gaming aspects, because of this crucial missing piece.\n\n### Proposed Feature\n\nIf you look at: https://ethereum.org/en/developers/docs/standards/tokens/erc-721/\r\n\r\nYou can see that there is a list of supported functionalities of the ERC721 standard, namely:\r\n\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    function approve(address _approved, uint256 _tokenId) external payable;\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n\r\nHowever, we also need some \"preparatory\" methods in the Cosmos chain, which are sort of assumed to have already been called when an ERC721 token contract is created on the ethereum blockchain. Namely, we need the functionalities already written by the Coreum team and described here: https://github.com/CoreumFoundation/coreum/blob/master/x/asset/nft/spec/README.md\r\n\r\nWe are asking that the Cosmos team works to pull in the updates to enable full functionality of the NFT module, potentially working with the Coreum team as possible / necessary to understand exactly what needs to be pulled in. I am personally not able to make a PR to the effect right now so I'm asking that some developer/s be assigned. If we need to make some sort of grant or bounty for this update, maybe that could be arranged also.\r\n","number":20791,"repository":"cosmos/cosmos-sdk","title":"[Feature]: ERC 721 module be updated to include functions such as token creation and minting events","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20791"},"id":"PVTI_lADOAAN9684ABqEwzgQbm3s","labels":["T:feature-request"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: ERC 721 module be updated to include functions such as token creation and minting events"},{"assignees":["testinginprod"],"content":{"body":"wire grpc and gateway for querying ","number":20798,"repository":"cosmos/cosmos-sdk","title":"server/v2: wire grpc and gateway","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20798"},"id":"PVTI_lADOAAN9684ABqEwzgQdZrg","labels":["T: Client UX","C:server/v2"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/21038"],"priority ":"Critical","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"server/v2: wire grpc and gateway"},{"content":{"body":"begin a spike of the bank module for integration tests to get an understanding of the changes needed then based on the changes we can evaluate what needs to be done for the other tests. \r\n\r\nGoal: have integration tests work for v1 & v2. This may not be possible but should evaluate first \r\n```[tasklist]\r\n### Tasks\r\n- [ ] bank\r\n- [ ] auth\r\n- [ ] authz\r\n- [ ] feegrant\r\n- [ ] gov\r\n- [ ] staking\r\n- [ ] slashing\r\n- [ ] upgrade\r\n- [ ] accounts\r\n- [ ] distribution\r\n- [ ] evidence\r\n- [ ] mint\r\n- [ ] nft\r\n- [ ] protocol pool\r\n```\r\n","number":20799,"repository":"cosmos/cosmos-sdk","title":"server/v2: integration tests ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20799"},"id":"PVTI_lADOAAN9684ABqEwzgQdZsM","labels":["T: Tests","C:server/v2"],"priority ":"High","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"server/v2: integration tests "},{"content":{"body":"Evaluate migrating e2e tests to system tests so we can use app v1 and v2 without needing to do hacks with build flags to attempt to make it work. \r\n\r\n\r\nGoals: have e2e tests working with either v1 or v2 ","number":20800,"repository":"cosmos/cosmos-sdk","title":"server/v2: e2e tests","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20800"},"id":"PVTI_lADOAAN9684ABqEwzgQdZ1s","labels":["T: Tests","C:server/v2"],"priority ":"High","project":"Server","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"server/v2: e2e tests"},{"assignees":["julienrbrt"],"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nI was writing some tests with simd/v2, and the `start` command was failing because the gRPC server component could not bind to port 9090. I did not need the gRPC server for my test, so I set the config to `Enable=false`, but it still tried to bind to 9090.\r\n\r\nThe `(*GRPCServer).Start` method is short enough that it is easy to see it does not respect the `Enable` setting: https://github.com/cosmos/cosmos-sdk/blob/d426a5db677506a981cb094249bb6eaaf6324d39/server/v2/api/grpc/server.go#L73-L94\r\n\r\nFor my purposes, setting `Address=127.0.0.1:0` to bind to an anonymous port is a sufficient workaround, although `Enabled=false` would be preferable.\r\n\r\n\n\n### Cosmos SDK Version\n\nmain\n\n### How to reproduce?\n\n_No response_","number":20819,"repository":"cosmos/cosmos-sdk","title":"[Bug]: server/v2/api/grpc: Server disregards Config's `Enable` field","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20819"},"id":"PVTI_lADOAAN9684ABqEwzgQfhmI","labels":["T:Bug"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20874"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"[Bug]: server/v2/api/grpc: Server disregards Config's `Enable` field"},{"content":{"body":"### Summary\n\nI would love to see an example of a complete parameter file with both module and simulation parameters. I can change the simulation weights, as described in https://github.com/cosmos/cosmos-sdk/blob/d426a5db677506a981cb094249bb6eaaf6324d39/simapp/params/doc.go, but not module parameters, e.g., `mint.params.bond_denom`","number":20820,"repository":"cosmos/cosmos-sdk","title":"[Documentation]: Simulator parameter file example","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20820"},"id":"PVTI_lADOAAN9684ABqEwzgQfoFM","labels":["T:Docs","C:Simulations"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Documentation]: Simulator parameter file example"},{"assignees":["samricotta"],"content":{"body":"We are planning to develop a blockchain based on the Cosmos SDK, and we would like to support the following two signature algorithms simultaneously:\n\n1. The default secp256k1 signature algorithm in Cosmos SDK, which is compatible with Cosmos ecosystem wallets like Keplr.\n\n2. The Ethereum ECDSA secp256k1 signature algorithm, which is compatible with Ethereum wallets like MetaMask.\n\nThe goal is to make it convenient for users to manage their assets using the wallets they are familiar with, reducing the hassle of importing private keys. It also aims to better support cross-chain interactions with both the Cosmos and Ethereum ecosystems.\n\nWe noticed that PR #5278 has introduced interchangeable key implementations for the Cosmos SDK, but it seems that supporting multiple signature algorithms on a single chain is not yet possible.\n\nWe would like to ask:\n\n1. Is there any plan for Cosmos SDK to support using multiple signature algorithms on the same chain?\n\n2. If there is no ready-made support at the moment, how can we customize and develop this feature based on the SDK? Which modules need to be modified?\n\n3. While supporting multiple signature algorithms, how can we ensure compatibility with the existing Cosmos IBC protocol to support cross-chain functionality?\n\n4. Do you have any other suggestions regarding this feature?\n\nWe hope that the maintainers of the Cosmos SDK could provide guidance to help us achieve this goal. If there is anything unclear, please feel free to reach out to us for clarification.\n\nThank you in advance!","number":20822,"repository":"cosmos/cosmos-sdk","title":"Supporting Multiple Signature Algorithms in Cosmos SDK for Compatibility with Major Wallets","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20822"},"id":"PVTI_lADOAAN9684ABqEwzgQgv3U","labels":["T:question"],"quarter":"Q3","repository":"https://github.com/cosmos/cosmos-sdk","sprint":"true","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"‚≠êÔ∏è User story","title":"Supporting Multiple Signature Algorithms in Cosmos SDK for Compatibility with Major Wallets"},{"content":{"body":"### Summary\n\nCan someone provide me steps on how to change the token ticker of a cosmos based application.","number":20832,"repository":"cosmos/cosmos-sdk","title":"[Documentation]: How to change the token symbol ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20832"},"id":"PVTI_lADOAAN9684ABqEwzgQiyrQ","labels":["T:Docs"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"[Documentation]: How to change the token symbol "},{"assignees":["julienrbrt"],"content":{"body":"# Description\r\n\r\nrun go mod tidy on 0.47 \r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title, you can find examples of the prefixes below:\r\n    <!-- * `feat`: A new feature\r\n    * `fix`: A bug fix\r\n    * `docs`: Documentation only changes\r\n    * `style`: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\r\n    * `refactor`: A code change that neither fixes a bug nor adds a feature\r\n    * `perf`: A code change that improves performance\r\n    * `test`: Adding missing tests or correcting existing tests\r\n    * `build`: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)\r\n    * `ci`: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)\r\n    * `chore`: Other changes that don't modify src or test files\r\n    * `revert`: Reverts a previous commit -->\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nPlease see [Pull Request Reviewer section in the contributing guide](../CONTRIBUTING.md#reviewer) for more information on how to review a pull request.\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":20841,"repository":"cosmos/cosmos-sdk","title":"fix: build 0.47.x ","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20841"},"id":"PVTI_lADOAAN9684ABqEwzgQkwlk","labels":["C:Cosmovisor","C:Rosetta"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"fix: build 0.47.x "},{"assignees":["julienrbrt"],"content":{"body":"Reverts cosmos/cosmos-sdk#20837","number":20844,"repository":"cosmos/cosmos-sdk","title":"Revert \"build(deps): Bump github.com/cometbft/cometbft from 0.37.5 to 0.37.8\"","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20844"},"id":"PVTI_lADOAAN9684ABqEwzgQlI98","labels":["C:Cosmovisor","C:Rosetta"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"Revert \"build(deps): Bump github.com/cometbft/cometbft from 0.37.5 to 0.37.8\""},{"content":{"body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n## What happened?\r\n  I am currently facing a problem where I call tx to query data, but when the amount of data involved in the query is large, it will cause the memory of the node program to increase continuously, leading to the use of machine resources and abnormal node exit.\r\n  My solution is to modify the value of the 'query-gas-limit' parameter in the configuration file 'app.toml' and set it to a reasonable value of 200000. But it doesn't appear to limit tx composite queries.\r\n\r\n## Query background and examples\r\n  1. Background: The current blockchain has a block height of approximately 550000 blocks and a transaction volume of tens of millions of transactions. and the queried nodes have set the 'query-gas-limit' parameter, which is 200000.\r\n  2. Query:  Query all transactions with block height greater than 450000 blocks (with a large number of transactions), and want to restrict the query through the 'query-gas-limit' parameter. The interface for querying data is: `/cosmos/tx/v1beta1/txs?order_by=ORDER_BY_DESC&query=tx.height>450000`\r\n  3.  Result: The 'query-gas-limit' parameters did not take effect and the interface was still requesting. The request was manually stopped, but the chain node program did not stop querying data internally and the memory was constantly increasing.\r\n<img width=\"1104\" alt=\"Êà™Â±è2024-07-03 18 41 55\" src=\"https://github.com/cosmos/cosmos-sdk/assets/82297489/95ad2f66-869a-4893-be2e-25ad248bdceb\">\r\n\r\n## Ask\r\n 1. Why setting 'query-gas-limit' cannot restrict tx composite queries?\r\n 2. What is a good way to solve the problem of too large tx request data?\r\n\r\n### Cosmos SDK Version\r\n\r\nv0.50.6\r\n\r\n### How to reproduce?\r\n\r\n_No response_","number":20859,"repository":"cosmos/cosmos-sdk","title":"[Bug]: Setting the value of query-gas-limit does not impose any restrictions on the tx composite query","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20859"},"id":"PVTI_lADOAAN9684ABqEwzgQm7V4","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Bug]: Setting the value of query-gas-limit does not impose any restrictions on the tx composite query"},{"assignees":["facundomedica"],"content":{"body":"Create separate go.mod for multisig in order to avoid x/bank leaking into x/accounts","number":20899,"repository":"cosmos/cosmos-sdk","title":"refactor(accounts/multisig): create separate go.mod ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20899"},"id":"PVTI_lADOAAN9684ABqEwzgQrpno","labels":["C:x/accounts"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20928"],"quarter":"Q3","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","sprint":"true","status":"ü•≥ Done","title":"refactor(accounts/multisig): create separate go.mod "},{"content":{"body":"Multiple users complained that with the (partial) migration to collections in v0.50 (Hub, Injective), testing modules that use collections became harder.\r\n\r\nThe solution we provided was to create keeper wrappers and use that in the modules. That is acceptable for v0.50, as not all modules have migrated to collections. However, with v0.52 coming, the deleted API surface has increased significantly.\r\nHowever, it appears that we ourselves didn't encounter the problem as we kept the API we needed directly in the modules (check bank API for instance vs staking).\r\n\r\nWe should possibly go through each module that migrated to collections and bring back so API for compatibility, or provide an example on how to write tests and use ourselves that method (otherwise it's unfair to break people but not ourselves).\r\n\r\ncc @MSalopek ","number":20905,"repository":"cosmos/cosmos-sdk","title":"Explain or improve how to test collections","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20905"},"id":"PVTI_lADOAAN9684ABqEwzgQuiN8","labels":["T:Docs","T: Tests","T: Dev UX","C:collections"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Explain or improve how to test collections"},{"assignees":["tac0turtle","julienrbrt"],"content":{"body":"# Description\r\n\r\nCloses: #18430 \r\n\r\nThis PR fixes the grpc query deserialization issue with `math.LegacyDec` which is only happening with v0.47 releases.\r\n\r\n<!-- Add a description of the changes that this PR introduces and the files that\r\nare the most critical to review. -->\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title, you can find examples of the prefixes below:\r\n    <!-- * `feat`: A new feature\r\n    * `fix`: A bug fix\r\n    * `docs`: Documentation only changes\r\n    * `style`: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\r\n    * `refactor`: A code change that neither fixes a bug nor adds a feature\r\n    * `perf`: A code change that improves performance\r\n    * `test`: Adding missing tests or correcting existing tests\r\n    * `build`: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)\r\n    * `ci`: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)\r\n    * `chore`: Other changes that don't modify src or test files\r\n    * `revert`: Reverts a previous commit -->\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nPlease see [Pull Request Reviewer section in the contributing guide](../CONTRIBUTING.md#reviewer) for more information on how to review a pull request.\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":20912,"repository":"cosmos/cosmos-sdk","title":"fix: panic `math.LegacyDec` deserialization","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20912"},"id":"PVTI_lADOAAN9684ABqEwzgQw0Ts","labels":["C:CLI"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"fix: panic `math.LegacyDec` deserialization"},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nWhen calling create-continuous-fund with a percentage expressed as a float, the command panics.\r\n\r\nAs I understand, auto-cli generates dynamicpb messages using protoreflect message Descriptor() and Interface(). In the case of MsgCreateContinuousFund, the percentage is set as a human-readable number.\r\n\r\n![Screenshot 2024-07-11 at 10 39 02](https://github.com/cosmos/cosmos-sdk/assets/6096878/ee2a3412-13bd-43a6-9edf-6904f027cba4)\r\n\r\nThus, it fails when decoding, as the unmarshalling of LegacyDec expects a machine representation of the floating-point number.\r\n\r\nhttps://github.com/cosmos/cosmos-sdk/blob/ab6400fbfd4e6310214c19a9e536d56dc6e30c38/x/protocolpool/types/tx.pb.go#L2885-L2887\r\n\r\n```\r\npanic: math/big: cannot unmarshal \"0.1\" into a *big.Int\r\n\r\ngoroutine 1 [running]:\r\ncosmossdk.io/x/auth/tx.(*builder).GetTx(0x1400157a240)\r\n        /Users/user/github.com/cosmos/cosmos-sdk/x/auth/tx/builder.go:99 +0xd8\r\ngithub.com/cosmos/cosmos-sdk/client/tx.BroadcastTx({{0x1055f12e8, 0x140013b5650}, 0x0, {0x14001041b08, 0x4}, {0x10560dca8, 0x14000e37150}, {0x1055edf40, 0x14000d67040}, {0x105595da0, ...}, ...}, ...)\r\n        /Users/user/github.com/cosmos/cosmos-sdk/client/tx/tx.go:108 +0x510\r\ngithub.com/cosmos/cosmos-sdk/client/tx.GenerateOrBroadcastTxWithFactory({{0x1055f12e8, 0x140013b5650}, 0x0, {0x14001041b08, 0x4}, {0x10560dca8, 0x14000e37150}, {0x1055edf40, 0x14000d67040}, {0x105595da0, ...}, ...}, ...)\r\n        /Users/user/github.com/cosmos/cosmos-sdk/client/tx/tx.go:67 +0x448\r\ngithub.com/cosmos/cosmos-sdk/client/tx.GenerateOrBroadcastTxCLI({{0x1055f12e8, 0x140013b5650}, 0x0, {0x14001041b08, 0x4}, {0x10560dca8, 0x14000e37150}, {0x1055edf40, 0x14000d67040}, {0x105595da0, ...}, ...}, ...)\r\n        /Users/user/github.com/cosmos/cosmos-sdk/client/tx/tx.go:32 +0x180\r\ncosmossdk.io/client/v2/autocli.(*Builder).handleGovProposal(_, _, {_, _}, {{0x1055f12e8, 0x140013b5650}, 0x0, {0x14001041b08, 0x4}, {0x10560dca8, ...}, ...}, ...)\r\n        /Users/user/github.com/cosmos/cosmos-sdk/client/v2/autocli/msg.go:227 +0x724\r\ncosmossdk.io/client/v2/autocli.(*Builder).BuildMsgMethodCommand.func1(0x14001355808, {0x1056051c8, 0x140013ae8a0})\r\n        /Users/user/github.com/cosmos/cosmos-sdk/client/v2/autocli/msg.go:136 +0x30c\r\ncosmossdk.io/client/v2/autocli.(*Builder).buildMethodCommandCommon.func1(0x14001355808, {0x14000e90080, 0x2, 0x8})\r\n        /Users/user/github.com/cosmos/cosmos-sdk/client/v2/autocli/common.go:97 +0x3dc\r\ngithub.com/spf13/cobra.(*Command).execute(0x14001355808, {0x14000e90000, 0x8, 0x8})\r\n        /Users/user/go/pkg/mod/github.com/spf13/cobra@v1.8.1/command.go:985 +0xbd8\r\ngithub.com/spf13/cobra.(*Command).ExecuteC(0x14000eb6f08)\r\n        /Users/user/go/pkg/mod/github.com/spf13/cobra@v1.8.1/command.go:1117 +0x7d0\r\ngithub.com/spf13/cobra.(*Command).Execute(0x14000eb6f08)\r\n        /Users/user/go/pkg/mod/github.com/spf13/cobra@v1.8.1/command.go:1041 +0x30\r\ngithub.com/spf13/cobra.(*Command).ExecuteContext(0x14000eb6f08, {0x1055d12c8, 0x140013b4e70})\r\n        /Users/user/go/pkg/mod/github.com/spf13/cobra@v1.8.1/command.go:1034 +0x70\r\ngithub.com/cosmos/cosmos-sdk/server/cmd.Execute(0x14000eb6f08, {0x0, 0x0}, {0x14001029350, 0x21})\r\n        /Users/user/github.com/cosmos/cosmos-sdk/server/cmd/execute.go:40 +0x2ac\r\nmain.main()\r\n        /Users/user/github.com/cosmos/cosmos-sdk/simapp/simd/main.go:15 +0x40\r\nExiting.\r\n```\n\n### Cosmos SDK Version\n\nmain\n\n### How to reproduce?\n\n./simd tx protocolpool create-continuous-fund cosmos18mfx85veapt3xs0vdr2cx9skeregs9sqawku8f 0.1  --summary test --title test --deposit  100000stake","number":20935,"repository":"cosmos/cosmos-sdk","title":"[Bug]: protocolpool create-continuous-pool panics","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20935"},"id":"PVTI_lADOAAN9684ABqEwzgQ1DIE","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Bug]: protocolpool create-continuous-pool panics"},{"content":{"body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### What happened?\r\n\r\ncollection iterator is not including `pagination.key` item when we use reverse mode.\r\n\r\n### Cosmos SDK Version\r\n\r\nmain\r\n\r\n### How to reproduce?\r\n\r\niterate collection in reverse mode with key","number":20938,"repository":"cosmos/cosmos-sdk","title":"[Bug]: collection iterator is not working properly in reverse mode with key","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20938"},"id":"PVTI_lADOAAN9684ABqEwzgQ24xI","labels":["T:Bug"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20939"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"[Bug]: collection iterator is not working properly in reverse mode with key"},{"content":{"body":"### Summary\n\nWhen we hit grpc endpoint and met out-of-gas error, current cosmos-sdk does not catch the panic. so we are getting normal grpc internal error message like\r\n```shell\r\n{\"code\":13,\"message\":\"{ValuePerByte}\",\"details\":[]}\r\n```\r\n\r\nbut we can catch the panic in the [interceptor](https://github.com/cosmos/cosmos-sdk/blob/a22592a64871fa7abe4a13976a3e841029a53d0d/baseapp/grpcserver.go#L27) and return proper error message.\r\n```shell\r\n{\"code\":2,\"message\":\"codespace sdk code 11: out of gas: out of gas in location: ValuePerByte\",\"details\":[]}\r\n```\n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\ncatch the out-of-gas panic at grpc query handlers, and return proper error message.","number":20944,"repository":"cosmos/cosmos-sdk","title":"[Feature]: adds error handling for out-of-gas panics in grpc query handlers.","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20944"},"id":"PVTI_lADOAAN9684ABqEwzgQ4qv0","labels":["T:feature-request"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20945"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"[Feature]: adds error handling for out-of-gas panics in grpc query handlers."},{"content":{"body":"### Summary\n\nThe current `$DAEMON_HOME` location is dependent on the data directory and must be set to the same directory as the application data directory, it would be helpful to let the user decouple these two by setting an optional config for the data directory path\r\n\n\n### Problem Definition\n\nUsers are forced to place cosmovisor inside the application home directory (e.g., $HOME/.simapp), so it can detect upgrade-info.json and perform backups from the data directory.\r\n\r\nOne case where this can add complexity to the setup is using Cosmovisor inside Docker images. In Docker setups, it is trivial to mount the whole application home directory (e.g., $HOME/.simapp) to a persistent Docker volume, but cosmovisor should be outside of this volume so its underlying binaries can get updated by pulling new image versions.\n\n### Proposed Feature\n\nAdd an optional configuration like `daemon_data_dir` to allow users to specify an absolute path to the application data directory, such as `/home/bob/.simapp/data`. If left empty, it will default to the current behavior, which is `$DAEMON_HOME/data`.","number":20947,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Cosmovisor: Configurable Data directory path instead of hard-coded one ","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20947"},"id":"PVTI_lADOAAN9684ABqEwzgQ4yso","labels":["T:feature-request"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20948"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: Cosmovisor: Configurable Data directory path instead of hard-coded one "},{"assignees":["facundomedica","tac0turtle"],"content":{"body":"# Description\r\n\r\nMonthly patch release. If you are approving this, please take the time to look at https://github.com/cosmos/cosmos-sdk/pull/20910 as well.\r\n\r\nhttps://github.com/cosmos/cosmos-sdk/compare/v0.47.12...release/v0.47.x\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title, you can find examples of the prefixes below:\r\n    <!-- * `feat`: A new feature\r\n    * `fix`: A bug fix\r\n    * `docs`: Documentation only changes\r\n    * `style`: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\r\n    * `refactor`: A code change that neither fixes a bug nor adds a feature\r\n    * `perf`: A code change that improves performance\r\n    * `test`: Adding missing tests or correcting existing tests\r\n    * `build`: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)\r\n    * `ci`: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)\r\n    * `chore`: Other changes that don't modify src or test files\r\n    * `revert`: Reverts a previous commit -->\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nPlease see [Pull Request Reviewer section in the contributing guide](../CONTRIBUTING.md#reviewer) for more information on how to review a pull request.\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":20949,"repository":"cosmos/cosmos-sdk","title":"chore: prepare v0.47.13","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/20949"},"id":"PVTI_lADOAAN9684ABqEwzgQ6DR8","labels":["C:Cosmovisor"],"repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"chore: prepare v0.47.13"},{"assignees":["sontrinh16"],"content":{"body":"This issue is meant to describe components that needs to undergo QA before the final release of the Olympus. \r\n\r\n## Major Changes\r\n\r\n- unordered tx\r\n-  creation of x/accounts\r\n- x/staking\r\n  - consensus key rotation\r\n- x/auth\r\n  - non atomic multimsg\r\n  - removal of account creation for receiver of an action\r\n  - x/tx - x/auth merger\r\n- creation of x/protocolpool\r\n- x/gov\r\n  - proposal types \r\n\r\n\r\n## QA Breakdown\r\n\r\n- Audit\r\n  - [x] Audit Baseapp\r\n  - [ ] Audit Types \r\n  - [ ] Audit Auth\r\n  - [ ] Audit Authz\r\n  - [ ] Audit Bank @facundomedica ‚úÖ\r\n  - [ ] Audit Circuit @facundomedica ‚úÖ\r\n  - [ ] Audit Consensus\r\n  - [ ] Audit Distribution\r\n  - [ ] Audit Staking\r\n  - [ ] Audit Gov \r\n  - [ ] Audit Slashing\r\n  - [ ] Audit server\r\n  - [ ] Audit depinject\r\n  - [ ] Audit simapp \r\n  - [ ] Audit Runtime\r\n  - [ ] Audit mint \r\n- [ ] Release Alpha\r\n- [ ] Public testnet\r\n- [ ] Documentation\r\n  - [ ] Upgrade Documentation \r\n  - [ ] Changelog review \r\n\r\n\r\n\r\n\r\n\r\nCommand to use to see the diffs\r\n`git diff release/v0.50.x release/v0.52.x -- x/bank`\r\n\r\n\r\n### Audit Template \r\n\r\nplease copy to a markdown to follow while you walk through the code\r\n2 people should be assigned to each section\r\n\r\n```\r\n- [ ] API audit \r\n    - spec audit: check if the spec is complete.\r\n    - Are Msg and Query methods and types well-named and organized?\r\n    - Is everything well documented (inline godoc as well as [`/spec/` folder](https://github.com/cosmos/cosmos-sdk/blob/master/docs/spec/SPEC-SPEC.md) in module directory)\r\n    - Document where panics became errors\r\n    - check the proto definition - make sure everything is in accordance to ADR-30 (at least 1 person, TODO assignee)\r\n      - Check new fields and endpoints have the Since annotations\r\n      - Check api breaks (ref: https://github.com/cosmos/cosmos-sdk/issues/20905)\r\n- [ ] Completeness audit, fully implemented with tests\r\n    - [ ] Genesis import and export of all state\r\n    - [ ] Query services\r\n    - [ ] CLI methods\r\n    - [ ] All necessary migration scripts are present (if this is an upgrade of existing module)\r\n- [ ] State machine audit\r\n    - [ ] Read through MsgServer code and verify correctness upon visual inspection\r\n    - [ ] Ensure all state machine code which could be confusing is properly commented\r\n    - [ ] Make sure state machine logic matches Msg method documentation\r\n    - [ ] Ensure that all state machine edge cases are covered with tests and that test coverage is sufficient (at least 90% coverage on module code)\r\n    - [ ] Assess potential threats for each method including spam attacks and ensure that threats have been addressed sufficiently. This should be done by writing up threat assessment for each method. Specifically we should be paying attention to: \r\n      - [ ] algorithmic complexity and places this could be exploited (ex. nested `for` loops)\r\n      - [ ] charging gas complex computation (ex. `for` loops)\r\n      - [ ] storage is safe (we don't pollute the state).\r\n    - [ ] Assess potential risks of any new third party dependencies and decide whether a dependency audit is needed\r\n    - [ ] Check correctness of simulation implementation if any\r\n- [ ] Audit Changelog against commit log, ensuring all breaking changes, bug fixes, and improvements are properly documented.\r\n```\r\n\r\nIf changes are needed or there is code that can be cleaned up please feel free to make the needed changes \r\n \r\n","number":20955,"repository":"cosmos/cosmos-sdk","title":"[EPIC]: Olympus (0.52)","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20955"},"id":"PVTI_lADOAAN9684ABqEwzgQ6itc","labels":["Type: QA"],"quarter":"Q3","releases":"Olympus ‚õà","repository":"https://github.com/cosmos/cosmos-sdk","sprint":"true","status":"üìã Backlog","title":"[EPIC]: Olympus (0.52)"},{"content":{"body":"### Summary\n\nCan we make cross chain easy with cosmos chain?\n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nCross chain implementation is difficult for cosmos.\r\nCan we make it easy?","number":20956,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Cross chain solution","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20956"},"id":"PVTI_lADOAAN9684ABqEwzgQ7BPM","labels":["T:feature-request"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"[Feature]: Cross chain solution"},{"assignees":["julienrbrt"],"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nIn `GetNodeHomeDirectory` (in `client/v2/helpers/home.go`), if no `--home` flag is provided, it then checks the `NODE_HOME` environment variable.\r\n\r\nHowever, with viper (and the current simapp setup), the correct environment variable would be just `HOME`, or if the chain uses the `SetEnvPrefix` viper functionality (which is used in `client.Context#WithViper`), it will be `<prefix>_HOME`.\r\n\r\nSince `GetNodeHomeDirectory` was written to be called in an `init()`, you can't rely on viper being set up yet. Use of the global viper instance is bad anyway (because any call to `viper.New()` will overwrite it). So it'd be better to just provide a mechanism that allows for a different env var to be used, or maybe just a different prefix (e.g. `<prefix>_HOME` if provided, or just `HOME` if not).\n\n### Cosmos SDK Version\n\nv0.50.8 and main at `f772a0a2fc`\n\n### How to reproduce?\n\nI'm not sure what to do to actually demonstrate problems with this, but there will be a discrepancy between the home dirs used for various parts of the app depending on if a `--home` flag is provided, or the `HOME` environment variable is set.\r\n\r\nE.g. In the absence of a `--home` flag, in `app.New`, the home directory is looked up from viper which will use the `HOME` env var, but the client config will ultimately be looking at the `NODE_HOME` env var and thus will just end up using the default location.","number":20958,"repository":"cosmos/cosmos-sdk","title":"[Bug]: \"NODE_HOME\" is not the correct environment variable to get the home path from.","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20958"},"id":"PVTI_lADOAAN9684ABqEwzgQ7llk","labels":["T:Docs"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20964"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"[Bug]: \"NODE_HOME\" is not the correct environment variable to get the home path from."},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nAfter sending transaction with `--fee-granter` flag I have received error:\r\n```\r\n11:44AM ERR failure when running app err=\"yaml: control characters are not allowed\"\r\n```\r\n\r\nError comes from [yaml.JSONToYAML(out)](https://github.com/cosmos/cosmos-sdk/blob/f772a0a2fc264219925ef2049104e20cdc87f13d/client/context.go#L394) conversion, and is returned if converted value contains control characters.\r\n\r\nThe control characters in question, comes from [FeeDecorator](https://github.com/cosmos/cosmos-sdk/blob/f772a0a2fc264219925ef2049104e20cdc87f13d/x/auth/ante/fee.go) , and happen becouse this ante handler returns addresses in raw bytes [format](https://github.com/cosmos/cosmos-sdk/blob/f772a0a2fc264219925ef2049104e20cdc87f13d/x/auth/ante/fee.go#L101) instead of formatting them as bech32 strings. \r\n\r\nExample of response containing control characters:\r\n```\r\n{\r\n  \"height\": \"0\",\r\n  \"txhash\": \"2ACF964F1DA8937764352ABC02C5B53E7ADDDF6E659D3FD3870B13F773BD4B75\",\r\n  \"codespace\": \"sdk\",\r\n  \"code\": 38,\r\n  \"data\": \"\",\r\n  \"raw_log\": \"ÔøΩÔøΩ[ÔøΩo\\^[ÔøΩÔøΩrÔøΩ\\\\\\fÔøΩ(ÔøΩW\\^ZÔøΩY does not allow to pay fees for \\rÔøΩ7ÔøΩÔøΩÔøΩrÔøΩTÔøΩ3€∏ÔøΩI\\^F#ÔøΩV~: fee-grant not found: not found\",\r\n  \"logs\": [],\r\n  \"info\": \"\",\r\n  \"gas_wanted\": \"0\",\r\n  \"gas_used\": \"0\",\r\n  \"tx\": null,\r\n  \"timestamp\": \"\",\r\n  \"events\": []\r\n}\r\n```\r\n\n\n### Cosmos SDK Version\n\nmain\n\n### How to reproduce?\n\nSend any transaction with `--fee-granter` flag set to address which bytes contain control characters","number":20962,"repository":"cosmos/cosmos-sdk","title":"[Bug]: Deduct fee decorator returns response with control characters","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20962"},"id":"PVTI_lADOAAN9684ABqEwzgQ8B70","labels":["T:Bug"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/20963"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"[Bug]: Deduct fee decorator returns response with control characters"},{"assignees":["zakir-code"],"content":{"body":"### Summary\n\nGet the latest gas price from the node in the command line.\r\n\n\n### Problem Definition\n\nCurrently, there is no straightforward way to query the latest gas prices from the command line. This feature would allow users to easily obtain this information using the CLI.\r\n\n\n### Proposed Feature\n\nAdd a new CLI command `simd query node config` to query the latest gas prices from the gRPC Node Service.\r\n\r\nhttps://github.com/cosmos/cosmos-sdk/blob/1bd4351241783827d554d41edb3bbb383d587a97/client/grpc/node/service.go#L32","number":20971,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Add CLI Command for gRPC Node Service","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20971"},"id":"PVTI_lADOAAN9684ABqEwzgQ-GXc","labels":["T:feature-request"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/21074"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: Add CLI Command for gRPC Node Service"},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nAttempting to state sync against a snapshot always produces a `context deadline exceeded` error.\r\n\r\n## available snapshots\r\n\r\n```\r\nls .provenance/data/snapshots/\r\n23608000     23612000     23616000     metadata.db\r\n```\r\n\r\n## state sync attempt logs\r\n\r\n```\r\n9:25PM INF service start impl=MConn{20.237.186.30:26656} module=p2p msg=\"Starting MConnection service\" peer=e0dc85f258076fc91411a29b4ddbacb0ecc1e565@20.237.186.30:26656\r\n9:25PM INF Discovered new snapshot format=3 hash=436BE77386309D8C6E285B35D6E4793355AAD293F1383BCD60BEA76554160463 height=23552000 module=statesync\r\n9:25PM INF Discovered new snapshot format=1 hash=7C78131231B759A4CD832AA2DED047646DE6572A81A7B9A7D5E367E050D35DA1 height=1144700 module=statesync\r\n9:25PM INF Discovered new snapshot format=1 hash=B4E0A8E39933B539968D23E135E8D5494C6F03E57BD151AE866D8F995C7CCE86 height=1144600 module=statesync\r\n9:25PM INF Discovered new snapshot format=1 hash=2B062F7CC94101F853B2597CD2D03581D52295360C34A8395840CFD122151C38 height=1144500 module=statesync\r\n9:25PM INF Discovered new snapshot format=1 hash=D41271C4CFA6AACC02EBA16D20B1345DFEF902DFFFEFBF96879411EC1A9D0F36 height=1144400 module=statesync\r\n9:25PM INF Discovered new snapshot format=1 hash=A66CD7E05ACDDF594BE8A944C00981DE19ACE521D30A2BFC3F6EBD265DC30C20 height=1144300 module=statesync\r\n9:25PM INF Discovered new snapshot format=1 hash=A9473F984132454B3B8D49973628051B9BE4A9BD99C5C515887FCABD40A544DF height=1144200 module=statesync\r\n9:25PM INF Discovered new snapshot format=1 hash=69A7C500B97D3B3CF670979CE54B2A1BDFA76D06EBADEDE0027FEDE566501CCA height=1144100 module=statesync\r\n9:25PM INF Discovered new snapshot format=1 hash=1446EE1E67B2F6792C899A97A6F1FB1325C63C87EC35B66890BE8211FECF02E9 height=1144000 module=statesync\r\n9:25PM INF Discovered new snapshot format=1 hash=4512A1AE11A52E4C4143FFEBDE7004C11B47DBCC11136CDDF4724AB278EA6FE4 height=1143900 module=statesync\r\n9:25PM INF Discovered new snapshot format=1 hash=72C06278451ABB93E360446854456F548289D7FD89D41A901A7092A25E71827C height=1143800 module=statesync\r\n9:25PM INF service start impl=\"Peer{MConn{218.153.200.69:12002} 80c6e77e43f5c7ecc74ed91243b39ba9e0a3938f out}\" module=p2p msg=\"Starting Peer service\" peer=80c6e77e43f5c7ecc74ed91243b39ba9e0a3938f@218.153.200.69:12002\r\n9:25PM INF service start impl=MConn{218.153.200.69:12002} module=p2p msg=\"Starting MConnection service\" peer=80c6e77e43f5c7ecc74ed91243b39ba9e0a3938f@218.153.200.69:12002\r\n[2024-07-19T01:25:38Z INFO  state_syncer] latest height = 0\r\n9:25PM INF Ensure peers module=pex numDialing=0 numInPeers=0 numOutPeers=5 numToDial=15\r\n9:25PM INF We need more addresses. Sending pexRequest to random peer module=pex peer=\"Peer{MConn{35.227.40.210:26656} 5f04a363b22e0e9861f8766eef2ab919d70d585c out}\"\r\n9:25PM INF service start impl=\"Peer{MConn{34.23.16.192:26656} 68832a03dd43e74ee56c2ba94100797a23ce0f2d out}\" module=p2p msg=\"Starting Peer service\" peer=68832a03dd43e74ee56c2ba94100797a23ce0f2d@34.23.16.192:26656\r\n9:25PM INF service start impl=MConn{34.23.16.192:26656} module=p2p msg=\"Starting MConnection service\" peer=68832a03dd43e74ee56c2ba94100797a23ce0f2d@34.23.16.192:26656\r\n9:25PM INF VerifyHeader hash=79878F47E9CA9B4F0C8189353AC9D29AA2E9568A3B365A0DA3831CDA966F0365 height=23552001 module=light\r\n[2024-07-19T01:26:08Z INFO  state_syncer] latest height = 0\r\n9:26PM INF Ensure peers module=pex numDialing=0 numInPeers=0 numOutPeers=6 numToDial=14\r\n9:26PM INF We need more addresses. Sending pexRequest to random peer module=pex peer=\"Peer{MConn{34.23.16.192:26656} 68832a03dd43e74ee56c2ba94100797a23ce0f2d out}\"\r\n9:26PM INF service start impl=\"Peer{MConn{34.138.124.81:26656} 72f0756a5af52348e658534f8e597bf611c4d337 out}\" module=p2p msg=\"Starting Peer service\" peer=72f0756a5af52348e658534f8e597bf611c4d337@34.138.124.81:26656\r\n9:26PM INF service start impl=MConn{34.138.124.81:26656} module=p2p msg=\"Starting MConnection service\" peer=72f0756a5af52348e658534f8e597bf611c4d337@34.138.124.81:26656\r\n9:26PM INF error from light block request from primary, removing... error=\"post failed: Post \\\"http://localhost:26699\\\": context deadline exceeded\" height=23607756 module=light primary=http{http://localhost:26699}\r\n9:26PM ERR error on light block request from witness, removing... error=\"post failed: Post \\\"http://localhost:26699\\\": context deadline exceeded\" module=light primary=http{http://localhost:26699}\r\n9:26PM ERR failed to remove witnesses err=\"no witnesses connected. please reset light client\" module=light witnessesToRemove=[0]\r\n9:26PM ERR Can't verify err=\"failed to obtain the header at height #23607756: post failed: Post \\\"http://localhost:26699\\\": context deadline exceeded\" module=light\r\n9:26PM INF failed to fetch and verify app hash err=\"failed to obtain the header at height #23607756: post failed: Post \\\"http://localhost:26699\\\": context deadline exceeded\" module=statesync\r\n9:26PM INF Snapshot rejected format=3 hash=436BE77386309D8C6E285B35D6E4793355AAD293F1383BCD60BEA76554160463 height=23552000 module=statesync\r\n9:26PM INF error from light block request from primary, replacing... error=\"light block not found\" height=1144701 module=light primary=http{http://localhost:26699}\r\n9:26PM INF failed to fetch and verify app hash err=\"light block not found\" module=statesync\r\n9:26PM INF Snapshot rejected format=1 hash=7C78131231B759A4CD832AA2DED047646DE6572A81A7B9A7D5E367E050D35DA1 height=1144700 module=statesync\r\n9:26PM INF error from light block request from primary, replacing... error=\"light block not found\" height=1144601 module=light primary=http{http://localhost:26699}\r\n9:26PM INF failed to fetch and verify app hash err=\"light block not found\" module=statesync\r\n9:26PM INF Snapshot rejected format=1 hash=B4E0A8E39933B539968D23E135E8D5494C6F03E57BD151AE866D8F995C7CCE86 height=1144600 module=statesync\r\n9:26PM INF error from light block request from primary, replacing... error=\"light block not found\" height=1144501 module=light primary=http{http://localhost:26699}\r\n9:26PM INF failed to fetch and verify app hash err=\"light block not found\" module=statesync\r\n9:26PM INF Snapshot rejected format=1 hash=2B062F7CC94101F853B2597CD2D03581D52295360C34A8395840CFD122151C38 height=1144500 module=statesync\r\n9:26PM INF error from light block request from primary, replacing... error=\"light block not found\" height=1144401 module=light primary=http{http://localhost:26699}\r\n9:26PM INF failed to fetch and verify app hash err=\"light block not found\" module=statesync\r\n9:26PM INF Snapshot rejected format=1 hash=D41271C4CFA6AACC02EBA16D20B1345DFEF902DFFFEFBF96879411EC1A9D0F36 height=1144400 module=statesync\r\n9:26PM INF error from light block request from primary, replacing... error=\"light block not found\" height=1144301 module=light primary=http{http://localhost:26699}\r\n9:26PM INF failed to fetch and verify app hash err=\"light block not found\" module=statesync\r\n9:26PM INF Snapshot rejected format=1 hash=A66CD7E05ACDDF594BE8A944C00981DE19ACE521D30A2BFC3F6EBD265DC30C20 height=1144300 module=statesync\r\n9:26PM INF error from light block request from primary, replacing... error=\"light block not found\" height=1144201 module=light primary=http{http://localhost:26699}\r\n9:26PM INF failed to fetch and verify app hash err=\"light block not found\" module=statesync\r\n9:26PM INF Snapshot rejected format=1 hash=A9473F984132454B3B8D49973628051B9BE4A9BD99C5C515887FCABD40A544DF height=1144200 module=statesync\r\n9:26PM INF error from light block request from primary, replacing... error=\"light block not found\" height=1144101 module=light primary=http{http://localhost:26699}\r\n9:26PM INF failed to fetch and verify app hash err=\"light block not found\" module=statesync\r\n9:26PM INF Snapshot rejected format=1 hash=69A7C500B97D3B3CF670979CE54B2A1BDFA76D06EBADEDE0027FEDE566501CCA height=1144100 module=statesync\r\n9:26PM INF error from light block request from primary, replacing... error=\"light block not found\" height=1144001 module=light primary=http{http://localhost:26699}\r\n9:26PM INF failed to fetch and verify app hash err=\"light block not found\" module=statesync\r\n9:26PM INF Snapshot rejected format=1 hash=1446EE1E67B2F6792C899A97A6F1FB1325C63C87EC35B66890BE8211FECF02E9 height=1144000 module=statesync\r\n9:26PM INF error from light block request from primary, replacing... error=\"light block not found\" height=1143901 module=light primary=http{http://localhost:26699}\r\n9:26PM INF failed to fetch and verify app hash err=\"light block not found\" module=statesync\r\n9:26PM INF Snapshot rejected format=1 hash=4512A1AE11A52E4C4143FFEBDE7004C11B47DBCC11136CDDF4724AB278EA6FE4 height=1143900 module=statesync\r\n9:26PM INF error from light block request from primary, replacing... error=\"light block not found\" height=1143801 module=light primary=http{http://localhost:26699}\r\n9:26PM INF failed to fetch and verify app hash err=\"light block not found\" module=statesync\r\n9:26PM INF Snapshot rejected format=1 hash=72C06278451ABB93E360446854456F548289D7FD89D41A901A7092A25E71827C height=1143800 module=statesync\r\n```\r\n\r\n## Configuration\r\n\r\n```toml\r\n[statesync]\r\n# State sync rapidly bootstraps a new node by discovering, fetching, and restoring a state machine\r\n# snapshot from peers instead of fetching and replaying historical blocks. Requires some peers in\r\n# the network to take and serve state machine snapshots. State sync is not attempted if the node\r\n# has any local state (LastBlockHeight > 0). The node will have a truncated block history,\r\n# starting from the height of the snapshot.\r\nenable = true\r\n\r\n# RPC servers (comma-separated) for light client verification of the synced state machine and\r\n# retrieval of state data for node bootstrapping. Also needs a trusted height and corresponding\r\n# header hash obtained from a trusted source, and a period during which validators can be trusted.\r\n#\r\n# For Cosmos SDK-based chains, trust_period should usually be about 2/3 of the unbonding time (~2\r\n# weeks) during which they can be financially punished (slashed) for misbehavior.\r\nrpc_servers = \"http://localhost:26699,http://localhost:26699\"\r\ntrust_height = 23608000\r\ntrust_hash = \"D81553243F02857403E0B4148EDBDF0DC26F2A13D23134B5FCF2949C4470280D\"\r\ntrust_period = \"168h0m0s\"\r\n\r\n# Time to spend discovering snapshots before initiating a restore.\r\ndiscovery_time = \"1m0s\"\r\n\r\n# Temporary directory for state sync snapshot chunks, defaults to the OS tempdir (typically /tmp).\r\n# Will create a new, randomly named directory within, and remove it when done.\r\ntemp_dir = \"\"\r\n\r\n# The timeout duration before re-requesting a chunk, possibly from a different\r\n# peer (default: 1 minute).\r\nchunk_request_timeout = \"30s\"\r\n\r\n# The number of concurrent chunk fetchers to run (default: 1).\r\nchunk_fetchers = \"2\"\r\n```\r\n\r\nThe error makes it appear like it's trying to fetch a block or block result at a specific height and timing out. I can curl and fetch that block on the order of milliseconds so it's confusing why the light client seems to not be able to do the same. Is there a config that controls the light client timeout?\r\n\r\nWhat's also a bit confusing is that it's trying to fetch a height before the snapshot height. If the state sync is successful, it's earliest height will be the state sync height + 1 so what's the significance of fetching older blocks?\r\n\r\nAnother point of confusion is why the snapshot height requested (and available on the snapshot node) is not a height matched on the Discovered new snapshot lines?\n\n### Cosmos SDK Version\n\nv0.50.7\n\n### How to reproduce?\n\n_No response_","number":20990,"repository":"cosmos/cosmos-sdk","title":"[Bug]: state sync context deadline exceeded","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20990"},"id":"PVTI_lADOAAN9684ABqEwzgRC5H0","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Bug]: state sync context deadline exceeded"},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nAfter upgrading from v0.46.13 v0.50.7 we seem to have lost some cosmos layer telemetry.\r\n\r\n## Configuration\r\n\r\n```toml\r\n# config.toml\r\n[instrumentation]\r\nprometheus = true\r\nprometheus_listen_addr = \":26660\"\r\nmax_open_connections = 3\r\nnamespace = \"cometbft\"\r\n\r\n# app.toml\r\n[telemetry]\r\nservice-name = \"\"\r\nenabled = true\r\nenable-hostname = true\r\nenable-hostname-label = true\r\nenable-service-label = false\r\nprometheus-retention-time = 60\r\nglobal-labels = [\r\n  [\r\n    \"chain_id\",\r\n    \"pio-mainnet-1\"\r\n  ]\r\n]\r\n```\r\n\r\n## Metrics before upgrade\r\n\r\n```..tter/state-syncer [main ‚Üë1|‚úö 7‚Ä¶7] ‚ùØ‚ùØ‚ùØ curl http://localhost:26660/metrics  | rg iavl\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n100 75520    0 75520    0     0   363k      0 --:--:-- --:--:-- --:--:--  365k\r\n# HELP store_iavl_commit store_iavl_commit\r\n# TYPE store_iavl_commit summary\r\nstore_iavl_commit{chain_id=\"pio-mainnet-1\",host=\"pio-mainnet-indexed-archived-fullblock-1\",quantile=\"0.5\"} 0.37117999792099\r\nstore_iavl_commit{chain_id=\"pio-mainnet-1\",host=\"pio-mainnet-indexed-archived-fullblock-1\",quantile=\"0.9\"} 0.6181100010871887\r\nstore_iavl_commit{chain_id=\"pio-mainnet-1\",host=\"pio-mainnet-indexed-archived-fullblock-1\",quantile=\"0.99\"} 2.5882089138031006\r\nstore_iavl_commit_sum{chain_id=\"pio-mainnet-1\",host=\"pio-mainnet-indexed-archived-fullblock-1\"} 258902.27967266366\r\nstore_iavl_commit_count{chain_id=\"pio-mainnet-1\",host=\"pio-mainnet-indexed-archived-fullblock-1\"} 677424\r\n# HELP store_iavl_delete store_iavl_delete\r\n# TYPE store_iavl_delete summary\r\nstore_iavl_delete{chain_id=\"pio-mainnet-1\",host=\"pio-mainnet-indexed-archived-fullblock-1\",quantile=\"0.5\"} 0.02745000086724758\r\nstore_iavl_delete{chain_id=\"pio-mainnet-1\",host=\"pio-mainnet-indexed-archived-fullblock-1\",quantile=\"0.9\"} 0.029260000213980675\r\nstore_iavl_delete{chain_id=\"pio-mainnet-1\",host=\"pio-mainnet-indexed-archived-fullblock-1\",quantile=\"0.99\"} 0.029260000213980675\r\nstore_iavl_delete_sum{chain_id=\"pio-mainnet-1\",host=\"pio-mainnet-indexed-archived-fullblock-1\"} 72579.197542749\r\nstore_iavl_delete_count{chain_id=\"pio-mainnet-1\",host=\"pio-mainnet-indexed-archived-fullblock-1\"} 76053\r\n# HELP store_iavl_get store_iavl_get\r\n# TYPE store_iavl_get summary\r\nstore_iavl_get{chain_id=\"pio-mainnet-1\",host=\"pio-mainnet-indexed-archived-fullblock-1\",quantile=\"0.5\"} 0.002409999957308173\r\nstore_iavl_get{chain_id=\"pio-mainnet-1\",host=\"pio-mainnet-indexed-archived-fullblock-1\",quantile=\"0.9\"} 0.0037499999161809683\r\nstore_iavl_get{chain_id=\"pio-mainnet-1\",host=\"pio-mainnet-indexed-archived-fullblock-1\",quantile=\"0.99\"} 0.012059999629855156\r\nstore_iavl_get_sum{chain_id=\"pio-mainnet-1\",host=\"pio-mainnet-indexed-archived-fullblock-1\"} 2.6048887388131223e+06\r\nstore_iavl_get_count{chain_id=\"pio-mainnet-1\",host=\"pio-mainnet-indexed-archived-fullblock-1\"} 3.09507892e+08\r\n```\r\n\r\n## Metrics after upgrade\r\n\r\n```\r\ncurl http://localhost:26660/metrics  | rg iavl\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n100  103k    0  103k    0     0   533k      0 --:--:-- --:--:-- --:--:--  534k\r\n```\n\n### Cosmos SDK Version\n\nv0.50.7\n\n### How to reproduce?\n\n_No response_","number":20992,"repository":"cosmos/cosmos-sdk","title":"[Bug]: lost telemetry after upgrade to v0.50.7","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20992"},"id":"PVTI_lADOAAN9684ABqEwzgRC-CA","labels":["T:Bug","S:needs more info"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Bug]: lost telemetry after upgrade to v0.50.7"},{"assignees":["akhilkumarpilli"],"content":{"body":"We should get the consensus params in CometBFT ABCI Info call.\r\n\r\nCurrently, simply trying to get them gives this at server start:\r\n\r\n`failed to start servers: error during handshake: error calling Info: rpc error: code = Internal desc = collections: not found: key 'no_key' of type github.com/cosmos/gogoproto/cometbft.types.v1.ConsensusParams`\r\n\r\nref https://github.com/cosmos/cosmos-sdk/pull/20989#discussion_r1684224953","number":20996,"repository":"cosmos/cosmos-sdk","title":"Get consensus params in comet server","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/20996"},"id":"PVTI_lADOAAN9684ABqEwzgRD36s","labels":["C:server/v2"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","title":"Get consensus params in comet server"},{"content":{"body":"# Description\r\n\r\nThis PR is meant to be reviewed BUT NOT MERGED.\r\nI'll be tagging core v0.5.2 from this branch, I'll delete julien/core-051 branch afterwards.\r\n\r\nCore needs to be bumped in https://github.com/cosmos/cosmos-sdk/pull/21000, so that you do not need code changes in v0.47 chains.\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title, you can find examples of the prefixes below:\r\n    <!-- * `feat`: A new feature\r\n    * `fix`: A bug fix\r\n    * `docs`: Documentation only changes\r\n    * `style`: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\r\n    * `refactor`: A code change that neither fixes a bug nor adds a feature\r\n    * `perf`: A code change that improves performance\r\n    * `test`: Adding missing tests or correcting existing tests\r\n    * `build`: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)\r\n    * `ci`: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)\r\n    * `chore`: Other changes that don't modify src or test files\r\n    * `revert`: Reverts a previous commit -->\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nPlease see [Pull Request Reviewer section in the contributing guide](../CONTRIBUTING.md#reviewer) for more information on how to review a pull request.\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":21023,"repository":"cosmos/cosmos-sdk","title":"refactor(core): update depinject in core v0.5 (v0.47)","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/21023"},"id":"PVTI_lADOAAN9684ABqEwzgRHctU","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"refactor(core): update depinject in core v0.5 (v0.47)"},{"content":{"body":"# Description\r\n\r\nTest of https://github.com/cosmos/cosmos-sdk/pull/21023 in v0.47 with depinject 1.0.0\r\n\r\n---\r\n\r\n## Author Checklist\r\n\r\n*All items are required. Please add a note to the item if the item is not applicable and\r\nplease add links to any relevant follow up issues.*\r\n\r\nI have...\r\n\r\n* [ ] included the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title, you can find examples of the prefixes below:\r\n    <!-- * `feat`: A new feature\r\n    * `fix`: A bug fix\r\n    * `docs`: Documentation only changes\r\n    * `style`: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\r\n    * `refactor`: A code change that neither fixes a bug nor adds a feature\r\n    * `perf`: A code change that improves performance\r\n    * `test`: Adding missing tests or correcting existing tests\r\n    * `build`: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)\r\n    * `ci`: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)\r\n    * `chore`: Other changes that don't modify src or test files\r\n    * `revert`: Reverts a previous commit -->\r\n* [ ] confirmed `!` in the type prefix if API or client breaking change\r\n* [ ] targeted the correct branch (see [PR Targeting](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#pr-targeting))\r\n* [ ] provided a link to the relevant issue or specification\r\n* [ ] reviewed \"Files changed\" and left comments if necessary\r\n* [ ] included the necessary unit and integration [tests](https://github.com/cosmos/cosmos-sdk/blob/main/CONTRIBUTING.md#testing)\r\n* [ ] added a changelog entry to `CHANGELOG.md`\r\n* [ ] updated the relevant documentation or specification, including comments for [documenting Go code](https://blog.golang.org/godoc)\r\n* [ ] confirmed all CI checks have passed\r\n\r\n## Reviewers Checklist\r\n\r\n*All items are required. Please add a note if the item is not applicable and please add\r\nyour handle next to the items reviewed if you only reviewed selected items.*\r\n\r\nPlease see [Pull Request Reviewer section in the contributing guide](../CONTRIBUTING.md#reviewer) for more information on how to review a pull request.\r\n\r\nI have...\r\n\r\n* [ ] confirmed the correct [type prefix](https://github.com/commitizen/conventional-commit-types/blob/v3.0.0/index.json) in the PR title\r\n* [ ] confirmed all author checklist items have been addressed\r\n* [ ] reviewed state machine logic, API design and naming, documentation is accurate, tests and test coverage\r\n","number":21024,"repository":"cosmos/cosmos-sdk","title":"feat: use depinject v1.0.0","type":"PullRequest","url":"https://github.com/cosmos/cosmos-sdk/pull/21024"},"id":"PVTI_lADOAAN9684ABqEwzgRHmVM","repository":"https://github.com/cosmos/cosmos-sdk","reviewers":["sdk-core-dev"],"status":"ü•≥ Done","title":"feat: use depinject v1.0.0"},{"assignees":["julienrbrt"],"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nIt looks like Confix is not able to resolve simple nested arrays in TOML files.\r\n\r\nDid not find any documentation describing proper syntax.\r\n\r\n\n\n### Cosmos SDK Version\n\nNo \"version\" param. I installed \"latest\" on 07/2024. \n\n### How to reproduce?\n\nThis is an example of nested values. How to retrieve \"granny smith\" value ?\r\n```\r\n[[fruit]]\r\n  name = \"apple\"\r\n\r\n  [[fruit.variety]]\r\n    name = \"red delicious\"\r\n\r\n  [[fruit.variety]]\r\n    name = \"granny smith\"\r\n```\r\n\r\nThe follow did NOT work to me:\r\n```\r\nconfix get config.toml fruit.variety[1].name\r\nconfix get config.toml fruit.variety.1.name\r\n\r\n","number":21034,"repository":"cosmos/cosmos-sdk","title":"[Bug]: Confix not able to resolve arrays values","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21034"},"id":"PVTI_lADOAAN9684ABqEwzgRJIMs","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Bug]: Confix not able to resolve arrays values"},{"content":{"body":"I have a recently upgraded my blockchain based on cosmos sdk 0.50.7 and cometbft version 0.38.7 from sdk v0.47.5. When i am running the chain I am getting error related to delivertx, copying the error message: \r\n\r\npanic: failed to execute DeliverTx for \r\n```json\r\n{\r\n          \"body\": {\r\n            \"messages\": [\r\n              {\r\n                \"@type\": \"/cosmos.staking.v1beta1.MsgCreateValidator\",\r\n                \"description\": {\r\n                  \"moniker\": \"tokenfactory-1\",\r\n                  \"identity\": \"\",\r\n                  \"website\": \"\",\r\n                  \"security_contact\": \"\",\r\n                  \"details\": \"\"\r\n                },\r\n                \"commission\": {\r\n                  \"rate\": \"0.100000000000000000\",\r\n                  \"max_rate\": \"0.200000000000000000\",\r\n                  \"max_change_rate\": \"0.010000000000000000\"\r\n                },\r\n                \"min_self_delegation\": \"1\",\r\n                \"delegator_address\": \"\",\r\n                \"validator_address\": \"cosmosvaloper1qu96w5lcf7txvx55n4tqxsrtdy0azvn94ueqkk\",\r\n                \"pubkey\": {\r\n                  \"@type\": \"/cosmos.crypto.ed25519.PubKey\",\r\n                  \"key\": \"IgoapMi3+i41/7fxkbzDZyR9Uyn3wKEL7R/2Usho4MQ=\"\r\n                },\r\n                \"value\": {\r\n                  \"denom\": \"stake\",\r\n                  \"amount\": \"100000000000\"\r\n                }\r\n              }\r\n            ],\r\n            \"memo\": \"b48ff6c43062e269b7014e568464c454ca8d6644@10.0.2.15:26656\",\r\n            \"timeout_height\": \"0\",\r\n            \"extension_options\": [],\r\n            \"non_critical_extension_options\": []\r\n          }, \r\n```\r\nIt also says  \"recovered: runtime error: invalid memory address or nil pointer dereference\".\r\n\r\nthis is what i am passing in my\r\n\r\n```go\r\ngenutil.newappmodule: \r\n               genutil.NewAppModule(\r\n\t\t\tapp.AccountKeeper, app.StakingKeeper, app,\r\n\t\t\ttxConfig,\r\n\t\t),\r\n```","number":21035,"repository":"cosmos/cosmos-sdk","title":"deliverTx error","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21035"},"id":"PVTI_lADOAAN9684ABqEwzgRJQZg","labels":["S:needs more info","T:question"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"deliverTx error"},{"assignees":["sontrinh16","cool-develope"],"content":{"body":"## Context\n\nThe test coverage of the following logical components should be over 60% (ideally):\n\n- [ ] `root` module\n- [ ] `migration` module\n- [ ] `pruning` module\n- [ ] `snapshots` module\n- [ ] `commitment` including `iavl` backend\n- [ ] `storage` including `sqlite`, `rocksdb`, `pebbledb` backends\n\n```\n# test coverage\n        cosmossdk.io/store/v2           coverage: 0.0% of statements\n        cosmossdk.io/store/v2/commitment                coverage: 0.0% of statements\n        cosmossdk.io/store/v2/commitment/mem            coverage: 0.0% of statements\n        cosmossdk.io/store/v2/internal          coverage: 0.0% of statements\n        cosmossdk.io/store/v2/errors            coverage: 0.0% of statements\n        cosmossdk.io/store/v2/metrics           coverage: 0.0% of statements\nok      cosmossdk.io/store/v2/commitment/iavl   0.247s  coverage: 43.1% of statements\nok      cosmossdk.io/store/v2/db        0.043s  coverage: 55.0% of statements\nok      cosmossdk.io/store/v2/internal/conv     0.055s  coverage: 100.0% of statements\nok      cosmossdk.io/store/v2/internal/encoding 0.011s  coverage: 62.4% of statements\nok      cosmossdk.io/store/v2/migration 0.132s  coverage: 9.2% of statements\nok      cosmossdk.io/store/v2/proof     0.015s  coverage: 71.2% of statements\n        cosmossdk.io/store/v2/storage           coverage: 0.0% of statements\n        cosmossdk.io/store/v2/snapshots/types           coverage: 0.0% of statements\n        cosmossdk.io/store/v2/storage/util              coverage: 0.0% of statements\nok      cosmossdk.io/store/v2/pruning   1.155s  coverage: 5.0% of statements\nok      cosmossdk.io/store/v2/root      4.658s  coverage: 15.6% of statements\nok      cosmossdk.io/store/v2/snapshots 0.177s  coverage: 50.2% of statements\nok      cosmossdk.io/store/v2/storage/pebbledb  0.278s  coverage: 29.8% of statements\nok      cosmossdk.io/store/v2/storage/sqlite    0.839s  coverage: 27.8% of statements\n```","number":21040,"repository":"cosmos/cosmos-sdk","title":"[Storev2/Test]: Increase the unit test coverage","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21040"},"id":"PVTI_lADOAAN9684ABqEwzgRJ-Hc","labels":["C:Store"],"priority ":"Medium","project":"Store","repository":"https://github.com/cosmos/cosmos-sdk","size":"Medium (2-3 Weeks)","status":"ü§∏‚Äç‚ôÇÔ∏è In Progress","story Type":"üëë Epic","title":"[Storev2/Test]: Increase the unit test coverage"},{"assignees":["akhilkumarpilli"],"content":{"body":"### Summary\n\nAdd a migration in confix from v0.50-app.toml to serverv2-app.toml\n\n### Problem Definition\n\n_No response_\n\n### Proposed Feature\n\nWhen a chain migrate from baseapp to serverv2, validator can just do `simd config migrate serverv2` and migrate their app.toml","number":21046,"repository":"cosmos/cosmos-sdk","title":"[Feature(server/v2)]: add a migration to serverv2 in confix","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21046"},"id":"PVTI_lADOAAN9684ABqEwzgRK-1Q","labels":["T:feature-request"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/21052"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"[Feature(server/v2)]: add a migration to serverv2 in confix"},{"content":{"body":"### Summary\n\nImplement a Quad collection to support collections with composite keys of four elements.\n\n### Problem Definition\n\nCurrently, the \"collections\" package supports composite keys of sizes 1-3. During development in the Lava project, I needed a collection with a composite key of 4 elements. This feature will provide extra flexibility for users of the \"collections\" package.\n\n### Proposed Feature\n\nImplement a Quad collection to support collections with composite keys of four elements. It will be very similar to the Pair and Triple collections.","number":21061,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Quad Collection","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21061"},"id":"PVTI_lADOAAN9684ABqEwzgRMOgM","labels":["T:feature-request"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/21090"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: Quad Collection"},{"content":{"body":"### Summary\n\nThe problem is that people usually use it either to get the entire transaction history with arbitrary events or to get the recent actions that happened\n\n### Problem Definition\n\n- Why do we need this feature?\r\nFor example, it helps not to query each page, get the key for the next and query the same size page to reach the end (as a consequence we query all history but need only the tail)\r\n- What problems may be addressed by introducing this feature?\r\nNode overloaded by high amount of queries performed only for 1 page at the end\r\n- What benefits does the SDK stand to gain by including this feature?\r\nOne would be safe to assume that SDK itself doesn't get any benefits in general\r\n- Are there any disadvantages of including this feature?\r\nIt's a minor issue so don't think It'll somehow expand the codebase or give any disadvantages. More benefits than efforts\n\n### Proposed Feature\n\nIt would be nice if cosmos-sdk would include reverse (boolean) option in QueryTxsByEvents function to facilitate the effort in reaching the latest transactions performed with certain events ","number":21062,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Add --reverse option into QueryTxsByEvents function","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21062"},"id":"PVTI_lADOAAN9684ABqEwzgRMvt0","labels":["T:feature-request"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: Add --reverse option into QueryTxsByEvents function"},{"content":{"body":"sdk can only provide fixed filepv to cometbft, it can not be updated by apps.\r\n\r\nhttps://github.com/cosmos/cosmos-sdk/blob/826d4d3f2860a49b43c0dfb47a44132527c0059a/server/start.go#L375-L378\r\n\r\ncometbft checks if the socket provider configuration is not empty, and use the socket provider then\r\n\r\nhttps://github.com/cometbft/cometbft/blob/24b39c5ae75f6cec77fedd9c3a27a305aa711fcc/node/node.go#L335-L341\r\n\r\nI think we can give application access to provide their own PrivValidator.\r\n\r\nI propose a change to add a method `ValidatorKeyProvider() cmttypes.PrivValidator`\r\n to the Application interface.\r\n\r\nsdk can have a built-in filepv provider in the baseapp\r\n\r\nif apps want to have their own provider, they can overwrite the NodeKeyProvider func.\r\n\r\nso sdk doesn't have visible breaking changes.\r\n\r\n```diff\r\ndiff --git a/baseapp/baseapp.go b/baseapp/baseapp.go\r\nindex a89b48bcba..7aefdc086f 100644\r\n--- a/baseapp/baseapp.go\r\n+++ b/baseapp/baseapp.go\r\n@@ -24,6 +24,7 @@ import (\r\n        \"cosmossdk.io/store/snapshots\"\r\n        storetypes \"cosmossdk.io/store/types\"\r\n \r\n+       cmttypes \"github.com/cometbft/cometbft/types\"\r\n        \"github.com/cosmos/cosmos-sdk/baseapp/oe\"\r\n        \"github.com/cosmos/cosmos-sdk/codec\"\r\n        codectypes \"github.com/cosmos/cosmos-sdk/codec/types\"\r\n@@ -60,6 +61,8 @@ var _ servertypes.ABCI = (*BaseApp)(nil)\r\n \r\n // BaseApp reflects the ABCI application implementation.\r\n type BaseApp struct {\r\n+       validatorKeyProvider cmttypes.PrivValidator\r\n+\r\n        // initialized on creation\r\n        logger            log.Logger\r\n        name              string                      // application name from abci.BlockInfo\r\ndiff --git a/baseapp/options.go b/baseapp/options.go\r\nindex 7218a283e7..b63aefa380 100644\r\n--- a/baseapp/options.go\r\n+++ b/baseapp/options.go\r\n@@ -5,6 +5,7 @@ import (\r\n        \"io\"\r\n        \"math\"\r\n \r\n+       cmttypes \"github.com/cometbft/cometbft/types\"\r\n        dbm \"github.com/cosmos/cosmos-db\"\r\n \r\n        \"cosmossdk.io/store/metrics\"\r\n@@ -351,6 +352,17 @@ func (app *BaseApp) SetExtendVoteHandler(handler sdk.ExtendVoteHandler) {\r\n        app.extendVote = handler\r\n }\r\n \r\n+func (app *BaseApp) SetPrivValidatorProvider(pv cmttypes.PrivValidator) {\r\n+       if app.sealed {\r\n+               panic(\"SetPrivValidatorProvider() on sealed BaseApp\")\r\n+       }\r\n+       app.validatorKeyProvider = pv\r\n+}\r\n+\r\n+func (app *BaseApp) ValidatorKeyProvider() cmttypes.PrivValidator {\r\n+       return app.validatorKeyProvider\r\n+}\r\n+\r\n func (app *BaseApp) SetVerifyVoteExtensionHandler(handler sdk.VerifyVoteExtensionHandler) {\r\n        if app.sealed {\r\n                panic(\"SetVerifyVoteExtensionHandler() on sealed BaseApp\")\r\ndiff --git a/server/start.go b/server/start.go\r\nindex c2a812a7b5..a962efcecb 100644\r\n--- a/server/start.go\r\n+++ b/server/start.go\r\n@@ -374,10 +374,15 @@ func startCmtNode(\r\n        }\r\n \r\n        cmtApp := NewCometABCIWrapper(app)\r\n+\r\n+       pvp := app.ValidatorKeyProvider()\r\n+       if pvp == nil {\r\n+               pvp = pvm.LoadOrGenFilePV(cfg.PrivValidatorKeyFile(), cfg.PrivValidatorStateFile())\r\n+       }\r\n        tmNode, err = node.NewNodeWithContext(\r\n                ctx,\r\n                cfg,\r\n-               pvm.LoadOrGenFilePV(cfg.PrivValidatorKeyFile(), cfg.PrivValidatorStateFile()),\r\n+               pvp,\r\n                nodeKey,\r\n                proxy.NewLocalClientCreator(cmtApp),\r\n                getGenDocProvider(cfg),\r\ndiff --git a/server/types/app.go b/server/types/app.go\r\nindex 3b5feab3c0..7a4e4b4be0 100644\r\n--- a/server/types/app.go\r\n+++ b/server/types/app.go\r\n@@ -62,6 +62,8 @@ type (\r\n                // Close is called in start cmd to gracefully cleanup resources.\r\n                // Must be safe to be called multiple times.\r\n                Close() error\r\n+\r\n+               ValidatorKeyProvider() cmttypes.PrivValidator\r\n        }\r\n \r\n        // AppCreator is a function that allows us to lazily initialize an\r\n```","number":21064,"repository":"cosmos/cosmos-sdk","title":"[Feature]: sdk should be able to provide PrivValidator for cometbft","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21064"},"id":"PVTI_lADOAAN9684ABqEwzgRNTD4","labels":["needs-triage"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: sdk should be able to provide PrivValidator for cometbft"},{"assignees":["julienrbrt"],"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nWe're integrating Autocli into neutron and have a problem with Coin as a positional argument.\r\n\r\nIf you're trying make cli tx with chaind command 1token_a, it returns error.\r\n\r\nCan you help me understand? Since I believe there is not much more that can be changed.\r\n\r\nAutocli link to code here:\r\nhttps://github.com/neutron-org/neutron/blob/98f6c79c6092f37aa95f71035ad6841c40f1526d/x/tokenfactory/autocli.go#L58\r\nProto type:\r\nhttps://github.com/neutron-org/neutron/blob/e855c8f1901a6954dec97748baabd7f98b5e02bc/proto/osmosis/tokenfactory/v1beta1/tx.proto#L59\r\n\r\nI also have problems with some queries returning '{}' empty response, but this is another story\n\n### Cosmos SDK Version\n\n0.50.7\n\n### How to reproduce?\n\n1. clone neutron: https://github.com/neutron-org/neutron\r\n2. checkout `feat/autocli-all` branch\r\n3. `make build`\r\n4. `make init` it can error, do not mind it for now (you can see working chain logs in `tail -f ./data/test-1/test-1.log`)\r\n5.  `./build/neutrond tx tokenfactory mint \"100tokenaa\" --from demowallet1 --keyring-backend test --home ./data/test-1 --chain-id test-1 --fees 1000untr`","number":21071,"repository":"cosmos/cosmos-sdk","title":"[Bug]: AutoCli cannot serialize Coin positional args","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21071"},"id":"PVTI_lADOAAN9684ABqEwzgROCkg","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Bug]: AutoCli cannot serialize Coin positional args"},{"assignees":["facundomedica"],"content":{"body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### What happened?\r\n\r\nHi, \r\nversion\r\nFor some reasons, since switch to v0.50.8-lsm, when I try to simulate send tx with full balance, I always get now that error : \r\n```\r\n\\\"spendable balance 0uatom is smaller than 1uatom: insufficient funds with gas used: '63581'\r\n```\r\nHowever, I didn't change anything regarding simulation.\r\nI simulate with fee=0 in reference to that previous issue https://github.com/cosmos/cosmos-sdk/issues/17266\r\nand then calculate the right amount to withdraw including fees. \r\nThis works since the beginning\r\n\r\n### Cosmos SDK Version\r\n\r\nv0.50.8-lsm\r\n\r\n### How to reproduce?\r\n\r\nIt only fails on testnet right now. Mainnet is working still\r\n\r\nYou can try with these inputs : \r\n```\r\n{\r\n    \"tx_bytes\": \"CpMBCpABChwvY29zbW9zLmJhbmsudjFiZXRhMS5Nc2dTZW5kEnAKLWNvc21vczE2ZHF2bDg2a2M1bHI5cThyNWUwY3lsbjRnYXQ0NWg5enFocHR4MxItY29zbW9zMTlkczI2Nnp2NHdlM2x3ZjN3NzJrZHJoemV1cDhwZnlsNmN2MDJoGhAKBXVhdG9tEgc3NDM3ODYyElMKTwpGCh8vY29zbW9zLmNyeXB0by5zZWNwMjU2azEuUHViS2V5EiMKIQPd/rryoq14vd0oDxGpzGRzrNYfYdb7XkCk0BlrG6r2OhICCgAYlBgSABoA\",\r\n    \"mode\": \"BROADCAST_MODE_SYNC\"\r\n}\r\n```\r\nWant to withdraw the full balance of this one for example https://www.mintscan.io/cosmoshub-testnet/address/cosmos16dqvl86kc5lr9q8r5e0cyln4gat45h9zqhptx3/\r\nbut you can pick any random address with some tokens, this results the same\r\n\r\nEDIT : \r\nAfter some more investigations, it works if you subtract 1 uatom to the amount...","number":21072,"repository":"cosmos/cosmos-sdk","title":"[Bug]: spendable balance 0uatom is smaller than 1uatom: insufficient funds with gas used","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21072"},"id":"PVTI_lADOAAN9684ABqEwzgRORQA","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Bug]: spendable balance 0uatom is smaller than 1uatom: insufficient funds with gas used"},{"assignees":["julienrbrt"],"content":{"body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### What happened?\r\n\r\n```\r\n$ simd query block\r\nError: accepts 1 arg(s), received 0\r\n...\r\n```\r\n\r\nThis command used to allow zero args as a way to get the most recent block.\r\n\r\nIt also used to default to taking in the `height`, but now defaults to `hash`, which was a breaking change.\r\n\r\n### Cosmos SDK Version\r\n\r\nv0.50.7\r\n\r\n### How to reproduce?\r\n\r\n_No response_","number":21081,"repository":"cosmos/cosmos-sdk","title":"[Bug(CLI)]: query block can no longer be used to get the most recent block","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21081"},"id":"PVTI_lADOAAN9684ABqEwzgRPEXg","labels":["T:Bug","C:CLI"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/21084"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"[Bug(CLI)]: query block can no longer be used to get the most recent block"},{"assignees":["julienrbrt"],"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\n```shell\r\n=== RUN   TestProcessTestSuite\r\n=== RUN   TestProcessTestSuite/TestLaunchProcess\r\n    /home/levisyin/github.com/cosmos/cosmos-sdk/tools/cosmovisor/buffer.go:261: \b\b\b\b\b\b\b\b\b\b\b\b\b\b\bprocess.go:52: ^[[90m<nil>^[[0m ^[[32mINF^[[0m ^[[1mrunning app^[[0m ^[[36margs=^[[0m[\"foo\",\"bar\",\"1234\",\"/tmp/TestProcessTestSuiteTestLaunchProcess3792210110/001/data/upgrade-info.json\"] ^[[36mmodule=^[[0mcosmosvisor ^[[36mpath=^[[0m/tmp/TestProcessTestSuiteTestLaunchProcess3792210110/001/cosmovisor/genesis/bin/dummyd\r\npanic: failed to parse upgrade info file: empty upgrade-info.json in \"/tmp/TestProcessTestSuiteTestLaunchProcess3792210110/001/data/upgrade-info.json\"\r\n\r\ngoroutine 62 [running]:\r\ncosmossdk.io/tools/cosmovisor.(*fileWatcher).CheckUpdate(0xc0002574a0, {{0x0, 0x0}, {0x0, 0x0, 0x0}, 0x0, {0x0, 0x0}, 0x0})\r\n\t/home/levisyin/github.com/cosmos/cosmos-sdk/tools/cosmovisor/scanner.go:120 +0x39d\r\ncosmossdk.io/tools/cosmovisor.(*fileWatcher).MonitorUpdate.func1()\r\n\t/home/levisyin/github.com/cosmos/cosmos-sdk/tools/cosmovisor/scanner.go:86 +0xc8\r\ncreated by cosmossdk.io/tools/cosmovisor.(*fileWatcher).MonitorUpdate in goroutine 40\r\n\t/home/levisyin/github.com/cosmos/cosmos-sdk/tools/cosmovisor/scanner.go:82 +0x131\r\nexit status 2\r\nFAIL\tcosmossdk.io/tools/cosmovisor\t1.023s\r\n```\n\n### Cosmos SDK Version\n\nmain\n\n### How to reproduce?\n\nRun `go test -timeout 30s -run ^TestProcessTestSuite$ -testify.m ^(TestLaunchProcess)$ cosmossdk.io/tools/cosmovisor -v -count=1`","number":21086,"repository":"cosmos/cosmos-sdk","title":"[Bug]: flaky test `TestLaunchProcess`","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21086"},"id":"PVTI_lADOAAN9684ABqEwzgRP8lk","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Bug]: flaky test `TestLaunchProcess`"},{"content":{"body":"Hi, I am trying to run a cosmos-sdk [v0.50.7] based chain, the chain is running fine and I can see the latest_block_height getting increased. I have posted the output as well: \r\n\r\n`{\"node_info\":{\"protocol_version\":{\"p2p\":\"8\",\"block\":\"11\",\"app\":\"0\"},\"id\":\"590958b0032b293a615691eb49a21e26861fd47d\",\"listen_addr\":\"tcp://0.0.0.0:26656\",\"network\":\"tfd\",\"version\":\"0.38.7\",\"channels\":\"40202122233038606100\",\"moniker\":\"tfd\",\"other\":{\"tx_index\":\"on\",\"rpc_address\":\"tcp://127.0.0.1:26657\"}},\"sync_info\":{\"latest_block_hash\":\"494D7804EF1682A099A70E9A39BF5E9BCF5B77AC1E3EA8C5B2467D6F9CA463AF\",\"latest_app_hash\":\"FC5C4525791F7D505A2EE0BED823BF76C015CFA88EC67B40B00B262A185EEEB4\",**\"latest_block_height\":\"192\"**,\"latest_block_time\":\"2024-07-26T10:51:11.616086639Z\",\"earliest_block_hash\":\"5B0147B864E240C55D170B47D71CBCA2E6CEDD93FEBE551A2FB026841B5D8C37\",\"earliest_app_hash\":\"E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855\",\"earliest_block_height\":\"1\",\"earliest_block_time\":\"2024-07-26T10:34:47.078732264Z\",\"catching_up\":false},\"validator_info\":{\"address\":\"1EA664F8EA6EEE7B6BAEBFE68C83AA79C12C25F9\",\"pub_key\":{\"type\":\"tendermint/PubKeyEd25519\",\"value\":\"kKduCC/j9/1nrYyWnXAN6S1fT8EIY/Qd1ZtjrQ0j3RU=\"},\"voting_power\":\"1000\"}}`\r\n\r\n\r\n but when i try to run commands like to query the bank balances or bank send command I am getting error as pasted below: \r\n\r\n```\r\n./bin/tfd query bank balances validator\r\nrpc error: code = InvalidArgument desc = failed to load state at height 10; version does not exist (latest height: 10): invalid request\r\n```\r\n\r\n","number":21087,"repository":"cosmos/cosmos-sdk","title":"failed to load state","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21087"},"id":"PVTI_lADOAAN9684ABqEwzgRP-ao","labels":["T:question"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"failed to load state"},{"content":{"body":"### Summary\n\nAdd a `RefKeys()` method to collections `MultiIterator` to allow iteration over reference keys without explicitly knowing their value.\n\n### Problem Definition\n\nAssume that an indexed map is created for BaseAccount as described in the [Cosmos docs](https://docs.cosmos.network/v0.50/build/packages/collections#example-5).\r\nNow, instead of using an account number as a unique index, we use a multi index which is the origin country of the account.\r\n\r\nNormally, many account can share an origin country so the multi index fits perfectly. Now, assume I wish to perform some processing on accounts that share the same country index. Since it's no an integer index, there is no clear set of strings that I can iterate over to check which countries exist in my collection.\r\n\r\nIf there was a method for a `MultiIterator` to fetch all the existing reference keys, I could iterate over them, use the `MatchExact` method and get all the account of a specific country.\n\n### Proposed Feature\n\nI propose adding a method called `RefKeys()` to `MultiIterator` that will have an almost identical implementation of the `PrimaryKeys()` method but instead will return a list of the reference keys.","number":21091,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Add `RefKeys()` method to collections `MultiIterator`","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21091"},"id":"PVTI_lADOAAN9684ABqEwzgRQDHQ","labels":["T:feature-request"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: Add `RefKeys()` method to collections `MultiIterator`"},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nBuilding cosmos-sdk app is failing.\r\n\r\n```\r\n\r\ngo test ./...                                                    ‚îÄ‚ïØ\r\n# github.com/cosmos/gogoproto/proto\r\n../../../../.asdf/installs/golang/1.19/packages/pkg/mod/github.com/cosmos/gogoproto@v1.4.10/proto/merge.go:260:25: type func(x *descriptorpb.FileDescriptorProto, y *descriptorpb.FileDescriptorProto) bool of func(x, y *descriptorpb.FileDescriptorProto) bool {‚Ä¶} does not match inferred type func(a *descriptorpb.FileDescriptorProto, b *descriptorpb.FileDescriptorProto) int for func(a E, b E) int\r\n# golang.org/x/crypto/sha3\r\n../../../../.asdf/installs/golang/1.19/packages/pkg/mod/golang.org/x/crypto@v0.24.0/sha3/xor.go:25:10: undefined: subtle.XORBytes\r\n\r\n\r\nFAIL\tgithub.com/covalenthq/covenet/app [build failed]\r\nFAIL\tgithub.com/covalenthq/covenet/x/covenet [build failed]\r\nFAIL\tgithub.com/covalenthq/covenet/x/covenet/client/cli [build failed]\r\nFAIL\tgithub.com/covalenthq/covenet/x/covenet/keeper [build failed]\r\nFAIL\tgithub.com/covalenthq/covenet/x/covenet/types [build failed]\r\n```\r\nMy `go.mod`\r\n```\r\nmodule github.com/covalenthq/covenet\r\n\r\ngo 1.19\r\n\r\nrequire (\r\n\tcosmossdk.io/api v0.3.1\r\n\tgithub.com/cometbft/cometbft v0.37.5\r\n\tgithub.com/cometbft/cometbft-db v0.8.0\r\n\tgithub.com/cosmos/cosmos-sdk v0.47.12\r\n\tgithub.com/cosmos/gogoproto v1.4.10\r\n\tgithub.com/cosmos/ibc-go/v7 v7.6.0\r\n\tgithub.com/ethereum/go-ethereum v1.9.7\r\n\tgithub.com/golang/protobuf v1.5.4\r\n\tgithub.com/gorilla/mux v1.8.0\r\n\tgithub.com/grpc-ecosystem/grpc-gateway v1.16.0\r\n\tgithub.com/spf13/cast v1.6.0\r\n\tgithub.com/spf13/cobra v1.8.0\r\n\tgithub.com/spf13/pflag v1.0.5\r\n\tgithub.com/stretchr/testify v1.9.0\r\n\tgoogle.golang.org/genproto v0.0.0-20240123012728-ef4313101c80\r\n\tgoogle.golang.org/genproto/googleapis/api v0.0.0-20240123012728-ef4313101c80\r\n\tgoogle.golang.org/grpc v1.62.1\r\n\tgopkg.in/yaml.v2 v2.4.0\r\n)\r\n```\r\n\n\n### Cosmos SDK Version\n\n0.47.12\n\n### How to reproduce?\n\nignite27 version                                                 ‚îÄ‚ïØ\r\n¬∑\r\n¬∑ üõ∏ Ignite CLI v28.5.0 is available!\r\n¬∑\r\n¬∑ To upgrade your Ignite CLI version, see the upgrade doc: https://docs.ignite.com/guide/install#upgrading-your-ignite-cli-installation\r\n¬∑\r\n¬∑¬∑\r\n\r\nIgnite CLI version:\t\tv0.27.2\r\nIgnite CLI build date:\t\t2023-10-18T11:34:58Z\r\nIgnite CLI source hash:\t\tf3ab0d709ec41e31a1c57f2fe86c8902d8a50497\r\nIgnite CLI config version:\tv1\r\nCosmos SDK version:\t\tv0.47.3\r\nYour OS:\t\t\tdarwin\r\nYour arch:\t\t\tarm64\r\nYour Node.js version:\t\tv21.7.3\r\nYour go version:\t\tgo version go1.19 darwin/arm64\r\nYour uname -a:\t\t\tDarwin Pranays-MacBook-Pro-3.local 23.2.0 Darwin Kernel Version 23.2.0: Wed Nov 15 21:53:18 PST 2023; root:xnu-10002.61.3~2/RELEASE_ARM64_T6000 arm64\r\nYour cwd:\t\t\t/Users/pranay/Documents/covalent/covenet/covenet\r\nIs on Gitpod:\t\t\tfalse\r\n\r\n\r\n```\r\ngo env                                                           ‚îÄ‚ïØ\r\nGO111MODULE=\"\"\r\nGOARCH=\"arm64\"\r\nGOBIN=\"/Users/pranay/.asdf/installs/golang/1.19/packages/bin\"\r\nGOCACHE=\"/Users/pranay/Library/Caches/go-build\"\r\nGOENV=\"/Users/pranay/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOEXPERIMENT=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"arm64\"\r\nGOHOSTOS=\"darwin\"\r\nGOINSECURE=\"\"\r\nGOMODCACHE=\"/Users/pranay/.asdf/installs/golang/1.19/packages/pkg/mod\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/pranay/.asdf/installs/golang/1.19/packages\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/Users/pranay/.asdf/installs/golang/1.19/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/Users/pranay/.asdf/installs/golang/1.19/go/pkg/tool/darwin_arm64\"\r\nGOVCS=\"\"\r\nGOVERSION=\"go1.19\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"/usr/bin/gcc -I/opt/homebrew/Cellar/unixodbc/2.3.11/include\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/Users/pranay/Documents/covalent/covenet/covenet/go.mod\"\r\nGOWORK=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\". -fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/_k/ddfvbjvn2fq5drm_yv5fprjr0000gn/T/go-build1539602794=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n```","number":21098,"repository":"cosmos/cosmos-sdk","title":"[Bug]: Build Failed! Issues with building Go 1.19, ignite v0.27.2, cosmos-sdk v0.47.12 (upgrading from ignitev0.26 to v0.27.2)","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21098"},"id":"PVTI_lADOAAN9684ABqEwzgRR84E","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"[Bug]: Build Failed! Issues with building Go 1.19, ignite v0.27.2, cosmos-sdk v0.47.12 (upgrading from ignitev0.26 to v0.27.2)"},{"content":{"body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### What happened?\r\n\r\nA bug happened!\r\nI am upgrading my cosmos chain from v0.47.3 to v0.50.7. Some nodes have entered the imprisoned state and reported an error when I want to exit the imprisoned state.\r\n`'signature verification failed; please verify account number (18430) and\r\n  chain-id (titan-test-2): (unsuppored sign mode SIGN_MODE_TEXTUAL): unauthorized'`\r\n  I tested without modifying the chain ID and still reported this error during the upgrade.\r\n \r\n Error reported when I use `--sign-mode direct`\r\n `3:39AM` ERR failure when running app err=\"unsuppored sign mode SIGN_MODE_DIRECT\"`\r\n \r\n\r\n### Cosmos SDK Version\r\n\r\nv0.50.7\r\n\r\n### How to reproduce?\r\n\r\n_No response_","number":21101,"repository":"cosmos/cosmos-sdk","title":"[Bug]: unsuppored sign mode SIGN_MODE_DIRECT","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21101"},"id":"PVTI_lADOAAN9684ABqEwzgRSSS0","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"[Bug]: unsuppored sign mode SIGN_MODE_DIRECT"},{"content":{"body":"We need to pass codec to comet to properly decode gRPC requests.\r\n\r\n_Originally posted by @tac0turtle in https://github.com/cosmos/cosmos-sdk/pull/21038#discussion_r1694907296_\r\n            ","number":21105,"repository":"cosmos/cosmos-sdk","title":"change(serverv2/comet): use codec to parse gRPC requests","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21105"},"id":"PVTI_lADOAAN9684ABqEwzgRTVW0","labels":["C:server/v2"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"change(serverv2/comet): use codec to parse gRPC requests"},{"assignees":["facundomedica"],"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nThis issue tracks a problem with signing context, in which there could be instances of concurrent reads/writes on a map.\r\n\r\nAttempting to fix here: https://github.com/cosmos/cosmos-sdk/pull/21073\n\n### Cosmos SDK Version\n\nv0.50, main\n\n### How to reproduce?\n\n_No response_","number":21108,"repository":"cosmos/cosmos-sdk","title":"[Bug]: txsigning.Context concurrent map write","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21108"},"id":"PVTI_lADOAAN9684ABqEwzgRTbks","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"[Bug]: txsigning.Context concurrent map write"},{"content":{"body":"### Increase Account Sequence Number\r\n\r\nRight now, the unordered tx skips the nonce(sequence) logic completely, maybe we should only skip the check part, but keep the increment? The sequence number is useful in tracking how many transactions sent by the account, still useful for client to query.\r\n\r\n* Ordered logic:\r\n```\r\nif tx.Sequence != account.Sequence {\r\n    return errors.New(\"invalid sequence\")\r\n}\r\n\r\naccount.Sequence += 1\r\naccount.Save()\r\n```\r\n\r\n* Unordered logic:\r\n```\r\naccount.Sequence += 1\r\naccount.Save()\r\n```\r\n\r\n### Client-Supplied Unique Integer Identity\r\n\r\nCurrently, we record the transaction hashes for replay protection, which is quite heavy. One alternative solution is to let the user provide an integer-based unique ID, the integer set could be encoded much more efficiently and can be stored in the account storage, instead of globally.","number":21134,"repository":"cosmos/cosmos-sdk","title":"[Feature]: several unordered tx improvements ideas","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21134"},"id":"PVTI_lADOAAN9684ABqEwzgRZctU","labels":["T:feature-request"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: several unordered tx improvements ideas"},{"content":{"body":"We have simplified our branching strategy (https://github.com/cosmos/cosmos-sdk/pull/21093 https://github.com/cosmos/cosmos-sdk/pull/21140, https://github.com/cosmos/cosmos-sdk/pull/21141).\r\nWith the addition of multiple go modules tagged from main and that need to stay compatible with released sdk version, we should add a new workflow in ci: `software-compat-test.yml` \r\n\r\nThat job can be based on https://github.com/julienrbrt/simapp/blob/main/.github/workflows/refresh.yml in a job to test release branches (v0.52), with latest main for some components. No need to add a new shell script, let's do it all in a workflow.\r\n\r\nAllow the workflow to specify the components in an array (namely `[\"server/v2/appmanager\", \"server/v2/stf\", \"server/v2\",  \"runtime/v2\", \"core\", \"store/v2\", \"store\"]`), replace it from all remaining components and run tests (must be done after https://github.com/cosmos/cosmos-sdk/pull/21140).\r\nWe may not need to test `log`, `math` or other each time. We should focus on v2 first.\r\n\r\nIf failure, post it to `#sdk-sims` slack channel.","number":21144,"repository":"cosmos/cosmos-sdk","title":"CI: Add job to sync release branches with latest main for integration","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21144"},"id":"PVTI_lADOAAN9684ABqEwzgRaJVU","labels":["Type: CI"],"linked pull requests":["https://github.com/cosmos/cosmos-sdk/pull/21174"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"CI: Add job to sync release branches with latest main for integration"},{"content":{"body":"### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### What happened?\n\nI downloaded and unpacked a release today:\r\n\r\n```\r\nwget https://github.com/cosmos/cosmos-sdk/releases/download/cosmovisor%2Fv1.5.0/cosmovisor-v1.5.0-linux-amd64.tar.gz\r\ntar zxvf cosmovisor-v1.5.0-linux-amd64.tar.gz\r\n```\r\nChecked the sha256sums in the SHA256SUMS-cosmovisor-v1.5.0.txt file:\r\n\r\n```\r\ngrep linux-amd64 SHA256SUMS-cosmovisor-v1.5.0.txt\r\n7f4bebfb18a170bff1c725f13dda326e0158132deef9f037ab0c2a48727c3077  cosmovisor-v1.5.0-linux-amd64.tar.gz\r\n```\r\n\r\nAnd then checked the SHA256 sum of the unpacked binary:\r\n```\r\n sha256sum ./cosmovisor\r\n626dfc58c266b85f84a7ed8e2fe0e2346c15be98cfb9f9b88576ba899ed78cdc  ./cosmovisor\r\n```\r\n\r\nSo there is a mismatch, moreover, if I run this binary:\r\n\r\n```\r\ncosmovisor version\r\ncosmovisor version: (devel)\r\n7:01PM INF running app args=[\"version\"] module=cosmovisor path=/home/x/x/cosmovisor/genesis/bin/x\r\n1.0.0\r\n```\n\n### Cosmos SDK Version\n\ncosmovisor 1.0/1.5\n\n### How to reproduce?\n\nAs above","number":21155,"repository":"cosmos/cosmos-sdk","title":"[Bug]: cosmovisor released binaries - wrong files in the package","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21155"},"id":"PVTI_lADOAAN9684ABqEwzgRb2cA","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"ü•≥ Done","title":"[Bug]: cosmovisor released binaries - wrong files in the package"},{"content":{"body":"The time for stable module api is coming! With v0.52 almost (internally) audited and ready for alpha, we need to make sure cosmossdk.io/core v1 has good APIs.\r\n\r\nFrom our call (1/2) we should change a few things before the alpha:\r\n\r\n- [store](https://github.com/cosmos/cosmos-sdk/blob/main/core/store):\r\n  - Add documentation that `TransientStoreService` isn't supported for store/v2\r\n  - Use core/store.StoreUpgrade in x/upgrade (@julienrbrt)\n  - Remove NonConsensusStore until implemented\r\n- [router](https://github.com/cosmos/cosmos-sdk/blob/main/core/router)\r\n  - Remove `InvokeUntyped` from router.Service and rename `InvokeTyped` to invoke. Update the usage in module code\r\n- [app](https://github.com/cosmos/cosmos-sdk/blob/main/core/app)\r\n  - Make `BlockRequest` not generic (https://github.com/cosmos/cosmos-sdk/blob/main/core/app/app.go#L29-L30)\r\n  - Check if `ConsensusMessages` still needed there\r\n\r\n\r\nIn our next meeting (2/2), we'll finish reviewing core/store, core/testing and core/transaction.\r\nUpon closing this issue, we can tag `cosmossdk.io/core` `v1-alpha.1` (final `v1` after 0.52 audit)","number":21176,"repository":"cosmos/cosmos-sdk","title":"Core v1 API Review","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21176"},"id":"PVTI_lADOAAN9684ABqEwzgRiVFA","repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"Core v1 API Review"},{"content":{"body":"### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### What happened?\r\n\r\nThere is a problem iterating collections having a custom type as values where at unit testing it throws `illegal tag 0 (wire type 0)`.\r\n\r\ne.g.\r\n```\r\nk := Keeper{\r\n\t[...]\r\n\tTests:  collections.NewMap(sb, collections.NewPrefix(2), \"tests\", collections.StringKey, codec.CollValue[types.Test](cdc)),\r\n}\r\n```\r\n\r\nProblem occurs when trying to use the iterator:\r\n```\r\niterator, err := k.Keeper.Tests.Iterate(goCtx, nil)\r\nif err != nil {\r\n\treturn nil, err\r\n}\r\n\r\ndefer iterator.Close()\r\n\r\nfor ; iterator.Valid(); iterator.Next() {\r\n\tkey, err := iterator.Key()\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\tval, err := iterator.Value()\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\tfmt.Println(key, val)\r\n}\r\n```\r\n\r\nerr comes from `iterator.Value()` specifically. But `key` comes back as empty when in reality it's not.\r\n\r\nIt does work fine when running the chain. It only happens when running unit tests.\r\n\r\n### Cosmos SDK Version\r\n\r\n0.50.7\r\n\r\n### How to reproduce?\r\n\r\nI've created a new chain using Spawn, then added the code to reproduce it.\r\n\r\nHere is the iterator\r\nhttps://github.com/NelsonGaldeman/iterator-issue/blob/master/x/nameservice/keeper/query_server.go#L48\r\n\r\nIf you spin up a testnet and run:\r\n\r\n```\r\nrolld tx nameservice set myname --from=acc1 --yes\r\nrolld q nameservice resolve $(rolld keys show acc1 -a) --output=json\r\n```\r\n\r\nIt will print the data on Tests collection and work just fine.\r\n\r\n**But** if you run the tests instead, it will fail with proto: Test: illegal tag 0 (wire type 0)\r\n\r\nhttps://github.com/NelsonGaldeman/iterator-issue/blob/master/x/nameservice/keeper/msg_server_test.go#L86\r\n\r\n```\r\ngo test ./x/nameservice/keeper\r\n```\r\n\r\n@Reecepbcups had a go to try to figure out but he couldn't understand what was going on!","number":21182,"repository":"cosmos/cosmos-sdk","title":"[Bug]: collections iterator: illegal tag 0 (wire type 0)","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21182"},"id":"PVTI_lADOAAN9684ABqEwzgRkJo8","labels":["T:Bug"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Bug]: collections iterator: illegal tag 0 (wire type 0)"},{"content":{"body":"### Summary\r\n\r\n`store/v1` module is used in various `x` modules. Most use cases are `store/types` already migrated to `core/store`.\r\nIt leads to some dependency conflicts in v2 modules, like\r\n\r\n```\r\nsimapp/v2 -> store/v2, server/v2 -> store/v1\r\nserver/v2 -> client/v2 -> x/modules -> store/v1\r\nstore/v2, store/v1 -> iavl (conflicts)\r\n```\r\n\r\n### Modules\r\n\r\n- [ ] x/auth\r\n- [ ] x/authz\r\n- [ ] x/bank\r\n- [ ] x/circuit\r\n- [ ] x/consensus\r\n- [ ] x/distribution\r\n- [ ] x/epochs\r\n- [ ] x/evidence\r\n- [ ] x/feegrant\r\n- [ ] x/gov\r\n- [ ] x/group\r\n- [ ] x/mint\r\n- [ ] x/nft\r\n- [ ] x/params\r\n- [ ] x/protocolpool\r\n- [ ] x/slashing\r\n- [ ] x/staking\r\n- [ ] x/upgrade\r\n- [ ] client\r\n- [ ] server ???","number":21183,"repository":"cosmos/cosmos-sdk","title":"[Feature]: Decouple `store` from `x` modules","type":"Issue","url":"https://github.com/cosmos/cosmos-sdk/issues/21183"},"id":"PVTI_lADOAAN9684ABqEwzgRkUgE","labels":["T:feature-request"],"repository":"https://github.com/cosmos/cosmos-sdk","status":"üìã Backlog","title":"[Feature]: Decouple `store` from `x` modules"}],"totalCount":544}
